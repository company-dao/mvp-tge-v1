{
  "address": "0x544C9160505712d6B5E12888b5eB9bCb708885aF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupTVL",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "whitelist",
              "type": "address[]"
            }
          ],
          "internalType": "struct ITGE.TGEInfo",
          "name": "info",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "createTGEProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "createTransferETHProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastProposalId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalState",
      "outputs": [
        {
          "internalType": "enum Governor.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "againstVotes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "service",
      "outputs": [
        {
          "internalType": "contract IService",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "metadataURI_",
          "type": "string"
        }
      ],
      "name": "setMetadataURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tge_",
          "type": "address"
        }
      ],
      "name": "setTGE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tge",
      "outputs": [
        {
          "internalType": "contract ITGE",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IGovernanceToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe9cc7d7297269db4972969619edf7176e284fbf97fa909eeca8994a22b9c6000",
  "receipt": {
    "to": null,
    "from": "0x90A4a90e6FAf88c4d709F666D26793F9e2B47183",
    "contractAddress": "0x544C9160505712d6B5E12888b5eB9bCb708885aF",
    "transactionIndex": 2,
    "gasUsed": "1952020",
    "logsBloom": "0x
    "blockHash": "0xbf7d0f2834091e777b3758129d1be9878545aec2b6229147fdda55ee19cfd6ec",
    "transactionHash": "0xe9cc7d7297269db4972969619edf7176e284fbf97fa909eeca8994a22b9c6000",
    "logs": [],
    "blockNumber": 7123827,
    "cumulativeGasUsed": "2198107",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "39f96f7bb5a095faa550612a86705d4a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"internalType\":\"struct ITGE.TGEInfo\",\"name\":\"info\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"createTGEProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"createTransferETHProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalState\",\"outputs\":[{\"internalType\":\"enum Governor.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"service\",\"outputs\":[{\"internalType\":\"contract IService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadataURI_\",\"type\":\"string\"}],\"name\":\"setMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tge_\",\"type\":\"address\"}],\"name\":\"setTGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tge\",\"outputs\":[{\"internalType\":\"contract ITGE\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IGovernanceToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pool.sol\":\"Pool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./components/Governor.sol\\\";\\nimport \\\"./interfaces/IService.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IGovernanceToken.sol\\\";\\nimport \\\"./interfaces/ITGE.sol\\\";\\n\\ncontract Pool is IPool, OwnableUpgradeable, Governor {\\n    IService public service;\\n\\n    IGovernanceToken public token;\\n\\n    ITGE public tge;\\n\\n    string public metadataURI;\\n\\n    // INITIALIZER AND CONFIGURATOR\\n\\n    function initialize(address owner_) external initializer {\\n        service = IService(msg.sender);\\n        _transferOwnership(owner_);\\n    }\\n\\n    function setToken(address token_) external onlyService {\\n        token = IGovernanceToken(token_);\\n    }\\n\\n    function setTGE(address tge_) external onlyService {\\n        tge = ITGE(tge_);\\n    }\\n\\n    function setMetadataURI(string memory metadataURI_)\\n        external\\n        onlyServiceOwner\\n    {\\n        metadataURI = metadataURI_;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    function createTransferETHProposal(\\n        uint256 duration,\\n        address to,\\n        uint256 value,\\n        string memory description\\n    ) external onlyShareholder returns (uint256 proposalId) {\\n        proposalId = _proposeSingleAction(duration, to, value, \\\"\\\", description);\\n    }\\n\\n    function createTGEProposal(\\n        uint256 duration,\\n        ITGE.TGEInfo memory info,\\n        string memory description\\n    ) external onlyShareholder returns (uint256 proposalId) {\\n        proposalId = _proposeSingleAction(\\n            duration,\\n            address(service),\\n            0,\\n            abi.encodeWithSelector(IService.createSecondaryTGE.selector, info),\\n            description\\n        );\\n    }\\n\\n    function castVote(uint256 proposalId, bool support) external {\\n        uint256 votes = token.unlockedBalanceOf(msg.sender);\\n        require(votes > 0, \\\"No votes\\\");\\n        token.lock(\\n            msg.sender,\\n            token.balanceOf(msg.sender),\\n            proposals[proposalId].endBlock\\n        );\\n        _castVote(proposalId, votes, support);\\n    }\\n\\n    // RECEIVE\\n\\n    receive() external payable {\\n        // Supposed to be empty\\n    }\\n\\n    // PUBLIC VIEW FUNCTIONS\\n\\n    function owner()\\n        public\\n        view\\n        override(IPool, OwnableUpgradeable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    function _proposeSingleAction(\\n        uint256 duration,\\n        address target,\\n        uint256 value,\\n        bytes memory cd,\\n        string memory description\\n    ) internal returns (uint256 proposalId) {\\n        address[] memory targets = new address[](1);\\n        targets[0] = target;\\n        uint256[] memory values = new uint256[](1);\\n        values[0] = value;\\n        bytes[] memory calldatas = new bytes[](1);\\n        calldatas[0] = cd;\\n        proposalId = _propose(\\n            duration,\\n            service.proposalQuorum(),\\n            service.proposalThreshold(),\\n            targets,\\n            values,\\n            calldatas,\\n            description\\n        );\\n    }\\n\\n    function _afterProposalCreated(uint256 proposalId) internal override {\\n        service.addProposal(proposalId);\\n    }\\n\\n    function _getTotalVotes() internal view override returns (uint256) {\\n        return token.totalSupply();\\n    }\\n\\n    // MODIFIER\\n\\n    modifier onlyShareholder() {\\n        require(token.balanceOf(msg.sender) > 0, \\\"Not shareholder\\\");\\n        _;\\n    }\\n\\n    modifier onlyService() {\\n        require(msg.sender == address(service), \\\"Not service\\\");\\n        _;\\n    }\\n\\n    modifier onlyServiceOwner() {\\n        require(msg.sender == service.owner(), \\\"Not service owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x4440771071536fc22cca761266f5c4ba7b83c06d351336e519e34fc1b660abe2\",\"license\":\"MIT\"},\"contracts/components/Governor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nabstract contract Governor {\\n    struct Proposal {\\n        uint256 quorum;\\n        uint256 threshold;\\n        address[] targets;\\n        uint256[] values;\\n        bytes[] calldatas;\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 forVotes;\\n        uint256 againstVotes;\\n        bool executed;\\n    }\\n\\n    mapping(uint256 => Proposal) public proposals;\\n\\n    uint256 public lastProposalId;\\n\\n    enum ProposalState {\\n        None,\\n        Active,\\n        Failed,\\n        Successful,\\n        Executed\\n    }\\n\\n    // EVENTS\\n\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        uint256 quorum,\\n        address[] targets,\\n        uint256[] values,\\n        bytes[] calldatas,\\n        string description\\n    );\\n\\n    event VoteCast(\\n        address voter,\\n        uint256 proposalId,\\n        uint256 votes,\\n        bool support\\n    );\\n\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    // PUBLIC FUNCTIONS\\n\\n    function execute(uint256 proposalId) external {\\n        Proposal memory proposal = proposals[proposalId];\\n\\n        require(\\n            proposalState(proposalId) == ProposalState.Successful,\\n            \\\"Proposal is in wrong state\\\"\\n        );\\n\\n        proposals[proposalId].executed = true;\\n\\n        string memory errorMessage = \\\"Call reverted without message\\\";\\n        for (uint256 i = 0; i < proposal.targets.length; ++i) {\\n            (bool success, bytes memory returndata) = proposal.targets[i].call{\\n                value: proposal.values[i]\\n            }(proposal.calldatas[i]);\\n            AddressUpgradeable.verifyCallResult(\\n                success,\\n                returndata,\\n                errorMessage\\n            );\\n        }\\n\\n        emit ProposalExecuted(proposalId);\\n    }\\n\\n    // PUBLIC VIEW FUNCTIONS\\n\\n    function proposalState(uint256 proposalId)\\n        public\\n        view\\n        returns (ProposalState)\\n    {\\n        Proposal memory proposal = proposals[proposalId];\\n        if (proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n        if (proposal.startBlock == 0) {\\n            return ProposalState.None;\\n        }\\n        if (proposal.endBlock > block.number) {\\n            return ProposalState.Active;\\n        }\\n\\n        uint256 quorumVotes = (_getTotalVotes() * proposal.quorum) / 100;\\n        uint256 totalVotes = proposal.forVotes + proposal.againstVotes;\\n        if (\\n            totalVotes >= quorumVotes &&\\n            proposal.forVotes * 100 > totalVotes * proposal.threshold\\n        ) {\\n            return ProposalState.Successful;\\n        } else {\\n            return ProposalState.Failed;\\n        }\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    function _propose(\\n        uint256 duration,\\n        uint256 quorum,\\n        uint256 threshold,\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) internal returns (uint256 proposalId) {\\n        require(\\n            proposals[lastProposalId].endBlock <= block.number,\\n            \\\"Already has active proposal\\\"\\n        );\\n\\n        proposalId = ++lastProposalId;\\n        proposals[proposalId] = Proposal({\\n            quorum: quorum,\\n            threshold: threshold,\\n            targets: targets,\\n            values: values,\\n            calldatas: calldatas,\\n            startBlock: block.number,\\n            endBlock: block.number + duration,\\n            forVotes: 0,\\n            againstVotes: 0,\\n            executed: false\\n        });\\n        _afterProposalCreated(proposalId);\\n\\n        emit ProposalCreated(\\n            proposalId,\\n            quorum,\\n            targets,\\n            values,\\n            calldatas,\\n            description\\n        );\\n    }\\n\\n    function _castVote(\\n        uint256 proposalId,\\n        uint256 votes,\\n        bool support\\n    ) internal {\\n        require(\\n            proposals[proposalId].endBlock > block.number,\\n            \\\"Voting finished\\\"\\n        );\\n\\n        if (support) {\\n            proposals[proposalId].forVotes += votes;\\n        } else {\\n            proposals[proposalId].againstVotes += votes;\\n        }\\n\\n        emit VoteCast(msg.sender, proposalId, votes, support);\\n    }\\n\\n    function _afterProposalCreated(uint256 proposalId) internal virtual;\\n\\n    function _getTotalVotes() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x40e38ba6bbd3e8199aa3c17f83ed5cccd5ae47ecb1745297ae0fbee0164c9634\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IDirectory {\\n    enum ContractType {\\n        None,\\n        Pool,\\n        GovernanceToken,\\n        TGE\\n    }\\n\\n    function addContractRecord(address addr, ContractType contractType)\\n        external\\n        returns (uint256 index);\\n\\n    function addProposalRecord(address pool, uint256 proposalId)\\n        external\\n        returns (uint256 index);\\n\\n    function typeOf(address addr) external view returns (ContractType);\\n}\\n\",\"keccak256\":\"0x39fc90b444e9aefc4e2a3a40b43840dfa44ff13441a9e50d3de9bb95f044bd81\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IGovernanceToken is IERC20Upgradeable {\\n    struct TokenInfo {\\n        string name;\\n        string symbol;\\n        uint256 cap;\\n    }\\n\\n    function initialize(address pool_, TokenInfo memory info) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function lock(\\n        address account,\\n        uint256 amount,\\n        uint256 deadline\\n    ) external;\\n\\n    function cap() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8f56a5e6fd46a1c2435ba839bf724567235d9192555ae238b2042f543f688eb3\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./IGovernanceToken.sol\\\";\\n\\ninterface IPool {\\n    function initialize(address owner_) external;\\n\\n    function setToken(address token_) external;\\n\\n    function setTGE(address tge_) external;\\n\\n    function owner() external view returns (address);\\n\\n    function token() external view returns (IGovernanceToken);\\n\\n    function tge() external view returns (ITGE);\\n}\\n\",\"keccak256\":\"0x2eb4359ec9c2a4aa2bc58b97838dd3d79f32e69fc799bdbdeb74fbc37dc2f82b\",\"license\":\"MIT\"},\"contracts/interfaces/IService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IDirectory.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\n\\ninterface IService {\\n    function createSecondaryTGE(ITGE.TGEInfo memory tgeInfo) external;\\n\\n    function addProposal(uint256 proposalId) external;\\n\\n    function directory() external view returns (IDirectory);\\n\\n    function owner() external view returns (address);\\n\\n    function proposalQuorum() external view returns (uint256);\\n\\n    function proposalThreshold() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x41d55ae4b374c37db197574484afd3a292f3656eeac930f277d4311b91e61754\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface ITGE {\\n    struct TGEInfo {\\n        string metadataURI;\\n        uint256 price;\\n        uint256 hardcap;\\n        uint256 softcap;\\n        uint256 minPurchase;\\n        uint256 maxPurchase;\\n        uint256 lockupPercent;\\n        uint256 lockupDuration;\\n        uint256 lockupTVL;\\n        uint256 duration;\\n        address[] whitelist;\\n    }\\n\\n    function initialize(\\n        address owner_,\\n        address token_,\\n        TGEInfo memory info\\n    ) external;\\n\\n    function purchase(uint256 amount) external payable;\\n\\n    function claimBack() external;\\n\\n    function transferFunds() external;\\n\\n    function maxPurchaseOf(address account) external view returns (uint256);\\n\\n    enum State {\\n        Active,\\n        Failed,\\n        Successful\\n    }\\n\\n    function state() external view returns (State);\\n}\\n\",\"keccak256\":\"0x723a068fe6bdc89d8ca284d2cd917beae41de9f3ddf04f0b6a56aea5a82d2949\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061225a806100206000396000f3fe60806040526004361061010d5760003560e01c80638da5cb5b11610095578063d26331d411610064578063d26331d41461033a578063d598d4c914610367578063f2fde38b14610387578063fc0c546a146103a7578063fe0d94c1146103c757600080fd5b80638da5cb5b146102ad57806392aa43c0146102da578063a7497fa5146102fa578063c4d66de81461031a57600080fd5b806315373e3d116100dc57806315373e3d146102225780633e2d06ed14610242578063715018a61461026257806374cb304114610277578063750521f51461028d57600080fd5b8063013cf08b1461011957806303ee438c146101b05780630cd27c0f146101d2578063144fa6d71461020057600080fd5b3661011457005b600080fd5b34801561012557600080fd5b50610174610134366004611aa0565b6065602052600090815260409020805460018201546005830154600684015460078501546008860154600990960154949593949293919290919060ff1687565b604080519788526020880196909652948601939093526060850191909152608084015260a0830152151560c082015260e0015b60405180910390f35b3480156101bc57600080fd5b506101c56103e7565b6040516101a79190611b15565b3480156101de57600080fd5b506101f26101ed366004611ca7565b610475565b6040519081526020016101a7565b34801561020c57600080fd5b5061022061021b366004611dc9565b61059b565b005b34801561022e57600080fd5b5061022061023d366004611de6565b610605565b34801561024e57600080fd5b506101f261025d366004611e1b565b6107ae565b34801561026e57600080fd5b50610220610883565b34801561028357600080fd5b506101f260665481565b34801561029957600080fd5b506102206102a8366004611e7e565b6108ee565b3480156102b957600080fd5b506102c26109d0565b6040516001600160a01b0390911681526020016101a7565b3480156102e657600080fd5b506102206102f5366004611dc9565b6109e9565b34801561030657600080fd5b506069546102c2906001600160a01b031681565b34801561032657600080fd5b50610220610335366004611dc9565b610a53565b34801561034657600080fd5b5061035a610355366004611aa0565b610adb565b6040516101a79190611ec9565b34801561037357600080fd5b506067546102c2906001600160a01b031681565b34801561039357600080fd5b506102206103a2366004611dc9565b610d94565b3480156103b357600080fd5b506068546102c2906001600160a01b031681565b3480156103d357600080fd5b506102206103e2366004611aa0565b610e64565b606a80546103f490611ef1565b80601f016020809104026020016040519081016040528092919081815260200182805461042090611ef1565b801561046d5780601f106104425761010080835404028352916020019161046d565b820191906000526020600020905b81548152906001019060200180831161045057829003601f168201915b505050505081565b6068546040516370a0823160e01b815233600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156104c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e69190611f2b565b1161052a5760405162461bcd60e51b815260206004820152600f60248201526e2737ba1039b430b932b437b63232b960891b60448201526064015b60405180910390fd5b6067546040516105939186916001600160a01b03909116906000906281176b60e51b9061055b908990602401611f88565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915286611231565b949350505050565b6067546001600160a01b031633146105e35760405162461bcd60e51b815260206004820152600b60248201526a4e6f74207365727669636560a81b6044820152606401610521565b606880546001600160a01b0319166001600160a01b0392909216919091179055565b606854604051631092ab9160e31b81523360048201526000916001600160a01b0316906384955c8890602401602060405180830381865afa15801561064e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106729190611f2b565b9050600081116106af5760405162461bcd60e51b81526020600482015260086024820152674e6f20766f74657360c01b6044820152606401610521565b6068546040516370a0823160e01b815233600482018190526001600160a01b039092169163e2ab691d9183906370a0823190602401602060405180830381865afa158015610701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107259190611f2b565b6000878152606560205260409081902060060154905160e085901b6001600160e01b03191681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b15801561078657600080fd5b505af115801561079a573d6000803e3d6000fd5b505050506107a983828461141b565b505050565b6068546040516370a0823160e01b815233600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156107fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081f9190611f2b565b1161085e5760405162461bcd60e51b815260206004820152600f60248201526e2737ba1039b430b932b437b63232b960891b6044820152606401610521565b61087a8585856040518060200160405280600081525086611231565b95945050505050565b3361088c6109d0565b6001600160a01b0316146108e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610521565b6108ec600061150c565b565b606760009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610941573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109659190612036565b6001600160a01b0316336001600160a01b0316146109b95760405162461bcd60e51b81526020600482015260116024820152702737ba1039b2b93b34b1b29037bbb732b960791b6044820152606401610521565b80516109cc90606a9060208401906118c8565b5050565b60006109e46033546001600160a01b031690565b905090565b6067546001600160a01b03163314610a315760405162461bcd60e51b815260206004820152600b60248201526a4e6f74207365727669636560a81b6044820152606401610521565b606980546001600160a01b0319166001600160a01b0392909216919091179055565b6000610a5f600161155e565b90508015610a77576000805461ff0019166101001790555b606780546001600160a01b03191633179055610a928261150c565b80156109cc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60008181526065602090815260408083208151610140810183528154815260018201548185015260028201805484518187028101870186528181528796939586019390929190830182828015610b5a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b3c575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610bb257602002820191906000526020600020905b815481526020019060010190808311610b9e575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015610c8c578382906000526020600020018054610bff90611ef1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2b90611ef1565b8015610c785780601f10610c4d57610100808354040283529160200191610c78565b820191906000526020600020905b815481529060010190602001808311610c5b57829003601f168201915b505050505081526020019060010190610be0565b505050908252506005820154602082015260068201546040820152600782015460608201526008820154608082015260099091015460ff16151560a09091015261012081015190915015610ce35750600492915050565b8060a00151600003610cf85750600092915050565b438160c001511115610d0d5750600192915050565b600060648260000151610d1e6115e6565b610d289190612069565b610d329190612088565b905060008261010001518360e00151610d4b91906120aa565b9050818110158015610d7957506020830151610d679082612069565b60e0840151610d77906064612069565b115b15610d8957506003949350505050565b506002949350505050565b33610d9d6109d0565b6001600160a01b031614610df35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610521565b6001600160a01b038116610e585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610521565b610e618161150c565b50565b600081815260656020908152604080832081516101408101835281548152600182015481850152600282018054845181870281018701865281815292959394860193830182828015610edf57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ec1575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610f3757602002820191906000526020600020905b815481526020019060010190808311610f23575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015611011578382906000526020600020018054610f8490611ef1565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb090611ef1565b8015610ffd5780601f10610fd257610100808354040283529160200191610ffd565b820191906000526020600020905b815481529060010190602001808311610fe057829003601f168201915b505050505081526020019060010190610f65565b505050908252506005820154602082015260068201546040820152600782015460608201526008820154608082015260099091015460ff16151560a0909101529050600361105e83610adb565b600481111561106f5761106f611eb3565b146110bc5760405162461bcd60e51b815260206004820152601a60248201527f50726f706f73616c20697320696e2077726f6e672073746174650000000000006044820152606401610521565b6000828152606560209081526040808320600901805460ff191660011790558051808201909152601d81527f43616c6c20726576657274656420776974686f7574206d65737361676500000091810191909152905b8260400151518110156111f75760008084604001518381518110611137576111376120c2565b60200260200101516001600160a01b03168560600151848151811061115e5761115e6120c2565b60200260200101518660800151858151811061117c5761117c6120c2565b602002602001015160405161119191906120d8565b60006040518083038185875af1925050503d80600081146111ce576040519150601f19603f3d011682016040523d82523d6000602084013e6111d3565b606091505b50915091506111e3828286611654565b505050806111f0906120f4565b9050611111565b506040518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f906020015b60405180910390a1505050565b60408051600180825281830190925260009182919060208083019080368337019050509050858160008151811061126a5761126a6120c2565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905085816000815181106112bb576112bb6120c2565b6020908102919091010152604080516001808252818301909252600091816020015b60608152602001906001900390816112dd5790505090508581600081518110611308576113086120c2565b602002602001018190525061140e89606760009054906101000a90046001600160a01b03166001600160a01b0316639a0b6f9b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e9190611f2b565b606760009054906101000a90046001600160a01b03166001600160a01b031663b58131b06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114059190611f2b565b8686868b611694565b9998505050505050505050565b600083815260656020526040902060060154431061146d5760405162461bcd60e51b815260206004820152600f60248201526e159bdd1a5b99c8199a5b9a5cda1959608a1b6044820152606401610521565b801561149f57600083815260656020526040812060070180548492906114949084906120aa565b909155506114c69050565b600083815260656020526040812060080180548492906114c09084906120aa565b90915550505b604080513381526020810185905290810183905281151560608201527f2c48deccc79dbba942eeb2f991c4bfa0ac136723ddc0ea1b575dd85373408df890608001611224565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff16156115a5578160ff1660011480156115815750303b155b61159d5760405162461bcd60e51b81526004016105219061210d565b506000919050565b60005460ff8084169116106115cc5760405162461bcd60e51b81526004016105219061210d565b506000805460ff191660ff92909216919091179055600190565b606854604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015611630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e49190611f2b565b6060831561166357508161168d565b8251156116735782518084602001fd5b8160405162461bcd60e51b81526004016105219190611b15565b9392505050565b6066546000908152606560205260408120600601544310156116f85760405162461bcd60e51b815260206004820152601b60248201527f416c726561647920686173206163746976652070726f706f73616c00000000006044820152606401610521565b606660008154611707906120f4565b9190508190559050604051806101400160405280888152602001878152602001868152602001858152602001848152602001438152602001894361174b91906120aa565b81526000602080830182905260408084018390526060909301829052848252606581529082902083518155838201516001820155918301518051611795926002850192019061194c565b50606082015180516117b19160038401916020909101906119a1565b50608082015180516117cd9160048401916020909101906119db565b5060a0820151600582015560c0820151600682015560e082015160078201556101008201516008820155610120909101516009909101805460ff191691151591909117905561181b81611867565b7fbd5cfa3a6d750f3995a6e4c6f70b1d01187c16a6fcfcd3bbe400ecf361b756ba8188878787876040516118549695949392919061215b565b60405180910390a1979650505050505050565b606754604051630ffb246960e21b8152600481018390526001600160a01b0390911690633fec91a490602401600060405180830381600087803b1580156118ad57600080fd5b505af11580156118c1573d6000803e3d6000fd5b5050505050565b8280546118d490611ef1565b90600052602060002090601f0160209004810192826118f6576000855561193c565b82601f1061190f57805160ff191683800117855561193c565b8280016001018555821561193c579182015b8281111561193c578251825591602001919060010190611921565b50611948929150611a34565b5090565b82805482825590600052602060002090810192821561193c579160200282015b8281111561193c57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061196c565b82805482825590600052602060002090810192821561193c579160200282018281111561193c578251825591602001919060010190611921565b828054828255906000526020600020908101928215611a28579160200282015b82811115611a285782518051611a189184916020909101906118c8565b50916020019190600101906119fb565b50611948929150611a49565b5b808211156119485760008155600101611a35565b80821115611948576000611a5d8282611a66565b50600101611a49565b508054611a7290611ef1565b6000825580601f10611a82575050565b601f016020900490600052602060002090810190610e619190611a34565b600060208284031215611ab257600080fd5b5035919050565b60005b83811015611ad4578181015183820152602001611abc565b83811115611ae3576000848401525b50505050565b60008151808452611b01816020860160208601611ab9565b601f01601f19169290920160200192915050565b60208152600061168d6020830184611ae9565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715611b6257611b62611b28565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611b9157611b91611b28565b604052919050565b600082601f830112611baa57600080fd5b813567ffffffffffffffff811115611bc457611bc4611b28565b611bd7601f8201601f1916602001611b68565b818152846020838601011115611bec57600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b0381168114610e6157600080fd5b600082601f830112611c2f57600080fd5b8135602067ffffffffffffffff821115611c4b57611c4b611b28565b8160051b611c5a828201611b68565b9283528481018201928281019087851115611c7457600080fd5b83870192505b84831015611c9c578235611c8d81611c09565b82529183019190830190611c7a565b979650505050505050565b600080600060608486031215611cbc57600080fd5b83359250602084013567ffffffffffffffff80821115611cdb57600080fd5b908501906101608288031215611cf057600080fd5b611cf8611b3e565b823582811115611d0757600080fd5b611d1389828601611b99565b8252506020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101208084013581830152506101408084013583811115611d8857600080fd5b611d948a828701611c1e565b828401525050809450506040860135915080821115611db257600080fd5b50611dbf86828701611b99565b9150509250925092565b600060208284031215611ddb57600080fd5b813561168d81611c09565b60008060408385031215611df957600080fd5b8235915060208301358015158114611e1057600080fd5b809150509250929050565b60008060008060808587031215611e3157600080fd5b843593506020850135611e4381611c09565b925060408501359150606085013567ffffffffffffffff811115611e6657600080fd5b611e7287828801611b99565b91505092959194509250565b600060208284031215611e9057600080fd5b813567ffffffffffffffff811115611ea757600080fd5b61059384828501611b99565b634e487b7160e01b600052602160045260246000fd5b6020810160058310611eeb57634e487b7160e01b600052602160045260246000fd5b91905290565b600181811c90821680611f0557607f821691505b602082108103611f2557634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611f3d57600080fd5b5051919050565b600081518084526020808501945080840160005b83811015611f7d5781516001600160a01b031687529582019590820190600101611f58565b509495945050505050565b6020815260008251610160806020850152611fa7610180850183611ae9565b9150602085015160408501526040850151606085015260608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151915050610120818187015280870151915050610140818187015280870151915050601f19858403018286015261202c8382611f44565b9695505050505050565b60006020828403121561204857600080fd5b815161168d81611c09565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561208357612083612053565b500290565b6000826120a557634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156120bd576120bd612053565b500190565b634e487b7160e01b600052603260045260246000fd5b600082516120ea818460208701611ab9565b9190910192915050565b60006001820161210657612106612053565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b86815260006020878184015260c0604084015261217b60c0840188611f44565b838103606085015286518082528288019183019060005b818110156121ae57835183529284019291840191600101612192565b5050848103608086015286518082528382019250600581901b8201840184890160005b838110156121ff57601f198584030186526121ed838351611ae9565b958701959250908601906001016121d1565b505086810360a08801526122138189611ae9565b9d9c5050505050505050505050505056fea2646970667358221220eca6660e43e60db0143430386638c452987dc38926ef00353e6165ba5820304e64736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 208,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 211,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2312,
        "contract": "contracts/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6572,
        "contract": "contracts/Pool.sol:Pool",
        "label": "proposals",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_struct(Proposal)6567_storage)"
      },
      {
        "astId": 6574,
        "contract": "contracts/Pool.sol:Pool",
        "label": "lastProposalId",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 5011,
        "contract": "contracts/Pool.sol:Pool",
        "label": "service",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IService)7075"
      },
      {
        "astId": 5014,
        "contract": "contracts/Pool.sol:Pool",
        "label": "token",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IGovernanceToken)7001"
      },
      {
        "astId": 5017,
        "contract": "contracts/Pool.sol:Pool",
        "label": "tge",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(ITGE)7140"
      },
      {
        "astId": 5019,
        "contract": "contracts/Pool.sol:Pool",
        "label": "metadataURI",
        "offset": 0,
        "slot": "106",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IGovernanceToken)7001": {
        "encoding": "inplace",
        "label": "contract IGovernanceToken",
        "numberOfBytes": "20"
      },
      "t_contract(IService)7075": {
        "encoding": "inplace",
        "label": "contract IService",
        "numberOfBytes": "20"
      },
      "t_contract(ITGE)7140": {
        "encoding": "inplace",
        "label": "contract ITGE",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Proposal)6567_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Governor.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)6567_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)6567_storage": {
        "encoding": "inplace",
        "label": "struct Governor.Proposal",
        "members": [
          {
            "astId": 6545,
            "contract": "contracts/Pool.sol:Pool",
            "label": "quorum",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6547,
            "contract": "contracts/Pool.sol:Pool",
            "label": "threshold",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6550,
            "contract": "contracts/Pool.sol:Pool",
            "label": "targets",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 6553,
            "contract": "contracts/Pool.sol:Pool",
            "label": "values",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 6556,
            "contract": "contracts/Pool.sol:Pool",
            "label": "calldatas",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_bytes_storage)dyn_storage"
          },
          {
            "astId": 6558,
            "contract": "contracts/Pool.sol:Pool",
            "label": "startBlock",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6560,
            "contract": "contracts/Pool.sol:Pool",
            "label": "endBlock",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6562,
            "contract": "contracts/Pool.sol:Pool",
            "label": "forVotes",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6564,
            "contract": "contracts/Pool.sol:Pool",
            "label": "againstVotes",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6566,
            "contract": "contracts/Pool.sol:Pool",
            "label": "executed",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}