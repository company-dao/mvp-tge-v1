{
  "address": "0x76ea9429f4DD5A5F2c9A502654c27A5D57EBeE83",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "companyDomain",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "companyId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastProposalId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalState",
      "outputs": [
        {
          "internalType": "enum Governor.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "againstVotes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "cd",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "proposeSingleAction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "service",
      "outputs": [
        {
          "internalType": "contract IService",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "companyDomain_",
          "type": "string"
        }
      ],
      "name": "setCompanyDomain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "companyId_",
          "type": "string"
        }
      ],
      "name": "setCompanyId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tge_",
          "type": "address"
        }
      ],
      "name": "setTGE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tge",
      "outputs": [
        {
          "internalType": "contract ITGE",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IGovernanceToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x540cf6f66d8727ae3fae8bc50daf913e4a2e890588d873913d4063d59027bad5",
  "receipt": {
    "to": null,
    "from": "0xF89e3d72F182BBcccEfFB7F7d2c9ce796D6547e6",
    "contractAddress": "0x76ea9429f4DD5A5F2c9A502654c27A5D57EBeE83",
    "transactionIndex": 13,
    "gasUsed": "1914581",
    "logsBloom": "0x
    "blockHash": "0x2b7813253ef9027ed78152e074695471432a81ac52024f3f93bc19f16953871c",
    "transactionHash": "0x540cf6f66d8727ae3fae8bc50daf913e4a2e890588d873913d4063d59027bad5",
    "logs": [],
    "blockNumber": 7174539,
    "cumulativeGasUsed": "10925576",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "a92f2d21a2e6b235a63ce6ec5f8104c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyDomain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalState\",\"outputs\":[{\"internalType\":\"enum Governor.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"cd\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"proposeSingleAction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"service\",\"outputs\":[{\"internalType\":\"contract IService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"companyDomain_\",\"type\":\"string\"}],\"name\":\"setCompanyDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"companyId_\",\"type\":\"string\"}],\"name\":\"setCompanyId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tge_\",\"type\":\"address\"}],\"name\":\"setTGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tge\",\"outputs\":[{\"internalType\":\"contract ITGE\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IGovernanceToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pool.sol\":\"Pool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./components/Governor.sol\\\";\\nimport \\\"./interfaces/IService.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IGovernanceToken.sol\\\";\\nimport \\\"./interfaces/ITGE.sol\\\";\\n\\ncontract Pool is IPool, OwnableUpgradeable, Governor {\\n    IService public service;\\n\\n    IGovernanceToken public token;\\n\\n    ITGE public tge;\\n\\n    string public companyId;\\n\\n    string public companyDomain;\\n\\n    // INITIALIZER AND CONFIGURATOR\\n\\n    function initialize(address owner_) external initializer {\\n        service = IService(msg.sender);\\n        _transferOwnership(owner_);\\n    }\\n\\n    function setToken(address token_) external onlyService {\\n        token = IGovernanceToken(token_);\\n    }\\n\\n    function setTGE(address tge_) external onlyService {\\n        tge = ITGE(tge_);\\n    }\\n\\n    function setCompanyId(string memory companyId_) external onlyServiceOwner {\\n        require(bytes(companyId).length == 0, \\\"Already set\\\");\\n        require(bytes(companyId_).length != 0, \\\"Can not be empty\\\");\\n        companyId = companyId_;\\n    }\\n\\n    function setCompanyDomain(string memory companyDomain_) external {\\n        if (bytes(companyDomain).length == 0) {\\n            require(\\n                msg.sender == service.owner(),\\n                \\\"Initial setter should be admin\\\"\\n            );\\n        } else {\\n            require(\\n                msg.sender == address(this),\\n                \\\"Changer should be pool governance\\\"\\n            );\\n        }\\n        require(bytes(companyDomain_).length != 0, \\\"Can not be empty\\\");\\n        companyDomain = companyDomain_;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    function castVote(\\n        uint256 proposalId,\\n        uint256 votes,\\n        bool support\\n    ) external {\\n        if (votes == type(uint256).max) {\\n            votes = token.unlockedBalanceOf(msg.sender);\\n        } else {\\n            require(\\n                votes <= token.unlockedBalanceOf(msg.sender),\\n                \\\"Not enough unlocked balance\\\"\\n            );\\n        }\\n        require(votes > 0, \\\"No votes\\\");\\n        token.lock(msg.sender, votes, proposals[proposalId].endBlock);\\n        _castVote(proposalId, votes, support);\\n    }\\n\\n    function proposeSingleAction(\\n        uint256 duration,\\n        address target,\\n        uint256 value,\\n        bytes memory cd,\\n        string memory description\\n    ) external onlyProposalGateway returns (uint256 proposalId) {\\n        address[] memory targets = new address[](1);\\n        targets[0] = target;\\n        uint256[] memory values = new uint256[](1);\\n        values[0] = value;\\n        bytes[] memory calldatas = new bytes[](1);\\n        calldatas[0] = cd;\\n        proposalId = _propose(\\n            duration,\\n            service.proposalQuorum(),\\n            service.proposalThreshold(),\\n            targets,\\n            values,\\n            calldatas,\\n            description\\n        );\\n    }\\n\\n    // RECEIVE\\n\\n    receive() external payable {\\n        // Supposed to be empty\\n    }\\n\\n    // PUBLIC VIEW FUNCTIONS\\n\\n    function owner()\\n        public\\n        view\\n        override(IPool, OwnableUpgradeable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    function _afterProposalCreated(uint256 proposalId) internal override {\\n        service.addProposal(proposalId);\\n    }\\n\\n    function _getTotalVotes() internal view override returns (uint256) {\\n        return token.totalSupply();\\n    }\\n\\n    // MODIFIER\\n\\n    modifier onlyService() {\\n        require(msg.sender == address(service), \\\"Not service\\\");\\n        _;\\n    }\\n\\n    modifier onlyServiceOwner() {\\n        require(msg.sender == service.owner(), \\\"Not service owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyProposalGateway() {\\n        require(\\n            msg.sender == service.proposalGateway(),\\n            \\\"Not proposal gateway\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x4e87e005cd15111a78f28fbdcc3616d353737e6d95b9cb8230285177d0a11167\",\"license\":\"MIT\"},\"contracts/components/Governor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nabstract contract Governor {\\n    struct Proposal {\\n        uint256 quorum;\\n        uint256 threshold;\\n        address[] targets;\\n        uint256[] values;\\n        bytes[] calldatas;\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 forVotes;\\n        uint256 againstVotes;\\n        bool executed;\\n    }\\n\\n    mapping(uint256 => Proposal) public proposals;\\n\\n    uint256 public lastProposalId;\\n\\n    enum ProposalState {\\n        None,\\n        Active,\\n        Failed,\\n        Successful,\\n        Executed\\n    }\\n\\n    // EVENTS\\n\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        uint256 quorum,\\n        address[] targets,\\n        uint256[] values,\\n        bytes[] calldatas,\\n        string description\\n    );\\n\\n    event VoteCast(\\n        address voter,\\n        uint256 proposalId,\\n        uint256 votes,\\n        bool support\\n    );\\n\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    // PUBLIC FUNCTIONS\\n\\n    function execute(uint256 proposalId) external {\\n        Proposal memory proposal = proposals[proposalId];\\n\\n        require(\\n            proposalState(proposalId) == ProposalState.Successful,\\n            \\\"Proposal is in wrong state\\\"\\n        );\\n\\n        proposals[proposalId].executed = true;\\n\\n        string memory errorMessage = \\\"Call reverted without message\\\";\\n        for (uint256 i = 0; i < proposal.targets.length; ++i) {\\n            (bool success, bytes memory returndata) = proposal.targets[i].call{\\n                value: proposal.values[i]\\n            }(proposal.calldatas[i]);\\n            AddressUpgradeable.verifyCallResult(\\n                success,\\n                returndata,\\n                errorMessage\\n            );\\n        }\\n\\n        emit ProposalExecuted(proposalId);\\n    }\\n\\n    // PUBLIC VIEW FUNCTIONS\\n\\n    function proposalState(uint256 proposalId)\\n        public\\n        view\\n        returns (ProposalState)\\n    {\\n        Proposal memory proposal = proposals[proposalId];\\n        if (proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n        if (proposal.startBlock == 0) {\\n            return ProposalState.None;\\n        }\\n        if (proposal.endBlock > block.number) {\\n            return ProposalState.Active;\\n        }\\n\\n        uint256 quorumVotes = (_getTotalVotes() * proposal.quorum) / 100;\\n        uint256 totalVotes = proposal.forVotes + proposal.againstVotes;\\n        if (\\n            totalVotes >= quorumVotes &&\\n            proposal.forVotes * 100 > totalVotes * proposal.threshold\\n        ) {\\n            return ProposalState.Successful;\\n        } else {\\n            return ProposalState.Failed;\\n        }\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    function _propose(\\n        uint256 duration,\\n        uint256 quorum,\\n        uint256 threshold,\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) internal returns (uint256 proposalId) {\\n        require(\\n            proposals[lastProposalId].endBlock <= block.number,\\n            \\\"Already has active proposal\\\"\\n        );\\n\\n        proposalId = ++lastProposalId;\\n        proposals[proposalId] = Proposal({\\n            quorum: quorum,\\n            threshold: threshold,\\n            targets: targets,\\n            values: values,\\n            calldatas: calldatas,\\n            startBlock: block.number,\\n            endBlock: block.number + duration,\\n            forVotes: 0,\\n            againstVotes: 0,\\n            executed: false\\n        });\\n        _afterProposalCreated(proposalId);\\n\\n        emit ProposalCreated(\\n            proposalId,\\n            quorum,\\n            targets,\\n            values,\\n            calldatas,\\n            description\\n        );\\n    }\\n\\n    function _castVote(\\n        uint256 proposalId,\\n        uint256 votes,\\n        bool support\\n    ) internal {\\n        require(\\n            proposals[proposalId].endBlock > block.number,\\n            \\\"Voting finished\\\"\\n        );\\n\\n        if (support) {\\n            proposals[proposalId].forVotes += votes;\\n        } else {\\n            proposals[proposalId].againstVotes += votes;\\n        }\\n\\n        emit VoteCast(msg.sender, proposalId, votes, support);\\n    }\\n\\n    function _afterProposalCreated(uint256 proposalId) internal virtual;\\n\\n    function _getTotalVotes() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x40e38ba6bbd3e8199aa3c17f83ed5cccd5ae47ecb1745297ae0fbee0164c9634\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IDirectory {\\n    enum ContractType {\\n        None,\\n        Pool,\\n        GovernanceToken,\\n        TGE\\n    }\\n\\n    function addContractRecord(address addr, ContractType contractType)\\n        external\\n        returns (uint256 index);\\n\\n    function addProposalRecord(address pool, uint256 proposalId)\\n        external\\n        returns (uint256 index);\\n\\n    function typeOf(address addr) external view returns (ContractType);\\n}\\n\",\"keccak256\":\"0x39fc90b444e9aefc4e2a3a40b43840dfa44ff13441a9e50d3de9bb95f044bd81\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./IService.sol\\\";\\n\\ninterface IGovernanceToken is IERC20Upgradeable {\\n    struct TokenInfo {\\n        string name;\\n        string symbol;\\n        uint256 cap;\\n    }\\n\\n    function initialize(address pool_, TokenInfo memory info) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function lock(\\n        address account,\\n        uint256 amount,\\n        uint256 deadline\\n    ) external;\\n\\n    function cap() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function service() external view returns (IService);\\n}\\n\",\"keccak256\":\"0x7ab5e082a0b9d346827f0737d19904b5ff18b9fdb91fe676675e92c8a60afffc\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IService.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./IGovernanceToken.sol\\\";\\n\\ninterface IPool {\\n    function initialize(address owner_) external;\\n\\n    function setToken(address token_) external;\\n\\n    function setTGE(address tge_) external;\\n\\n    function setCompanyDomain(string memory companyDomain_) external;\\n\\n    function proposeSingleAction(\\n        uint256 duration,\\n        address target,\\n        uint256 value,\\n        bytes memory cd,\\n        string memory description\\n    ) external returns (uint256 proposalId);\\n\\n    function owner() external view returns (address);\\n\\n    function service() external view returns (IService);\\n\\n    function token() external view returns (IGovernanceToken);\\n\\n    function tge() external view returns (ITGE);\\n}\\n\",\"keccak256\":\"0x657183a4cee768cba3f5d808b65c1e75e7bd7accaac88dc622b6953ba5949f41\",\"license\":\"MIT\"},\"contracts/interfaces/IService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\nimport \\\"./IDirectory.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\n\\ninterface IService {\\n    function createSecondaryTGE(ITGE.TGEInfo memory tgeInfo) external;\\n\\n    function addProposal(uint256 proposalId) external;\\n\\n    function directory() external view returns (IDirectory);\\n\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n\\n    function tokenWhitelist() external view returns (address[] memory);\\n\\n    function owner() external view returns (address);\\n\\n    function proposalGateway() external view returns (address);\\n\\n    function proposalQuorum() external view returns (uint256);\\n\\n    function proposalThreshold() external view returns (uint256);\\n\\n    function uniswapRouter() external view returns (ISwapRouter);\\n\\n    function uniswapQuoter() external view returns (IQuoter);\\n\\n    function tokenSwapPath(address) external view returns (bytes memory);\\n\\n    function tokenSwapReversePath(address) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf1d37d18235df54aff8811fc947c319d175c11832e228ba4e8345c42307b53b8\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface ITGE {\\n    struct TGEInfo {\\n        string metadataURI;\\n        uint256 price;\\n        uint256 hardcap;\\n        uint256 softcap;\\n        uint256 minPurchase;\\n        uint256 maxPurchase;\\n        uint256 lockupPercent;\\n        uint256 lockupDuration;\\n        uint256 lockupTVL;\\n        uint256 duration;\\n        address[] userWhitelist;\\n        address[] tokenWhitelist;\\n    }\\n\\n    function initialize(\\n        address owner_,\\n        address token_,\\n        TGEInfo memory info\\n    ) external;\\n\\n    function claimBack() external;\\n\\n    function maxPurchaseOf(address account) external view returns (uint256);\\n\\n    enum State {\\n        Active,\\n        Failed,\\n        Successful\\n    }\\n\\n    function state() external view returns (State);\\n}\\n\",\"keccak256\":\"0x71ac22c914d4ea0e7482ca7bb0999ccc65ecdcf242dfc46ba3ce80d723414730\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506121ad806100206000396000f3fe6080604052600436106101185760003560e01c80638da5cb5b116100a0578063d598d4c911610064578063d598d4c914610367578063f2fde38b14610387578063f9000ba8146103a7578063fc0c546a146103c7578063fe0d94c1146103e757600080fd5b80638da5cb5b146102ad57806392aa43c0146102da578063a7497fa5146102fa578063c4d66de81461031a578063d26331d41461033a57600080fd5b80633765edcf116100e75780633765edcf1461021f578063715018a61461024d57806374cb3041146102625780637bc3a733146102785780638c439f6a1461028d57600080fd5b8063013cf08b14610124578063144fa6d7146101bb5780632ab1a726146101dd5780632caffd60146101fd57600080fd5b3661011f57005b600080fd5b34801561013057600080fd5b5061017f61013f366004611c21565b6065602052600090815260409020805460018201546005830154600684015460078501546008860154600990960154949593949293919290919060ff1687565b604080519788526020880196909652948601939093526060850191909152608084015260a0830152151560c082015260e0015b60405180910390f35b3480156101c757600080fd5b506101db6101d6366004611c4f565b610407565b005b3480156101e957600080fd5b506101db6101f8366004611d18565b610476565b34801561020957600080fd5b5061021261061c565b6040516101b29190611db1565b34801561022b57600080fd5b5061023f61023a366004611dc4565b6106aa565b6040519081526020016101b2565b34801561025957600080fd5b506101db610956565b34801561026e57600080fd5b5061023f60665481565b34801561028457600080fd5b506102126109c1565b34801561029957600080fd5b506101db6102a8366004611d18565b6109ce565b3480156102b957600080fd5b506102c2610b3a565b6040516001600160a01b0390911681526020016101b2565b3480156102e657600080fd5b506101db6102f5366004611c4f565b610b53565b34801561030657600080fd5b506069546102c2906001600160a01b031681565b34801561032657600080fd5b506101db610335366004611c4f565b610bbd565b34801561034657600080fd5b5061035a610355366004611c21565b610c45565b6040516101b29190611e7b565b34801561037357600080fd5b506067546102c2906001600160a01b031681565b34801561039357600080fd5b506101db6103a2366004611c4f565b610efe565b3480156103b357600080fd5b506101db6103c2366004611ea3565b610fce565b3480156103d357600080fd5b506068546102c2906001600160a01b031681565b3480156103f357600080fd5b506101db610402366004611c21565b6111cf565b6067546001600160a01b031633146104545760405162461bcd60e51b815260206004820152600b60248201526a4e6f74207365727669636560a81b60448201526064015b60405180910390fd5b606880546001600160a01b0319166001600160a01b0392909216919091179055565b606b805461048390611ee1565b905060000361056857606760009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105039190611f1b565b6001600160a01b0316336001600160a01b0316146105635760405162461bcd60e51b815260206004820152601e60248201527f496e697469616c207365747465722073686f756c642062652061646d696e0000604482015260640161044b565b6105c1565b3330146105c15760405162461bcd60e51b815260206004820152602160248201527f4368616e6765722073686f756c6420626520706f6f6c20676f7665726e616e636044820152606560f81b606482015260840161044b565b80516000036106055760405162461bcd60e51b815260206004820152601060248201526f43616e206e6f7420626520656d70747960801b604482015260640161044b565b805161061890606b906020840190611a49565b5050565b606b805461062990611ee1565b80601f016020809104026020016040519081016040528092919081815260200182805461065590611ee1565b80156106a25780601f10610677576101008083540402835291602001916106a2565b820191906000526020600020905b81548152906001019060200180831161068557829003601f168201915b505050505081565b606754604080516304e31dfb60e01b815290516000926001600160a01b0316916304e31dfb9160048083019260209291908290030181865afa1580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107189190611f1b565b6001600160a01b0316336001600160a01b03161461076f5760405162461bcd60e51b81526020600482015260146024820152734e6f742070726f706f73616c206761746577617960601b604482015260640161044b565b6040805160018082528183019092526000916020808301908036833701905050905085816000815181106107a5576107a5611f38565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905085816000815181106107f6576107f6611f38565b6020908102919091010152604080516001808252818301909252600091816020015b6060815260200190600190039081610818579050509050858160008151811061084357610843611f38565b602002602001018190525061094989606760009054906101000a90046001600160a01b03166001600160a01b0316639a0b6f9b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c99190611f4e565b606760009054906101000a90046001600160a01b03166001600160a01b031663b58131b06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561091c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109409190611f4e565b8686868b61159c565b9998505050505050505050565b3361095f610b3a565b6001600160a01b0316146109b55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044b565b6109bf600061176f565b565b606a805461062990611ee1565b606760009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a459190611f1b565b6001600160a01b0316336001600160a01b031614610a995760405162461bcd60e51b81526020600482015260116024820152702737ba1039b2b93b34b1b29037bbb732b960791b604482015260640161044b565b606a8054610aa690611ee1565b159050610ae35760405162461bcd60e51b815260206004820152600b60248201526a105b1c9958591e481cd95d60aa1b604482015260640161044b565b8051600003610b275760405162461bcd60e51b815260206004820152601060248201526f43616e206e6f7420626520656d70747960801b604482015260640161044b565b805161061890606a906020840190611a49565b6000610b4e6033546001600160a01b031690565b905090565b6067546001600160a01b03163314610b9b5760405162461bcd60e51b815260206004820152600b60248201526a4e6f74207365727669636560a81b604482015260640161044b565b606980546001600160a01b0319166001600160a01b0392909216919091179055565b6000610bc960016117c1565b90508015610be1576000805461ff0019166101001790555b606780546001600160a01b03191633179055610bfc8261176f565b8015610618576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60008181526065602090815260408083208151610140810183528154815260018201548185015260028201805484518187028101870186528181528796939586019390929190830182828015610cc457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ca6575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610d1c57602002820191906000526020600020905b815481526020019060010190808311610d08575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015610df6578382906000526020600020018054610d6990611ee1565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9590611ee1565b8015610de25780601f10610db757610100808354040283529160200191610de2565b820191906000526020600020905b815481529060010190602001808311610dc557829003601f168201915b505050505081526020019060010190610d4a565b505050908252506005820154602082015260068201546040820152600782015460608201526008820154608082015260099091015460ff16151560a09091015261012081015190915015610e4d5750600492915050565b8060a00151600003610e625750600092915050565b438160c001511115610e775750600192915050565b600060648260000151610e88611849565b610e929190611f7d565b610e9c9190611f9c565b905060008261010001518360e00151610eb59190611fbe565b9050818110158015610ee357506020830151610ed19082611f7d565b60e0840151610ee1906064611f7d565b115b15610ef357506003949350505050565b506002949350505050565b33610f07610b3a565b6001600160a01b031614610f5d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044b565b6001600160a01b038116610fc25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161044b565b610fcb8161176f565b50565b600019820361104a57606854604051631092ab9160e31b81523360048201526001600160a01b03909116906384955c8890602401602060405180830381865afa15801561101f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110439190611f4e565b9150611105565b606854604051631092ab9160e31b81523360048201526001600160a01b03909116906384955c8890602401602060405180830381865afa158015611092573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b69190611f4e565b8211156111055760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f75676820756e6c6f636b65642062616c616e63650000000000604482015260640161044b565b600082116111405760405162461bcd60e51b81526020600482015260086024820152674e6f20766f74657360c01b604482015260640161044b565b6068546000848152606560205260409081902060060154905163e2ab691d60e01b81523360048201526024810185905260448101919091526001600160a01b039091169063e2ab691d90606401600060405180830381600087803b1580156111a757600080fd5b505af11580156111bb573d6000803e3d6000fd5b505050506111ca8383836118b7565b505050565b60008181526065602090815260408083208151610140810183528154815260018201548185015260028201805484518187028101870186528181529295939486019383018282801561124a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161122c575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156112a257602002820191906000526020600020905b81548152602001906001019080831161128e575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b8282101561137c5783829060005260206000200180546112ef90611ee1565b80601f016020809104026020016040519081016040528092919081815260200182805461131b90611ee1565b80156113685780601f1061133d57610100808354040283529160200191611368565b820191906000526020600020905b81548152906001019060200180831161134b57829003601f168201915b5050505050815260200190600101906112d0565b505050908252506005820154602082015260068201546040820152600782015460608201526008820154608082015260099091015460ff16151560a090910152905060036113c983610c45565b60048111156113da576113da611e65565b146114275760405162461bcd60e51b815260206004820152601a60248201527f50726f706f73616c20697320696e2077726f6e67207374617465000000000000604482015260640161044b565b6000828152606560209081526040808320600901805460ff191660011790558051808201909152601d81527f43616c6c20726576657274656420776974686f7574206d65737361676500000091810191909152905b82604001515181101561156257600080846040015183815181106114a2576114a2611f38565b60200260200101516001600160a01b0316856060015184815181106114c9576114c9611f38565b6020026020010151866080015185815181106114e7576114e7611f38565b60200260200101516040516114fc9190611fd6565b60006040518083038185875af1925050503d8060008114611539576040519150601f19603f3d011682016040523d82523d6000602084013e61153e565b606091505b509150915061154e8282866119a8565b5050508061155b90611ff2565b905061147c565b506040518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f906020015b60405180910390a1505050565b6066546000908152606560205260408120600601544310156116005760405162461bcd60e51b815260206004820152601b60248201527f416c726561647920686173206163746976652070726f706f73616c0000000000604482015260640161044b565b60666000815461160f90611ff2565b919050819055905060405180610140016040528088815260200187815260200186815260200185815260200184815260200143815260200189436116539190611fbe565b8152600060208083018290526040808401839052606090930182905284825260658152908290208351815583820151600182015591830151805161169d9260028501920190611acd565b50606082015180516116b9916003840191602090910190611b22565b50608082015180516116d5916004840191602090910190611b5c565b5060a0820151600582015560c0820151600682015560e082015160078201556101008201516008820155610120909101516009909101805460ff1916911515919091179055611723816119e8565b7fbd5cfa3a6d750f3995a6e4c6f70b1d01187c16a6fcfcd3bbe400ecf361b756ba81888787878760405161175c9695949392919061209b565b60405180910390a1979650505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615611808578160ff1660011480156117e45750303b155b6118005760405162461bcd60e51b815260040161044b90612129565b506000919050565b60005460ff80841691161061182f5760405162461bcd60e51b815260040161044b90612129565b506000805460ff191660ff92909216919091179055600190565b606854604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015611893573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4e9190611f4e565b60008381526065602052604090206006015443106119095760405162461bcd60e51b815260206004820152600f60248201526e159bdd1a5b99c8199a5b9a5cda1959608a1b604482015260640161044b565b801561193b5760008381526065602052604081206007018054849290611930908490611fbe565b909155506119629050565b6000838152606560205260408120600801805484929061195c908490611fbe565b90915550505b604080513381526020810185905290810183905281151560608201527f2c48deccc79dbba942eeb2f991c4bfa0ac136723ddc0ea1b575dd85373408df89060800161158f565b606083156119b75750816119e1565b8251156119c75782518084602001fd5b8160405162461bcd60e51b815260040161044b9190611db1565b9392505050565b606754604051630ffb246960e21b8152600481018390526001600160a01b0390911690633fec91a490602401600060405180830381600087803b158015611a2e57600080fd5b505af1158015611a42573d6000803e3d6000fd5b5050505050565b828054611a5590611ee1565b90600052602060002090601f016020900481019282611a775760008555611abd565b82601f10611a9057805160ff1916838001178555611abd565b82800160010185558215611abd579182015b82811115611abd578251825591602001919060010190611aa2565b50611ac9929150611bb5565b5090565b828054828255906000526020600020908101928215611abd579160200282015b82811115611abd57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611aed565b828054828255906000526020600020908101928215611abd5791602002820182811115611abd578251825591602001919060010190611aa2565b828054828255906000526020600020908101928215611ba9579160200282015b82811115611ba95782518051611b99918491602090910190611a49565b5091602001919060010190611b7c565b50611ac9929150611bca565b5b80821115611ac95760008155600101611bb6565b80821115611ac9576000611bde8282611be7565b50600101611bca565b508054611bf390611ee1565b6000825580601f10611c03575050565b601f016020900490600052602060002090810190610fcb9190611bb5565b600060208284031215611c3357600080fd5b5035919050565b6001600160a01b0381168114610fcb57600080fd5b600060208284031215611c6157600080fd5b81356119e181611c3a565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611c9d57611c9d611c6c565b604051601f8501601f19908116603f01168101908282118183101715611cc557611cc5611c6c565b81604052809350858152868686011115611cde57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611d0957600080fd5b6119e183833560208501611c82565b600060208284031215611d2a57600080fd5b813567ffffffffffffffff811115611d4157600080fd5b611d4d84828501611cf8565b949350505050565b60005b83811015611d70578181015183820152602001611d58565b83811115611d7f576000848401525b50505050565b60008151808452611d9d816020860160208601611d55565b601f01601f19169290920160200192915050565b6020815260006119e16020830184611d85565b600080600080600060a08688031215611ddc57600080fd5b853594506020860135611dee81611c3a565b935060408601359250606086013567ffffffffffffffff80821115611e1257600080fd5b818801915088601f830112611e2657600080fd5b611e3589833560208501611c82565b93506080880135915080821115611e4b57600080fd5b50611e5888828901611cf8565b9150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b6020810160058310611e9d57634e487b7160e01b600052602160045260246000fd5b91905290565b600080600060608486031215611eb857600080fd5b833592506020840135915060408401358015158114611ed657600080fd5b809150509250925092565b600181811c90821680611ef557607f821691505b602082108103611f1557634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611f2d57600080fd5b81516119e181611c3a565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611f6057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611f9757611f97611f67565b500290565b600082611fb957634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611fd157611fd1611f67565b500190565b60008251611fe8818460208701611d55565b9190910192915050565b60006001820161200457612004611f67565b5060010190565b600081518084526020808501945080840160005b8381101561203b5781518752958201959082019060010161201f565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561208e57828403895261207c848351611d85565b98850198935090840190600101612064565b5091979650505050505050565b600060c082018883526020888185015260c0604085015281885180845260e086019150828a01935060005b818110156120eb5784516001600160a01b0316835293830193918301916001016120c6565b505084810360608601526120ff818961200b565b9250505082810360808401526121158186612046565b905082810360a08401526109498185611d85565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea2646970667358221220b34578b813886ecda774f34b18c6343595f9909723c308a9a27da5ecdd874c1864736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 208,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 211,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2536,
        "contract": "contracts/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9394,
        "contract": "contracts/Pool.sol:Pool",
        "label": "proposals",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_struct(Proposal)9389_storage)"
      },
      {
        "astId": 9396,
        "contract": "contracts/Pool.sol:Pool",
        "label": "lastProposalId",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 7174,
        "contract": "contracts/Pool.sol:Pool",
        "label": "service",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IService)9977"
      },
      {
        "astId": 7177,
        "contract": "contracts/Pool.sol:Pool",
        "label": "token",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IGovernanceToken)9830"
      },
      {
        "astId": 7180,
        "contract": "contracts/Pool.sol:Pool",
        "label": "tge",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(ITGE)10037"
      },
      {
        "astId": 7182,
        "contract": "contracts/Pool.sol:Pool",
        "label": "companyId",
        "offset": 0,
        "slot": "106",
        "type": "t_string_storage"
      },
      {
        "astId": 7184,
        "contract": "contracts/Pool.sol:Pool",
        "label": "companyDomain",
        "offset": 0,
        "slot": "107",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IGovernanceToken)9830": {
        "encoding": "inplace",
        "label": "contract IGovernanceToken",
        "numberOfBytes": "20"
      },
      "t_contract(IService)9977": {
        "encoding": "inplace",
        "label": "contract IService",
        "numberOfBytes": "20"
      },
      "t_contract(ITGE)10037": {
        "encoding": "inplace",
        "label": "contract ITGE",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Proposal)9389_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Governor.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)9389_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)9389_storage": {
        "encoding": "inplace",
        "label": "struct Governor.Proposal",
        "members": [
          {
            "astId": 9367,
            "contract": "contracts/Pool.sol:Pool",
            "label": "quorum",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9369,
            "contract": "contracts/Pool.sol:Pool",
            "label": "threshold",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9372,
            "contract": "contracts/Pool.sol:Pool",
            "label": "targets",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9375,
            "contract": "contracts/Pool.sol:Pool",
            "label": "values",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9378,
            "contract": "contracts/Pool.sol:Pool",
            "label": "calldatas",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_bytes_storage)dyn_storage"
          },
          {
            "astId": 9380,
            "contract": "contracts/Pool.sol:Pool",
            "label": "startBlock",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9382,
            "contract": "contracts/Pool.sol:Pool",
            "label": "endBlock",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9384,
            "contract": "contracts/Pool.sol:Pool",
            "label": "forVotes",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 9386,
            "contract": "contracts/Pool.sol:Pool",
            "label": "againstVotes",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 9388,
            "contract": "contracts/Pool.sol:Pool",
            "label": "executed",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}