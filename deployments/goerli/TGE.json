{
  "address": "0xa13373fd51B44C5174CAb8C829012d78717c47AE",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hardcap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupTVL",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "whitelist",
              "type": "address[]"
            }
          ],
          "internalType": "struct ITGE.TGEInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockupDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockupPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockupTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "maxPurchaseOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPurchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "purchaseOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setLockupTVLReached",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "softcap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum ITGE.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IGovernanceToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPurchases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a5a0198713f86d2cbc435e45bc1131dade3ca8bd64a91a62604bf4b0f2d5a0d",
  "receipt": {
    "to": null,
    "from": "0x90A4a90e6FAf88c4d709F666D26793F9e2B47183",
    "contractAddress": "0xa13373fd51B44C5174CAb8C829012d78717c47AE",
    "transactionIndex": 6,
    "gasUsed": "1536703",
    "logsBloom": "0x
    "blockHash": "0x6a4b78cb72b47794f58cc4c2b317db84c5b3712de8da09e7b73b0eaec66937cf",
    "transactionHash": "0x1a5a0198713f86d2cbc435e45bc1131dade3ca8bd64a91a62604bf4b0f2d5a0d",
    "logs": [],
    "blockNumber": 7123829,
    "cumulativeGasUsed": "2663066",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "39f96f7bb5a095faa550612a86705d4a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"internalType\":\"struct ITGE.TGEInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"maxPurchaseOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchaseOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLockupTVLReached\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum ITGE.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IGovernanceToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPurchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TGE.sol\":\"TGE\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xd0a917e32d1251a9b2f1dea15e932815d5382e64e6b0a18104664a6cc774cd70\",\"license\":\"MIT\"},\"contracts/TGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"./interfaces/IGovernanceToken.sol\\\";\\nimport \\\"./interfaces/ITGE.sol\\\";\\n\\ncontract TGE is ITGE, OwnableUpgradeable {\\n    IGovernanceToken public token;\\n\\n    string public metadataURI;\\n\\n    uint256 public price;\\n\\n    uint256 public hardcap;\\n\\n    uint256 public softcap;\\n\\n    uint256 public minPurchase;\\n\\n    uint256 public maxPurchase;\\n\\n    uint256 public lockupPercent;\\n\\n    uint256 public lockupTVL;\\n\\n    uint256 public lockupDuration;\\n\\n    uint256 public duration;\\n\\n    address[] public whitelist;\\n\\n    mapping(address => bool) public isWhitelisted;\\n\\n    uint256 public createdAt;\\n\\n    uint256 public totalPurchases;\\n\\n    mapping(address => uint256) public purchaseOf;\\n\\n    bool lockupTVLReached;\\n\\n    mapping(address => uint256) public lockedBalanceOf;\\n\\n    // CONSTRUCTOR\\n\\n    function initialize(\\n        address owner_,\\n        address token_,\\n        TGEInfo memory info\\n    ) external override initializer {\\n        uint256 remainingSupply = IGovernanceToken(token_).cap() -\\n            IGovernanceToken(token_).totalSupply();\\n        require(\\n            info.hardcap <= remainingSupply,\\n            \\\"Hardcap higher than remaining supply\\\"\\n        );\\n\\n        _transferOwnership(owner_);\\n\\n        token = IGovernanceToken(token_);\\n        metadataURI = info.metadataURI;\\n        price = info.price;\\n        hardcap = info.hardcap;\\n        softcap = info.softcap;\\n        minPurchase = info.minPurchase;\\n        maxPurchase = info.maxPurchase;\\n        lockupPercent = info.lockupPercent;\\n        lockupTVL = info.lockupTVL;\\n        lockupTVLReached = (lockupTVL == 0);\\n        lockupDuration = info.lockupDuration;\\n        duration = info.duration;\\n\\n        for (uint256 i = 0; i < info.whitelist.length; i++) {\\n            whitelist.push(info.whitelist[i]);\\n            isWhitelisted[info.whitelist[i]] = true;\\n        }\\n\\n        createdAt = block.number;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    function purchase(uint256 amount)\\n        external\\n        payable\\n        override\\n        onlyWhitelisted\\n        onlyState(State.Active)\\n    {\\n        require(isWhitelisted[msg.sender], \\\"Not whitelisted\\\");\\n        require(amount >= minPurchase, \\\"Amount less than min purchase\\\");\\n        require(msg.value == amount * price, \\\"Invalid ETH value passed\\\");\\n        require(amount <= maxPurchaseOf(msg.sender), \\\"Overflows max purchase\\\");\\n        require(totalPurchases + amount <= hardcap, \\\"Overflows hardcap\\\");\\n\\n        totalPurchases += amount;\\n        purchaseOf[msg.sender] += amount;\\n        uint256 lockedAmount = (amount * lockupPercent + 99) / 100;\\n        if (amount - lockedAmount > 0) {\\n            token.mint(msg.sender, amount - lockedAmount);\\n        }\\n        token.mint(address(this), lockedAmount);\\n        lockedBalanceOf[msg.sender] += lockedAmount;\\n    }\\n\\n    function claimBack() external override onlyState(State.Failed) {\\n        // User can't claim more than he bought in this event (in case somebody else has transferred him tokens)\\n        uint256 balance = token.balanceOf(msg.sender);\\n        uint256 refundTokens = MathUpgradeable.min(\\n            balance + lockedBalanceOf[msg.sender],\\n            purchaseOf[msg.sender]\\n        );\\n        purchaseOf[msg.sender] -= refundTokens;\\n        if (refundTokens > balance) {\\n            lockedBalanceOf[msg.sender] -= (refundTokens - balance);\\n            token.burn(address(this), refundTokens - balance);\\n            refundTokens = balance;\\n        }\\n        token.burn(msg.sender, refundTokens);\\n        uint256 refundValue = refundTokens * price;\\n        payable(msg.sender).transfer(refundValue);\\n    }\\n\\n    function unlock() external onlyState(State.Successful) {\\n        require(unlockAvailable(), \\\"Unlock not yet available\\\");\\n        require(lockedBalanceOf[msg.sender] > 0, \\\"No locked balance\\\");\\n\\n        uint256 balance = lockedBalanceOf[msg.sender];\\n        lockedBalanceOf[msg.sender] = 0;\\n        token.transfer(msg.sender, balance);\\n    }\\n\\n    function setLockupTVLReached() external {\\n        require(getTVL() >= lockupTVL, \\\"Lockup TVL not yet reached\\\");\\n        lockupTVLReached = true;\\n    }\\n\\n    // RESTRICTED FUNCTIONS\\n\\n    function transferFunds() external override onlyState(State.Successful) {\\n        (bool success, ) = token.pool().call{\\n            value: payable(address(this)).balance\\n        }(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    function maxPurchaseOf(address account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return maxPurchase - purchaseOf[account];\\n    }\\n\\n    function state() public view override returns (State) {\\n        if (block.number < createdAt + duration) {\\n            return State.Active;\\n        } else if (totalPurchases >= softcap) {\\n            return State.Successful;\\n        } else {\\n            return State.Failed;\\n        }\\n    }\\n\\n    function unlockAvailable() public view returns (bool) {\\n        return lockupTVLReached && block.number >= createdAt + lockupDuration;\\n    }\\n\\n    function getTVL() public view returns (uint256) {\\n        return totalPurchases * price;\\n    }\\n\\n    // MODIFIER\\n\\n    modifier onlyState(State state_) {\\n        require(state() == state_, \\\"TGE in wrong state\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhitelisted() {\\n        require(isWhitelisted[msg.sender], \\\"Not whitelisted\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x141e515e297cf42ea6e1aa9b3364603c044c2c1f188938ab82441e6798ba2857\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IGovernanceToken is IERC20Upgradeable {\\n    struct TokenInfo {\\n        string name;\\n        string symbol;\\n        uint256 cap;\\n    }\\n\\n    function initialize(address pool_, TokenInfo memory info) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function lock(\\n        address account,\\n        uint256 amount,\\n        uint256 deadline\\n    ) external;\\n\\n    function cap() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8f56a5e6fd46a1c2435ba839bf724567235d9192555ae238b2042f543f688eb3\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface ITGE {\\n    struct TGEInfo {\\n        string metadataURI;\\n        uint256 price;\\n        uint256 hardcap;\\n        uint256 softcap;\\n        uint256 minPurchase;\\n        uint256 maxPurchase;\\n        uint256 lockupPercent;\\n        uint256 lockupDuration;\\n        uint256 lockupTVL;\\n        uint256 duration;\\n        address[] whitelist;\\n    }\\n\\n    function initialize(\\n        address owner_,\\n        address token_,\\n        TGEInfo memory info\\n    ) external;\\n\\n    function purchase(uint256 amount) external payable;\\n\\n    function claimBack() external;\\n\\n    function transferFunds() external;\\n\\n    function maxPurchaseOf(address account) external view returns (uint256);\\n\\n    enum State {\\n        Active,\\n        Failed,\\n        Successful\\n    }\\n\\n    function state() external view returns (State);\\n}\\n\",\"keccak256\":\"0x723a068fe6bdc89d8ca284d2cd917beae41de9f3ddf04f0b6a56aea5a82d2949\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611ad8806100206000396000f3fe6080604052600436106101cd5760003560e01c80638da5cb5b116100f7578063bf7fec0811610095578063efef39a111610064578063efef39a1146104ca578063f2fde38b146104dd578063f89be593146104fd578063fc0c546a1461051357600080fd5b8063bf7fec081461044f578063c19d93fb1461047c578063cf09e0d01461049e578063e15c38bd146104b457600080fd5b80639b8c3e21116100d15780639b8c3e21146103f9578063a035b1fe1461040e578063a69df4b514610424578063b071cbe61461043957600080fd5b80638da5cb5b146103b0578063977b055b146103ce57806397b3fcaa146103e457600080fd5b80633af32abf1161016f578063593557361161013e57806359355736146103205780635962a9411461034d578063715018a6146103635780637ebd1b301461037857600080fd5b80633af32abf1461029b5780633c68eb81146102cb57806342ee5d84146102e057806349297b331461030057600080fd5b80630fb5a6b4116101ab5780630fb5a6b4146102425780631ada70a814610258578063205decf41461026e57806333b5b62e1461028557600080fd5b8063028dcc4d146101d257806303ee438c146101fc5780630409f6f81461021e575b600080fd5b3480156101de57600080fd5b506101e7610533565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b5061021161055c565b6040516101f39190611580565b34801561022a57600080fd5b50610234606d5481565b6040519081526020016101f3565b34801561024e57600080fd5b50610234606f5481565b34801561026457600080fd5b50610234606e5481565b34801561027a57600080fd5b506102836105ea565b005b34801561029157600080fd5b50610234606a5481565b3480156102a757600080fd5b506101e76102b63660046115ea565b60716020526000908152604090205460ff1681565b3480156102d757600080fd5b50610283610657565b3480156102ec57600080fd5b506102346102fb3660046115ea565b61079e565b34801561030c57600080fd5b5061028361031b366004611771565b6107ca565b34801561032c57600080fd5b5061023461033b3660046115ea565b60766020526000908152604090205481565b34801561035957600080fd5b5061023460735481565b34801561036f57600080fd5b50610283610ad2565b34801561038457600080fd5b5061039861039336600461188a565b610b38565b6040516001600160a01b0390911681526020016101f3565b3480156103bc57600080fd5b506033546001600160a01b0316610398565b3480156103da57600080fd5b50610234606b5481565b3480156103f057600080fd5b50610234610b62565b34801561040557600080fd5b50610283610b74565b34801561041a57600080fd5b5061023460675481565b34801561043057600080fd5b50610283610dd9565b34801561044557600080fd5b5061023460685481565b34801561045b57600080fd5b5061023461046a3660046115ea565b60746020526000908152604090205481565b34801561048857600080fd5b50610491610f48565b6040516101f391906118b9565b3480156104aa57600080fd5b5061023460725481565b3480156104c057600080fd5b50610234606c5481565b6102836104d836600461188a565b610f7e565b3480156104e957600080fd5b506102836104f83660046115ea565b61132a565b34801561050957600080fd5b5061023460695481565b34801561051f57600080fd5b50606554610398906001600160a01b031681565b60755460009060ff1680156105575750606e5460725461055391906118f7565b4310155b905090565b606680546105699061190f565b80601f01602080910402602001604051908101604052809291908181526020018280546105959061190f565b80156105e25780601f106105b7576101008083540402835291602001916105e2565b820191906000526020600020905b8154815290600101906020018083116105c557829003601f168201915b505050505081565b606d546105f5610b62565b10156106485760405162461bcd60e51b815260206004820152601a60248201527f4c6f636b75702054564c206e6f7420796574207265616368656400000000000060448201526064015b60405180910390fd5b6075805460ff19166001179055565b600280610662610f48565b6002811115610673576106736118a3565b146106905760405162461bcd60e51b815260040161063f90611949565b606554604080516316f0115b60e01b815290516000926001600160a01b0316916316f0115b9160048083019260209291908290030181865afa1580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe9190611975565b6001600160a01b0316306001600160a01b03163160405160006040518083038185875af1925050503d8060008114610752576040519150601f19603f3d011682016040523d82523d6000602084013e610757565b606091505b505090508061079a5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161063f565b5050565b6001600160a01b038116600090815260746020526040812054606b546107c49190611992565b92915050565b60006107d660016113f5565b905080156107ee576000805461ff0019166101001790555b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561082e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085291906119a9565b846001600160a01b031663355274ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b491906119a9565b6108be9190611992565b905080836040015111156109205760405162461bcd60e51b8152602060048201526024808201527f4861726463617020686967686572207468616e2072656d61696e696e6720737560448201526370706c7960e01b606482015260840161063f565b6109298561147d565b606580546001600160a01b0319166001600160a01b0386161790558251805161095a916066916020909101906114e7565b506020830151606755604083015160685560608301516069556080830151606a5560a0830151606b5560c0830151606c55610100830151606d8190556075805460ff1916911591909117905560e0830151606e55610120830151606f5560005b83610140015151811015610a8057607084610140015182815181106109e1576109e16119c2565b60209081029190910181015182546001808201855560009485529284200180546001600160a01b0319166001600160a01b039092169190911790556101408601518051919260719290919085908110610a3c57610a3c6119c2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610a78816119d8565b9150506109ba565b5050436072558015610acc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6033546001600160a01b03163314610b2c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161063f565b610b36600061147d565b565b60708181548110610b4857600080fd5b6000918252602090912001546001600160a01b0316905081565b600060675460735461055791906119f1565b600180610b7f610f48565b6002811115610b9057610b906118a3565b14610bad5760405162461bcd60e51b815260040161063f90611949565b6065546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1a91906119a9565b3360009081526076602052604081205491925090610c5190610c3c90846118f7565b336000908152607460205260409020546114cf565b33600090815260746020526040812080549293508392909190610c75908490611992565b909155505081811115610d2e57610c8c8282611992565b3360009081526076602052604081208054909190610cab908490611992565b90915550506065546001600160a01b0316639dc29fac30610ccc8585611992565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610d1257600080fd5b505af1158015610d26573d6000803e3d6000fd5b505050508190505b606554604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015610d7a57600080fd5b505af1158015610d8e573d6000803e3d6000fd5b50505050600060675482610da291906119f1565b604051909150339082156108fc029083906000818181858888f19350505050158015610dd2573d6000803e3d6000fd5b5050505050565b600280610de4610f48565b6002811115610df557610df56118a3565b14610e125760405162461bcd60e51b815260040161063f90611949565b610e1a610533565b610e665760405162461bcd60e51b815260206004820152601860248201527f556e6c6f636b206e6f742079657420617661696c61626c650000000000000000604482015260640161063f565b33600090815260766020526040902054610eb65760405162461bcd60e51b81526020600482015260116024820152704e6f206c6f636b65642062616c616e636560781b604482015260640161063f565b336000818152607660205260408082208054929055606554905163a9059cbb60e01b815260048101939093526024830182905290916001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f439190611a10565b505050565b6000606f54607254610f5a91906118f7565b431015610f675750600090565b60695460735410610f785750600290565b50600190565b3360009081526071602052604090205460ff16610fcf5760405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b604482015260640161063f565b600080610fda610f48565b6002811115610feb57610feb6118a3565b146110085760405162461bcd60e51b815260040161063f90611949565b3360009081526071602052604090205460ff166110595760405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b604482015260640161063f565b606a548210156110ab5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206c657373207468616e206d696e207075726368617365000000604482015260640161063f565b6067546110b890836119f1565b34146111065760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964204554482076616c7565207061737365640000000000000000604482015260640161063f565b61110f3361079e565b8211156111575760405162461bcd60e51b81526020600482015260166024820152754f766572666c6f7773206d617820707572636861736560501b604482015260640161063f565b6068548260735461116891906118f7565b11156111aa5760405162461bcd60e51b815260206004820152601160248201527004f766572666c6f7773206861726463617607c1b604482015260640161063f565b81607360008282546111bc91906118f7565b909155505033600090815260746020526040812080548492906111e09084906118f7565b9091555050606c546000906064906111f890856119f1565b6112039060636118f7565b61120d9190611a32565b9050600061121b8285611992565b111561129c576065546001600160a01b03166340c10f193361123d8487611992565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561128357600080fd5b505af1158015611297573d6000803e3d6000fd5b505050505b6065546040516340c10f1960e01b8152306004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156112e857600080fd5b505af11580156112fc573d6000803e3d6000fd5b505033600090815260766020526040812080548594509092506113209084906118f7565b9091555050505050565b6033546001600160a01b031633146113845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161063f565b6001600160a01b0381166113e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161063f565b6113f28161147d565b50565b60008054610100900460ff161561143c578160ff1660011480156114185750303b155b6114345760405162461bcd60e51b815260040161063f90611a54565b506000919050565b60005460ff8084169116106114635760405162461bcd60e51b815260040161063f90611a54565b506000805460ff191660ff92909216919091179055600190565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008183106114de57816114e0565b825b9392505050565b8280546114f39061190f565b90600052602060002090601f016020900481019282611515576000855561155b565b82601f1061152e57805160ff191683800117855561155b565b8280016001018555821561155b579182015b8281111561155b578251825591602001919060010190611540565b5061156792915061156b565b5090565b5b80821115611567576000815560010161156c565b600060208083528351808285015260005b818110156115ad57858101830151858201604001528201611591565b818111156115bf576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146113f257600080fd5b6000602082840312156115fc57600080fd5b81356114e0816115d5565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff8111828210171561164157611641611607565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561167057611670611607565b604052919050565b600082601f83011261168957600080fd5b813567ffffffffffffffff8111156116a3576116a3611607565b6116b6601f8201601f1916602001611647565b8181528460208386010111156116cb57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126116f957600080fd5b8135602067ffffffffffffffff82111561171557611715611607565b8160051b611724828201611647565b928352848101820192828101908785111561173e57600080fd5b83870192505b84831015611766578235611757816115d5565b82529183019190830190611744565b979650505050505050565b60008060006060848603121561178657600080fd5b8335611791816115d5565b925060208401356117a1816115d5565b9150604084013567ffffffffffffffff808211156117be57600080fd5b9085019061016082880312156117d357600080fd5b6117db61161d565b8235828111156117ea57600080fd5b6117f689828601611678565b8252506020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358183015250610120808401358183015250610140808401358381111561186b57600080fd5b6118778a8287016116e8565b8284015250508093505050509250925092565b60006020828403121561189c57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106118db57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052601160045260246000fd5b6000821982111561190a5761190a6118e1565b500190565b600181811c9082168061192357607f821691505b60208210810361194357634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526012908201527154474520696e2077726f6e6720737461746560701b604082015260600190565b60006020828403121561198757600080fd5b81516114e0816115d5565b6000828210156119a4576119a46118e1565b500390565b6000602082840312156119bb57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000600182016119ea576119ea6118e1565b5060010190565b6000816000190483118215151615611a0b57611a0b6118e1565b500290565b600060208284031215611a2257600080fd5b815180151581146114e057600080fd5b600082611a4f57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea2646970667358221220eb5896204cf2de6f32ab87855e986a0eba3619db8c2761c331faa27b49b6b29b64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c80638da5cb5b116100f7578063bf7fec0811610095578063efef39a111610064578063efef39a1146104ca578063f2fde38b146104dd578063f89be593146104fd578063fc0c546a1461051357600080fd5b8063bf7fec081461044f578063c19d93fb1461047c578063cf09e0d01461049e578063e15c38bd146104b457600080fd5b80639b8c3e21116100d15780639b8c3e21146103f9578063a035b1fe1461040e578063a69df4b514610424578063b071cbe61461043957600080fd5b80638da5cb5b146103b0578063977b055b146103ce57806397b3fcaa146103e457600080fd5b80633af32abf1161016f578063593557361161013e57806359355736146103205780635962a9411461034d578063715018a6146103635780637ebd1b301461037857600080fd5b80633af32abf1461029b5780633c68eb81146102cb57806342ee5d84146102e057806349297b331461030057600080fd5b80630fb5a6b4116101ab5780630fb5a6b4146102425780631ada70a814610258578063205decf41461026e57806333b5b62e1461028557600080fd5b8063028dcc4d146101d257806303ee438c146101fc5780630409f6f81461021e575b600080fd5b3480156101de57600080fd5b506101e7610533565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b5061021161055c565b6040516101f39190611580565b34801561022a57600080fd5b50610234606d5481565b6040519081526020016101f3565b34801561024e57600080fd5b50610234606f5481565b34801561026457600080fd5b50610234606e5481565b34801561027a57600080fd5b506102836105ea565b005b34801561029157600080fd5b50610234606a5481565b3480156102a757600080fd5b506101e76102b63660046115ea565b60716020526000908152604090205460ff1681565b3480156102d757600080fd5b50610283610657565b3480156102ec57600080fd5b506102346102fb3660046115ea565b61079e565b34801561030c57600080fd5b5061028361031b366004611771565b6107ca565b34801561032c57600080fd5b5061023461033b3660046115ea565b60766020526000908152604090205481565b34801561035957600080fd5b5061023460735481565b34801561036f57600080fd5b50610283610ad2565b34801561038457600080fd5b5061039861039336600461188a565b610b38565b6040516001600160a01b0390911681526020016101f3565b3480156103bc57600080fd5b506033546001600160a01b0316610398565b3480156103da57600080fd5b50610234606b5481565b3480156103f057600080fd5b50610234610b62565b34801561040557600080fd5b50610283610b74565b34801561041a57600080fd5b5061023460675481565b34801561043057600080fd5b50610283610dd9565b34801561044557600080fd5b5061023460685481565b34801561045b57600080fd5b5061023461046a3660046115ea565b60746020526000908152604090205481565b34801561048857600080fd5b50610491610f48565b6040516101f391906118b9565b3480156104aa57600080fd5b5061023460725481565b3480156104c057600080fd5b50610234606c5481565b6102836104d836600461188a565b610f7e565b3480156104e957600080fd5b506102836104f83660046115ea565b61132a565b34801561050957600080fd5b5061023460695481565b34801561051f57600080fd5b50606554610398906001600160a01b031681565b60755460009060ff1680156105575750606e5460725461055391906118f7565b4310155b905090565b606680546105699061190f565b80601f01602080910402602001604051908101604052809291908181526020018280546105959061190f565b80156105e25780601f106105b7576101008083540402835291602001916105e2565b820191906000526020600020905b8154815290600101906020018083116105c557829003601f168201915b505050505081565b606d546105f5610b62565b10156106485760405162461bcd60e51b815260206004820152601a60248201527f4c6f636b75702054564c206e6f7420796574207265616368656400000000000060448201526064015b60405180910390fd5b6075805460ff19166001179055565b600280610662610f48565b6002811115610673576106736118a3565b146106905760405162461bcd60e51b815260040161063f90611949565b606554604080516316f0115b60e01b815290516000926001600160a01b0316916316f0115b9160048083019260209291908290030181865afa1580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe9190611975565b6001600160a01b0316306001600160a01b03163160405160006040518083038185875af1925050503d8060008114610752576040519150601f19603f3d011682016040523d82523d6000602084013e610757565b606091505b505090508061079a5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161063f565b5050565b6001600160a01b038116600090815260746020526040812054606b546107c49190611992565b92915050565b60006107d660016113f5565b905080156107ee576000805461ff0019166101001790555b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561082e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085291906119a9565b846001600160a01b031663355274ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b491906119a9565b6108be9190611992565b905080836040015111156109205760405162461bcd60e51b8152602060048201526024808201527f4861726463617020686967686572207468616e2072656d61696e696e6720737560448201526370706c7960e01b606482015260840161063f565b6109298561147d565b606580546001600160a01b0319166001600160a01b0386161790558251805161095a916066916020909101906114e7565b506020830151606755604083015160685560608301516069556080830151606a5560a0830151606b5560c0830151606c55610100830151606d8190556075805460ff1916911591909117905560e0830151606e55610120830151606f5560005b83610140015151811015610a8057607084610140015182815181106109e1576109e16119c2565b60209081029190910181015182546001808201855560009485529284200180546001600160a01b0319166001600160a01b039092169190911790556101408601518051919260719290919085908110610a3c57610a3c6119c2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610a78816119d8565b9150506109ba565b5050436072558015610acc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6033546001600160a01b03163314610b2c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161063f565b610b36600061147d565b565b60708181548110610b4857600080fd5b6000918252602090912001546001600160a01b0316905081565b600060675460735461055791906119f1565b600180610b7f610f48565b6002811115610b9057610b906118a3565b14610bad5760405162461bcd60e51b815260040161063f90611949565b6065546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1a91906119a9565b3360009081526076602052604081205491925090610c5190610c3c90846118f7565b336000908152607460205260409020546114cf565b33600090815260746020526040812080549293508392909190610c75908490611992565b909155505081811115610d2e57610c8c8282611992565b3360009081526076602052604081208054909190610cab908490611992565b90915550506065546001600160a01b0316639dc29fac30610ccc8585611992565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610d1257600080fd5b505af1158015610d26573d6000803e3d6000fd5b505050508190505b606554604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015610d7a57600080fd5b505af1158015610d8e573d6000803e3d6000fd5b50505050600060675482610da291906119f1565b604051909150339082156108fc029083906000818181858888f19350505050158015610dd2573d6000803e3d6000fd5b5050505050565b600280610de4610f48565b6002811115610df557610df56118a3565b14610e125760405162461bcd60e51b815260040161063f90611949565b610e1a610533565b610e665760405162461bcd60e51b815260206004820152601860248201527f556e6c6f636b206e6f742079657420617661696c61626c650000000000000000604482015260640161063f565b33600090815260766020526040902054610eb65760405162461bcd60e51b81526020600482015260116024820152704e6f206c6f636b65642062616c616e636560781b604482015260640161063f565b336000818152607660205260408082208054929055606554905163a9059cbb60e01b815260048101939093526024830182905290916001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f439190611a10565b505050565b6000606f54607254610f5a91906118f7565b431015610f675750600090565b60695460735410610f785750600290565b50600190565b3360009081526071602052604090205460ff16610fcf5760405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b604482015260640161063f565b600080610fda610f48565b6002811115610feb57610feb6118a3565b146110085760405162461bcd60e51b815260040161063f90611949565b3360009081526071602052604090205460ff166110595760405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b604482015260640161063f565b606a548210156110ab5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206c657373207468616e206d696e207075726368617365000000604482015260640161063f565b6067546110b890836119f1565b34146111065760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964204554482076616c7565207061737365640000000000000000604482015260640161063f565b61110f3361079e565b8211156111575760405162461bcd60e51b81526020600482015260166024820152754f766572666c6f7773206d617820707572636861736560501b604482015260640161063f565b6068548260735461116891906118f7565b11156111aa5760405162461bcd60e51b815260206004820152601160248201527004f766572666c6f7773206861726463617607c1b604482015260640161063f565b81607360008282546111bc91906118f7565b909155505033600090815260746020526040812080548492906111e09084906118f7565b9091555050606c546000906064906111f890856119f1565b6112039060636118f7565b61120d9190611a32565b9050600061121b8285611992565b111561129c576065546001600160a01b03166340c10f193361123d8487611992565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561128357600080fd5b505af1158015611297573d6000803e3d6000fd5b505050505b6065546040516340c10f1960e01b8152306004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156112e857600080fd5b505af11580156112fc573d6000803e3d6000fd5b505033600090815260766020526040812080548594509092506113209084906118f7565b9091555050505050565b6033546001600160a01b031633146113845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161063f565b6001600160a01b0381166113e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161063f565b6113f28161147d565b50565b60008054610100900460ff161561143c578160ff1660011480156114185750303b155b6114345760405162461bcd60e51b815260040161063f90611a54565b506000919050565b60005460ff8084169116106114635760405162461bcd60e51b815260040161063f90611a54565b506000805460ff191660ff92909216919091179055600190565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008183106114de57816114e0565b825b9392505050565b8280546114f39061190f565b90600052602060002090601f016020900481019282611515576000855561155b565b82601f1061152e57805160ff191683800117855561155b565b8280016001018555821561155b579182015b8281111561155b578251825591602001919060010190611540565b5061156792915061156b565b5090565b5b80821115611567576000815560010161156c565b600060208083528351808285015260005b818110156115ad57858101830151858201604001528201611591565b818111156115bf576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146113f257600080fd5b6000602082840312156115fc57600080fd5b81356114e0816115d5565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff8111828210171561164157611641611607565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561167057611670611607565b604052919050565b600082601f83011261168957600080fd5b813567ffffffffffffffff8111156116a3576116a3611607565b6116b6601f8201601f1916602001611647565b8181528460208386010111156116cb57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126116f957600080fd5b8135602067ffffffffffffffff82111561171557611715611607565b8160051b611724828201611647565b928352848101820192828101908785111561173e57600080fd5b83870192505b84831015611766578235611757816115d5565b82529183019190830190611744565b979650505050505050565b60008060006060848603121561178657600080fd5b8335611791816115d5565b925060208401356117a1816115d5565b9150604084013567ffffffffffffffff808211156117be57600080fd5b9085019061016082880312156117d357600080fd5b6117db61161d565b8235828111156117ea57600080fd5b6117f689828601611678565b8252506020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358183015250610120808401358183015250610140808401358381111561186b57600080fd5b6118778a8287016116e8565b8284015250508093505050509250925092565b60006020828403121561189c57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106118db57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052601160045260246000fd5b6000821982111561190a5761190a6118e1565b500190565b600181811c9082168061192357607f821691505b60208210810361194357634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526012908201527154474520696e2077726f6e6720737461746560701b604082015260600190565b60006020828403121561198757600080fd5b81516114e0816115d5565b6000828210156119a4576119a46118e1565b500390565b6000602082840312156119bb57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000600182016119ea576119ea6118e1565b5060010190565b6000816000190483118215151615611a0b57611a0b6118e1565b500290565b600060208284031215611a2257600080fd5b815180151581146114e057600080fd5b600082611a4f57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea2646970667358221220eb5896204cf2de6f32ab87855e986a0eba3619db8c2761c331faa27b49b6b29b64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 208,
        "contract": "contracts/TGE.sol:TGE",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 211,
        "contract": "contracts/TGE.sol:TGE",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2312,
        "contract": "contracts/TGE.sol:TGE",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/TGE.sol:TGE",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/TGE.sol:TGE",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5959,
        "contract": "contracts/TGE.sol:TGE",
        "label": "token",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IGovernanceToken)7001"
      },
      {
        "astId": 5961,
        "contract": "contracts/TGE.sol:TGE",
        "label": "metadataURI",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 5963,
        "contract": "contracts/TGE.sol:TGE",
        "label": "price",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 5965,
        "contract": "contracts/TGE.sol:TGE",
        "label": "hardcap",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 5967,
        "contract": "contracts/TGE.sol:TGE",
        "label": "softcap",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 5969,
        "contract": "contracts/TGE.sol:TGE",
        "label": "minPurchase",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 5971,
        "contract": "contracts/TGE.sol:TGE",
        "label": "maxPurchase",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 5973,
        "contract": "contracts/TGE.sol:TGE",
        "label": "lockupPercent",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 5975,
        "contract": "contracts/TGE.sol:TGE",
        "label": "lockupTVL",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 5977,
        "contract": "contracts/TGE.sol:TGE",
        "label": "lockupDuration",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 5979,
        "contract": "contracts/TGE.sol:TGE",
        "label": "duration",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 5982,
        "contract": "contracts/TGE.sol:TGE",
        "label": "whitelist",
        "offset": 0,
        "slot": "112",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5986,
        "contract": "contracts/TGE.sol:TGE",
        "label": "isWhitelisted",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5988,
        "contract": "contracts/TGE.sol:TGE",
        "label": "createdAt",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 5990,
        "contract": "contracts/TGE.sol:TGE",
        "label": "totalPurchases",
        "offset": 0,
        "slot": "115",
        "type": "t_uint256"
      },
      {
        "astId": 5994,
        "contract": "contracts/TGE.sol:TGE",
        "label": "purchaseOf",
        "offset": 0,
        "slot": "116",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5996,
        "contract": "contracts/TGE.sol:TGE",
        "label": "lockupTVLReached",
        "offset": 0,
        "slot": "117",
        "type": "t_bool"
      },
      {
        "astId": 6000,
        "contract": "contracts/TGE.sol:TGE",
        "label": "lockedBalanceOf",
        "offset": 0,
        "slot": "118",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IGovernanceToken)7001": {
        "encoding": "inplace",
        "label": "contract IGovernanceToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}