{
  "address": "0xFD1e8032E416511088fB4e607d95325A68Cb3Af0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hardcap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupTVL",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "whitelist",
              "type": "address[]"
            }
          ],
          "internalType": "struct ITGE.TGEInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockupDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockupPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockupTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockupTVLReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "maxPurchaseOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPurchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "purchaseOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setLockupTVLReached",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "softcap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum ITGE.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IGovernanceToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPurchases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "transferFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x018b7f0f2ed37a76f58c345869b0d9b94be75b63f125f553b21bcbfbf3236ccb",
  "receipt": {
    "to": null,
    "from": "0xF89e3d72F182BBcccEfFB7F7d2c9ce796D6547e6",
    "contractAddress": "0xFD1e8032E416511088fB4e607d95325A68Cb3Af0",
    "transactionIndex": 4,
    "gasUsed": "2230882",
    "logsBloom": "0x
    "blockHash": "0xd3c1753242a6bc905fdb5ed26bcc29d9667a9b411dccbab0e5e1c8174eef0ae9",
    "transactionHash": "0x018b7f0f2ed37a76f58c345869b0d9b94be75b63f125f553b21bcbfbf3236ccb",
    "logs": [],
    "blockNumber": 7146161,
    "cumulativeGasUsed": "2353728",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4dfaa6771f87ad430e2d47b84c416ad0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"internalType\":\"struct ITGE.TGEInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupTVLReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"maxPurchaseOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchaseOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLockupTVLReached\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum ITGE.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IGovernanceToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPurchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TGE.sol\":\"TGE\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xd0a917e32d1251a9b2f1dea15e932815d5382e64e6b0a18104664a6cc774cd70\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/TGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./interfaces/IGovernanceToken.sol\\\";\\nimport \\\"./interfaces/ITGE.sol\\\";\\nimport \\\"./interfaces/IService.sol\\\";\\n\\ncontract TGE is ITGE, OwnableUpgradeable {\\n    using AddressUpgradeable for address payable;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    IGovernanceToken public token;\\n\\n    string public metadataURI;\\n\\n    uint256 public price;\\n\\n    uint256 public hardcap;\\n\\n    uint256 public softcap;\\n\\n    uint256 public minPurchase;\\n\\n    uint256 public maxPurchase;\\n\\n    uint256 public lockupPercent;\\n\\n    uint256 public lockupTVL;\\n\\n    uint256 public lockupDuration;\\n\\n    uint256 public duration;\\n\\n    address[] public whitelist;\\n\\n    mapping(address => bool) public isWhitelisted;\\n\\n    uint256 public createdAt;\\n\\n    uint256 public totalPurchases;\\n\\n    mapping(address => uint256) public purchaseOf;\\n\\n    bool public lockupTVLReached;\\n\\n    mapping(address => uint256) public lockedBalanceOf;\\n\\n    // CONSTRUCTOR\\n\\n    function initialize(\\n        address owner_,\\n        address token_,\\n        TGEInfo memory info\\n    ) external override initializer {\\n        uint256 remainingSupply = IGovernanceToken(token_).cap() -\\n            IGovernanceToken(token_).totalSupply();\\n        require(\\n            info.hardcap <= remainingSupply,\\n            \\\"Hardcap higher than remaining supply\\\"\\n        );\\n\\n        _transferOwnership(owner_);\\n\\n        token = IGovernanceToken(token_);\\n        metadataURI = info.metadataURI;\\n        price = info.price;\\n        hardcap = info.hardcap;\\n        softcap = info.softcap;\\n        minPurchase = info.minPurchase;\\n        maxPurchase = info.maxPurchase;\\n        lockupPercent = info.lockupPercent;\\n        lockupTVL = info.lockupTVL;\\n        lockupTVLReached = (lockupTVL == 0);\\n        lockupDuration = info.lockupDuration;\\n        duration = info.duration;\\n\\n        for (uint256 i = 0; i < info.whitelist.length; i++) {\\n            whitelist.push(info.whitelist[i]);\\n            isWhitelisted[info.whitelist[i]] = true;\\n        }\\n        if (info.whitelist.length == 0) {\\n            isWhitelisted[address(0)] = true;\\n        }\\n\\n        createdAt = block.number;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    function purchase(address currency, uint256 amount)\\n        external\\n        payable\\n        onlyWhitelisted\\n        onlyState(State.Active)\\n    {\\n        IService service = token.service();\\n        require(service.isTokenWhitelisted(currency), \\\"Token not whitelisted\\\");\\n        if (currency == address(0)) {\\n            require(msg.value == amount * price, \\\"Invalid ETH value passed\\\");\\n        } else {\\n            uint256 amountIn = service.uniswapQuoter().quoteExactOutput(\\n                service.tokenSwapReversePath(currency),\\n                amount * price\\n            );\\n            IERC20Upgradeable(currency).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                amountIn\\n            );\\n        }\\n\\n        require(amount >= minPurchase, \\\"Amount less than min purchase\\\");\\n        require(amount <= maxPurchaseOf(msg.sender), \\\"Overflows max purchase\\\");\\n        require(totalPurchases + amount <= hardcap, \\\"Overflows hardcap\\\");\\n\\n        totalPurchases += amount;\\n        purchaseOf[msg.sender] += amount;\\n        uint256 lockedAmount = (amount * lockupPercent + 99) / 100;\\n        if (amount - lockedAmount > 0) {\\n            token.mint(msg.sender, amount - lockedAmount);\\n        }\\n        token.mint(address(this), lockedAmount);\\n        lockedBalanceOf[msg.sender] += lockedAmount;\\n    }\\n\\n    function claimBack() external override onlyState(State.Failed) {\\n        // User can't claim more than he bought in this event (in case somebody else has transferred him tokens)\\n        uint256 balance = token.balanceOf(msg.sender);\\n        uint256 refundTokens = MathUpgradeable.min(\\n            balance + lockedBalanceOf[msg.sender],\\n            purchaseOf[msg.sender]\\n        );\\n        purchaseOf[msg.sender] -= refundTokens;\\n        if (refundTokens > balance) {\\n            lockedBalanceOf[msg.sender] -= (refundTokens - balance);\\n            token.burn(address(this), refundTokens - balance);\\n            refundTokens = balance;\\n        }\\n        token.burn(msg.sender, refundTokens);\\n        uint256 refundValue = refundTokens * price;\\n        payable(msg.sender).transfer(refundValue);\\n    }\\n\\n    function unlock() external {\\n        require(unlockAvailable(), \\\"Unlock not yet available\\\");\\n        require(lockedBalanceOf[msg.sender] > 0, \\\"No locked balance\\\");\\n\\n        uint256 balance = lockedBalanceOf[msg.sender];\\n        lockedBalanceOf[msg.sender] = 0;\\n        token.transfer(msg.sender, balance);\\n    }\\n\\n    function setLockupTVLReached() external {\\n        require(getTVL() >= lockupTVL, \\\"Lockup TVL not yet reached\\\");\\n        lockupTVLReached = true;\\n    }\\n\\n    // RESTRICTED FUNCTIONS\\n\\n    function transferFunds(address currency)\\n        external\\n        onlyState(State.Successful)\\n    {\\n        if (currency == address(0)) {\\n            payable(token.pool()).sendValue(address(this).balance);\\n        } else {\\n            require(\\n                currency != address(token),\\n                \\\"Impossible to transfer TGE token\\\"\\n            );\\n            IERC20Upgradeable(currency).safeTransfer(\\n                token.pool(),\\n                IERC20Upgradeable(currency).balanceOf(address(this))\\n            );\\n        }\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    function maxPurchaseOf(address account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return maxPurchase - purchaseOf[account];\\n    }\\n\\n    function state() public view override returns (State) {\\n        if (block.number < createdAt + duration) {\\n            return State.Active;\\n        } else if (totalPurchases >= softcap) {\\n            return State.Successful;\\n        } else {\\n            return State.Failed;\\n        }\\n    }\\n\\n    function unlockAvailable() public view returns (bool) {\\n        return lockupTVLReached && block.number >= createdAt + lockupDuration;\\n    }\\n\\n    function getTVL() public returns (uint256) {\\n        IService service = token.service();\\n        IQuoter quoter = service.uniswapQuoter();\\n        address[] memory tokenWhitelist = service.tokenWhitelist();\\n        uint256 tvl;\\n        for (uint256 i = 0; i < tokenWhitelist.length; i++) {\\n            if (tokenWhitelist[i] == address(0)) {\\n                tvl += address(this).balance;\\n            } else {\\n                uint256 balance = IERC20Upgradeable(tokenWhitelist[i])\\n                    .balanceOf(address(this));\\n                if (balance > 0) {\\n                    tvl += quoter.quoteExactInput(\\n                        service.tokenSwapPath(tokenWhitelist[i]),\\n                        balance\\n                    );\\n                }\\n            }\\n        }\\n        return totalPurchases * price;\\n    }\\n\\n    // MODIFIER\\n\\n    modifier onlyState(State state_) {\\n        require(state() == state_, \\\"TGE in wrong state\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhitelisted() {\\n        require(\\n            isWhitelisted[address(0)] || isWhitelisted[msg.sender],\\n            \\\"Not whitelisted\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x3da95d9bdf7456d3ecf022861055dae7ac45bf0940d0722ee59ed8b322d00b68\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IDirectory {\\n    enum ContractType {\\n        None,\\n        Pool,\\n        GovernanceToken,\\n        TGE\\n    }\\n\\n    function addContractRecord(address addr, ContractType contractType)\\n        external\\n        returns (uint256 index);\\n\\n    function addProposalRecord(address pool, uint256 proposalId)\\n        external\\n        returns (uint256 index);\\n\\n    function typeOf(address addr) external view returns (ContractType);\\n}\\n\",\"keccak256\":\"0x39fc90b444e9aefc4e2a3a40b43840dfa44ff13441a9e50d3de9bb95f044bd81\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./IService.sol\\\";\\n\\ninterface IGovernanceToken is IERC20Upgradeable {\\n    struct TokenInfo {\\n        string name;\\n        string symbol;\\n        uint256 cap;\\n    }\\n\\n    function initialize(address pool_, TokenInfo memory info) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function lock(\\n        address account,\\n        uint256 amount,\\n        uint256 deadline\\n    ) external;\\n\\n    function cap() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function service() external view returns (IService);\\n}\\n\",\"keccak256\":\"0x7ab5e082a0b9d346827f0737d19904b5ff18b9fdb91fe676675e92c8a60afffc\",\"license\":\"MIT\"},\"contracts/interfaces/IService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\nimport \\\"./IDirectory.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\n\\ninterface IService {\\n    function createSecondaryTGE(ITGE.TGEInfo memory tgeInfo) external;\\n\\n    function addProposal(uint256 proposalId) external;\\n\\n    function directory() external view returns (IDirectory);\\n\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n\\n    function tokenWhitelist() external view returns (address[] memory);\\n\\n    function owner() external view returns (address);\\n\\n    function proposalGateway() external view returns (address);\\n\\n    function proposalQuorum() external view returns (uint256);\\n\\n    function proposalThreshold() external view returns (uint256);\\n\\n    function uniswapRouter() external view returns (ISwapRouter);\\n\\n    function uniswapQuoter() external view returns (IQuoter);\\n\\n    function tokenSwapPath(address) external view returns (bytes memory);\\n\\n    function tokenSwapReversePath(address) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf1d37d18235df54aff8811fc947c319d175c11832e228ba4e8345c42307b53b8\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface ITGE {\\n    struct TGEInfo {\\n        string metadataURI;\\n        uint256 price;\\n        uint256 hardcap;\\n        uint256 softcap;\\n        uint256 minPurchase;\\n        uint256 maxPurchase;\\n        uint256 lockupPercent;\\n        uint256 lockupDuration;\\n        uint256 lockupTVL;\\n        uint256 duration;\\n        address[] whitelist;\\n    }\\n\\n    function initialize(\\n        address owner_,\\n        address token_,\\n        TGEInfo memory info\\n    ) external;\\n\\n    function claimBack() external;\\n\\n    function maxPurchaseOf(address account) external view returns (uint256);\\n\\n    enum State {\\n        Active,\\n        Failed,\\n        Successful\\n    }\\n\\n    function state() external view returns (State);\\n}\\n\",\"keccak256\":\"0x6e364e4c5b5fb6cc31734ba94e0272ef3db83b676a216369b4317bb69b608e27\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612767806100206000396000f3fe6080604052600436106101d85760003560e01c80638de9322211610102578063c19d93fb11610095578063ec76d21511610064578063ec76d215146104f3578063f2fde38b1461050d578063f89be5931461052d578063fc0c546a1461054357600080fd5b8063c19d93fb14610485578063cf09e0d0146104a7578063e15c38bd146104bd578063e39ff19f146104d357600080fd5b8063a035b1fe116100d1578063a035b1fe14610417578063a69df4b51461042d578063b071cbe614610442578063bf7fec081461045857600080fd5b80638de93222146103c4578063977b055b146103d757806397b3fcaa146103ed5780639b8c3e211461040257600080fd5b80633af32abf1161017a5780635962a941116101495780635962a94114610343578063715018a6146103595780637ebd1b301461036e5780638da5cb5b146103a657600080fd5b80633af32abf146102a657806342ee5d84146102d657806349297b33146102f6578063593557361461031657600080fd5b80630fb5a6b4116101b65780630fb5a6b41461024d5780631ada70a814610263578063205decf41461027957806333b5b62e1461029057600080fd5b8063028dcc4d146101dd57806303ee438c146102075780630409f6f814610229575b600080fd5b3480156101e957600080fd5b506101f2610563565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061021c61058c565b6040516101fe91906120c9565b34801561023557600080fd5b5061023f606d5481565b6040519081526020016101fe565b34801561025957600080fd5b5061023f606f5481565b34801561026f57600080fd5b5061023f606e5481565b34801561028557600080fd5b5061028e61061a565b005b34801561029c57600080fd5b5061023f606a5481565b3480156102b257600080fd5b506101f26102c13660046120f1565b60716020526000908152604090205460ff1681565b3480156102e257600080fd5b5061023f6102f13660046120f1565b610687565b34801561030257600080fd5b5061028e610311366004612290565b6106b3565b34801561032257600080fd5b5061023f6103313660046120f1565b60766020526000908152604090205481565b34801561034f57600080fd5b5061023f60735481565b34801561036557600080fd5b5061028e6109ff565b34801561037a57600080fd5b5061038e6103893660046123a9565b610a65565b6040516001600160a01b0390911681526020016101fe565b3480156103b257600080fd5b506033546001600160a01b031661038e565b61028e6103d23660046123c2565b610a8f565b3480156103e357600080fd5b5061023f606b5481565b3480156103f957600080fd5b5061023f6110b7565b34801561040e57600080fd5b5061028e611428565b34801561042357600080fd5b5061023f60675481565b34801561043957600080fd5b5061028e61168d565b34801561044e57600080fd5b5061023f60685481565b34801561046457600080fd5b5061023f6104733660046120f1565b60746020526000908152604090205481565b34801561049157600080fd5b5061049a6117c2565b6040516101fe9190612404565b3480156104b357600080fd5b5061023f60725481565b3480156104c957600080fd5b5061023f606c5481565b3480156104df57600080fd5b5061028e6104ee3660046120f1565b6117f8565b3480156104ff57600080fd5b506075546101f29060ff1681565b34801561051957600080fd5b5061028e6105283660046120f1565b611a0f565b34801561053957600080fd5b5061023f60695481565b34801561054f57600080fd5b5060655461038e906001600160a01b031681565b60755460009060ff1680156105875750606e546072546105839190612442565b4310155b905090565b606680546105999061245a565b80601f01602080910402602001604051908101604052809291908181526020018280546105c59061245a565b80156106125780601f106105e757610100808354040283529160200191610612565b820191906000526020600020905b8154815290600101906020018083116105f557829003601f168201915b505050505081565b606d546106256110b7565b10156106785760405162461bcd60e51b815260206004820152601a60248201527f4c6f636b75702054564c206e6f7420796574207265616368656400000000000060448201526064015b60405180910390fd5b6075805460ff19166001179055565b6001600160a01b038116600090815260746020526040812054606b546106ad9190612494565b92915050565b60006106bf6001611ada565b905080156106d7576000805461ff0019166101001790555b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073b91906124ab565b846001600160a01b031663355274ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610779573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079d91906124ab565b6107a79190612494565b905080836040015111156108095760405162461bcd60e51b8152602060048201526024808201527f4861726463617020686967686572207468616e2072656d61696e696e6720737560448201526370706c7960e01b606482015260840161066f565b61081285611b62565b606580546001600160a01b0319166001600160a01b0386161790558251805161084391606691602090910190611fd8565b506020830151606755604083015160685560608301516069556080830151606a5560a0830151606b5560c0830151606c55610100830151606d8190556075805460ff1916911591909117905560e0830151606e55610120830151606f5560005b8361014001515181101561096957607084610140015182815181106108ca576108ca6124c4565b60209081029190910181015182546001808201855560009485529284200180546001600160a01b0319166001600160a01b039092169190911790556101408601518051919260719290919085908110610925576109256124c4565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610961816124da565b9150506108a3565b50826101400151516000036109ae576000805260716020527fad843ed81c51f3253e288ab81893b95f341abc6f3805e238467be473bc3798f5805460ff191660011790555b504360725580156109f9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6033546001600160a01b03163314610a595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066f565b610a636000611b62565b565b60708181548110610a7557600080fd5b6000918252602090912001546001600160a01b0316905081565b6000805260716020527fad843ed81c51f3253e288ab81893b95f341abc6f3805e238467be473bc3798f55460ff1680610ad757503360009081526071602052604090205460ff165b610b155760405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b604482015260640161066f565b600080610b206117c2565b6002811115610b3157610b316123ee565b14610b4e5760405162461bcd60e51b815260040161066f906124f3565b6065546040805163d598d4c960e01b815290516000926001600160a01b03169163d598d4c99160048083019260209291908290030181865afa158015610b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbc919061251f565b60405163b5af090f60e01b81526001600160a01b0386811660048301529192509082169063b5af090f90602401602060405180830381865afa158015610c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2a919061253c565b610c6e5760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881b9bdd081dda1a5d195b1a5cdd1959605a1b604482015260640161066f565b6001600160a01b038416610cdc57606754610c89908461255e565b3414610cd75760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964204554482076616c7565207061737365640000000000000000604482015260640161066f565b610e3f565b6000816001600160a01b0316634db4a3526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d40919061251f565b6040516363d08dff60e01b81526001600160a01b03878116600483015291821691632f80bb1d91908516906363d08dff90602401600060405180830381865afa158015610d91573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610db9919081019061257d565b606754610dc6908861255e565b6040518363ffffffff1660e01b8152600401610de39291906125f4565b6020604051808303816000875af1158015610e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2691906124ab565b9050610e3d6001600160a01b038616333084611bb4565b505b606a54831015610e915760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206c657373207468616e206d696e207075726368617365000000604482015260640161066f565b610e9a33610687565b831115610ee25760405162461bcd60e51b81526020600482015260166024820152754f766572666c6f7773206d617820707572636861736560501b604482015260640161066f565b60685483607354610ef39190612442565b1115610f355760405162461bcd60e51b815260206004820152601160248201527004f766572666c6f7773206861726463617607c1b604482015260640161066f565b8260736000828254610f479190612442565b90915550503360009081526074602052604081208054859290610f6b908490612442565b9091555050606c54600090606490610f83908661255e565b610f8e906063612442565b610f989190612616565b90506000610fa68286612494565b1115611027576065546001600160a01b03166340c10f1933610fc88488612494565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561100e57600080fd5b505af1158015611022573d6000803e3d6000fd5b505050505b6065546040516340c10f1960e01b8152306004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561107357600080fd5b505af1158015611087573d6000803e3d6000fd5b505033600090815260766020526040812080548594509092506110ab908490612442565b90915550505050505050565b600080606560009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561110d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611131919061251f565b90506000816001600160a01b0316634db4a3526040518163ffffffff1660e01b8152600401602060405180830381865afa158015611173573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611197919061251f565b90506000826001600160a01b031663ca735cc16040518163ffffffff1660e01b8152600401600060405180830381865afa1580156111d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112019190810190612638565b90506000805b825181101561140e5760006001600160a01b031683828151811061122d5761122d6124c4565b60200260200101516001600160a01b0316036112545761124d4783612442565b91506113fc565b6000838281518110611268576112686124c4565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156112b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dc91906124ab565b905080156113fa57846001600160a01b031663cdca1753876001600160a01b03166350eb1c43878681518110611314576113146124c4565b60200260200101516040518263ffffffff1660e01b815260040161134791906001600160a01b0391909116815260200190565b600060405180830381865afa158015611364573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261138c919081019061257d565b836040518363ffffffff1660e01b81526004016113aa9291906125f4565b6020604051808303816000875af11580156113c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ed91906124ab565b6113f79084612442565b92505b505b80611406816124da565b915050611207565b5060675460735461141f919061255e565b94505050505090565b6001806114336117c2565b6002811115611444576114446123ee565b146114615760405162461bcd60e51b815260040161066f906124f3565b6065546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156114aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ce91906124ab565b3360009081526076602052604081205491925090611505906114f09084612442565b33600090815260746020526040902054611c1f565b33600090815260746020526040812080549293508392909190611529908490612494565b9091555050818111156115e2576115408282612494565b336000908152607660205260408120805490919061155f908490612494565b90915550506065546001600160a01b0316639dc29fac306115808585612494565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156115c657600080fd5b505af11580156115da573d6000803e3d6000fd5b505050508190505b606554604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561162e57600080fd5b505af1158015611642573d6000803e3d6000fd5b50505050600060675482611656919061255e565b604051909150339082156108fc029083906000818181858888f19350505050158015611686573d6000803e3d6000fd5b5050505050565b611695610563565b6116e15760405162461bcd60e51b815260206004820152601860248201527f556e6c6f636b206e6f742079657420617661696c61626c650000000000000000604482015260640161066f565b336000908152607660205260409020546117315760405162461bcd60e51b81526020600482015260116024820152704e6f206c6f636b65642062616c616e636560781b604482015260640161066f565b336000818152607660205260408082208054929055606554905163a9059cbb60e01b815260048101939093526024830182905290916001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561179a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117be919061253c565b5050565b6000606f546072546117d49190612442565b4310156117e15750600090565b606954607354106117f25750600290565b50600190565b6002806118036117c2565b6002811115611814576118146123ee565b146118315760405162461bcd60e51b815260040161066f906124f3565b6001600160a01b0382166118c9576117be47606560009054906101000a90046001600160a01b03166001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ba919061251f565b6001600160a01b031690611c37565b6065546001600160a01b03908116908316036119275760405162461bcd60e51b815260206004820181905260248201527f496d706f737369626c6520746f207472616e736665722054474520746f6b656e604482015260640161066f565b606554604080516316f0115b60e01b815290516117be926001600160a01b0316916316f0115b9160048083019260209291908290030181865afa158015611972573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611996919061251f565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa1580156119da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fe91906124ab565b6001600160a01b0385169190611d55565b6033546001600160a01b03163314611a695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066f565b6001600160a01b038116611ace5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161066f565b611ad781611b62565b50565b60008054610100900460ff1615611b21578160ff166001148015611afd5750303b155b611b195760405162461bcd60e51b815260040161066f906126c7565b506000919050565b60005460ff808416911610611b485760405162461bcd60e51b815260040161066f906126c7565b506000805460ff191660ff92909216919091179055600190565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526109f99085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611d85565b6000818310611c2e5781611c30565b825b9392505050565b80471015611c875760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161066f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611cd4576040519150601f19603f3d011682016040523d82523d6000602084013e611cd9565b606091505b5050905080611d505760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161066f565b505050565b6040516001600160a01b038316602482015260448101829052611d5090849063a9059cbb60e01b90606401611be8565b6000611dda826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e579092919063ffffffff16565b805190915015611d505780806020019051810190611df8919061253c565b611d505760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161066f565b6060611e668484600085611e6e565b949350505050565b606082471015611ecf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161066f565b6001600160a01b0385163b611f265760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161066f565b600080866001600160a01b03168587604051611f429190612715565b60006040518083038185875af1925050503d8060008114611f7f576040519150601f19603f3d011682016040523d82523d6000602084013e611f84565b606091505b5091509150611f94828286611f9f565b979650505050505050565b60608315611fae575081611c30565b825115611fbe5782518084602001fd5b8160405162461bcd60e51b815260040161066f91906120c9565b828054611fe49061245a565b90600052602060002090601f016020900481019282612006576000855561204c565b82601f1061201f57805160ff191683800117855561204c565b8280016001018555821561204c579182015b8281111561204c578251825591602001919060010190612031565b5061205892915061205c565b5090565b5b80821115612058576000815560010161205d565b60005b8381101561208c578181015183820152602001612074565b838111156109f95750506000910152565b600081518084526120b5816020860160208601612071565b601f01601f19169290920160200192915050565b602081526000611c30602083018461209d565b6001600160a01b0381168114611ad757600080fd5b60006020828403121561210357600080fd5b8135611c30816120dc565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff811182821017156121485761214861210e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156121775761217761210e565b604052919050565b600067ffffffffffffffff8211156121995761219961210e565b50601f01601f191660200190565b600082601f8301126121b857600080fd5b81356121cb6121c68261217f565b61214e565b8181528460208386010111156121e057600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff8211156122175761221761210e565b5060051b60200190565b600082601f83011261223257600080fd5b813560206122426121c6836121fd565b82815260059290921b8401810191818101908684111561226157600080fd5b8286015b84811015612285578035612278816120dc565b8352918301918301612265565b509695505050505050565b6000806000606084860312156122a557600080fd5b83356122b0816120dc565b925060208401356122c0816120dc565b9150604084013567ffffffffffffffff808211156122dd57600080fd5b9085019061016082880312156122f257600080fd5b6122fa612124565b82358281111561230957600080fd5b612315898286016121a7565b8252506020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358183015250610120808401358183015250610140808401358381111561238a57600080fd5b6123968a828701612221565b8284015250508093505050509250925092565b6000602082840312156123bb57600080fd5b5035919050565b600080604083850312156123d557600080fd5b82356123e0816120dc565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061242657634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052601160045260246000fd5b600082198211156124555761245561242c565b500190565b600181811c9082168061246e57607f821691505b60208210810361248e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000828210156124a6576124a661242c565b500390565b6000602082840312156124bd57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000600182016124ec576124ec61242c565b5060010190565b60208082526012908201527154474520696e2077726f6e6720737461746560701b604082015260600190565b60006020828403121561253157600080fd5b8151611c30816120dc565b60006020828403121561254e57600080fd5b81518015158114611c3057600080fd5b60008160001904831182151516156125785761257861242c565b500290565b60006020828403121561258f57600080fd5b815167ffffffffffffffff8111156125a657600080fd5b8201601f810184136125b757600080fd5b80516125c56121c68261217f565b8181528560208385010111156125da57600080fd5b6125eb826020830160208601612071565b95945050505050565b604081526000612607604083018561209d565b90508260208301529392505050565b60008261263357634e487b7160e01b600052601260045260246000fd5b500490565b6000602080838503121561264b57600080fd5b825167ffffffffffffffff81111561266257600080fd5b8301601f8101851361267357600080fd5b80516126816121c6826121fd565b81815260059190911b820183019083810190878311156126a057600080fd5b928401925b82841015611f945783516126b8816120dc565b825292840192908401906126a5565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008251612727818460208701612071565b919091019291505056fea26469706673582212206a5a0df327d7e9e7fa42f403ef4195e3868f74775b890498a4f14490a343b4e764736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c80638de9322211610102578063c19d93fb11610095578063ec76d21511610064578063ec76d215146104f3578063f2fde38b1461050d578063f89be5931461052d578063fc0c546a1461054357600080fd5b8063c19d93fb14610485578063cf09e0d0146104a7578063e15c38bd146104bd578063e39ff19f146104d357600080fd5b8063a035b1fe116100d1578063a035b1fe14610417578063a69df4b51461042d578063b071cbe614610442578063bf7fec081461045857600080fd5b80638de93222146103c4578063977b055b146103d757806397b3fcaa146103ed5780639b8c3e211461040257600080fd5b80633af32abf1161017a5780635962a941116101495780635962a94114610343578063715018a6146103595780637ebd1b301461036e5780638da5cb5b146103a657600080fd5b80633af32abf146102a657806342ee5d84146102d657806349297b33146102f6578063593557361461031657600080fd5b80630fb5a6b4116101b65780630fb5a6b41461024d5780631ada70a814610263578063205decf41461027957806333b5b62e1461029057600080fd5b8063028dcc4d146101dd57806303ee438c146102075780630409f6f814610229575b600080fd5b3480156101e957600080fd5b506101f2610563565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061021c61058c565b6040516101fe91906120c9565b34801561023557600080fd5b5061023f606d5481565b6040519081526020016101fe565b34801561025957600080fd5b5061023f606f5481565b34801561026f57600080fd5b5061023f606e5481565b34801561028557600080fd5b5061028e61061a565b005b34801561029c57600080fd5b5061023f606a5481565b3480156102b257600080fd5b506101f26102c13660046120f1565b60716020526000908152604090205460ff1681565b3480156102e257600080fd5b5061023f6102f13660046120f1565b610687565b34801561030257600080fd5b5061028e610311366004612290565b6106b3565b34801561032257600080fd5b5061023f6103313660046120f1565b60766020526000908152604090205481565b34801561034f57600080fd5b5061023f60735481565b34801561036557600080fd5b5061028e6109ff565b34801561037a57600080fd5b5061038e6103893660046123a9565b610a65565b6040516001600160a01b0390911681526020016101fe565b3480156103b257600080fd5b506033546001600160a01b031661038e565b61028e6103d23660046123c2565b610a8f565b3480156103e357600080fd5b5061023f606b5481565b3480156103f957600080fd5b5061023f6110b7565b34801561040e57600080fd5b5061028e611428565b34801561042357600080fd5b5061023f60675481565b34801561043957600080fd5b5061028e61168d565b34801561044e57600080fd5b5061023f60685481565b34801561046457600080fd5b5061023f6104733660046120f1565b60746020526000908152604090205481565b34801561049157600080fd5b5061049a6117c2565b6040516101fe9190612404565b3480156104b357600080fd5b5061023f60725481565b3480156104c957600080fd5b5061023f606c5481565b3480156104df57600080fd5b5061028e6104ee3660046120f1565b6117f8565b3480156104ff57600080fd5b506075546101f29060ff1681565b34801561051957600080fd5b5061028e6105283660046120f1565b611a0f565b34801561053957600080fd5b5061023f60695481565b34801561054f57600080fd5b5060655461038e906001600160a01b031681565b60755460009060ff1680156105875750606e546072546105839190612442565b4310155b905090565b606680546105999061245a565b80601f01602080910402602001604051908101604052809291908181526020018280546105c59061245a565b80156106125780601f106105e757610100808354040283529160200191610612565b820191906000526020600020905b8154815290600101906020018083116105f557829003601f168201915b505050505081565b606d546106256110b7565b10156106785760405162461bcd60e51b815260206004820152601a60248201527f4c6f636b75702054564c206e6f7420796574207265616368656400000000000060448201526064015b60405180910390fd5b6075805460ff19166001179055565b6001600160a01b038116600090815260746020526040812054606b546106ad9190612494565b92915050565b60006106bf6001611ada565b905080156106d7576000805461ff0019166101001790555b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073b91906124ab565b846001600160a01b031663355274ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610779573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079d91906124ab565b6107a79190612494565b905080836040015111156108095760405162461bcd60e51b8152602060048201526024808201527f4861726463617020686967686572207468616e2072656d61696e696e6720737560448201526370706c7960e01b606482015260840161066f565b61081285611b62565b606580546001600160a01b0319166001600160a01b0386161790558251805161084391606691602090910190611fd8565b506020830151606755604083015160685560608301516069556080830151606a5560a0830151606b5560c0830151606c55610100830151606d8190556075805460ff1916911591909117905560e0830151606e55610120830151606f5560005b8361014001515181101561096957607084610140015182815181106108ca576108ca6124c4565b60209081029190910181015182546001808201855560009485529284200180546001600160a01b0319166001600160a01b039092169190911790556101408601518051919260719290919085908110610925576109256124c4565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610961816124da565b9150506108a3565b50826101400151516000036109ae576000805260716020527fad843ed81c51f3253e288ab81893b95f341abc6f3805e238467be473bc3798f5805460ff191660011790555b504360725580156109f9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6033546001600160a01b03163314610a595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066f565b610a636000611b62565b565b60708181548110610a7557600080fd5b6000918252602090912001546001600160a01b0316905081565b6000805260716020527fad843ed81c51f3253e288ab81893b95f341abc6f3805e238467be473bc3798f55460ff1680610ad757503360009081526071602052604090205460ff165b610b155760405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b604482015260640161066f565b600080610b206117c2565b6002811115610b3157610b316123ee565b14610b4e5760405162461bcd60e51b815260040161066f906124f3565b6065546040805163d598d4c960e01b815290516000926001600160a01b03169163d598d4c99160048083019260209291908290030181865afa158015610b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbc919061251f565b60405163b5af090f60e01b81526001600160a01b0386811660048301529192509082169063b5af090f90602401602060405180830381865afa158015610c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2a919061253c565b610c6e5760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881b9bdd081dda1a5d195b1a5cdd1959605a1b604482015260640161066f565b6001600160a01b038416610cdc57606754610c89908461255e565b3414610cd75760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964204554482076616c7565207061737365640000000000000000604482015260640161066f565b610e3f565b6000816001600160a01b0316634db4a3526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d40919061251f565b6040516363d08dff60e01b81526001600160a01b03878116600483015291821691632f80bb1d91908516906363d08dff90602401600060405180830381865afa158015610d91573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610db9919081019061257d565b606754610dc6908861255e565b6040518363ffffffff1660e01b8152600401610de39291906125f4565b6020604051808303816000875af1158015610e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2691906124ab565b9050610e3d6001600160a01b038616333084611bb4565b505b606a54831015610e915760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206c657373207468616e206d696e207075726368617365000000604482015260640161066f565b610e9a33610687565b831115610ee25760405162461bcd60e51b81526020600482015260166024820152754f766572666c6f7773206d617820707572636861736560501b604482015260640161066f565b60685483607354610ef39190612442565b1115610f355760405162461bcd60e51b815260206004820152601160248201527004f766572666c6f7773206861726463617607c1b604482015260640161066f565b8260736000828254610f479190612442565b90915550503360009081526074602052604081208054859290610f6b908490612442565b9091555050606c54600090606490610f83908661255e565b610f8e906063612442565b610f989190612616565b90506000610fa68286612494565b1115611027576065546001600160a01b03166340c10f1933610fc88488612494565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561100e57600080fd5b505af1158015611022573d6000803e3d6000fd5b505050505b6065546040516340c10f1960e01b8152306004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561107357600080fd5b505af1158015611087573d6000803e3d6000fd5b505033600090815260766020526040812080548594509092506110ab908490612442565b90915550505050505050565b600080606560009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561110d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611131919061251f565b90506000816001600160a01b0316634db4a3526040518163ffffffff1660e01b8152600401602060405180830381865afa158015611173573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611197919061251f565b90506000826001600160a01b031663ca735cc16040518163ffffffff1660e01b8152600401600060405180830381865afa1580156111d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112019190810190612638565b90506000805b825181101561140e5760006001600160a01b031683828151811061122d5761122d6124c4565b60200260200101516001600160a01b0316036112545761124d4783612442565b91506113fc565b6000838281518110611268576112686124c4565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156112b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dc91906124ab565b905080156113fa57846001600160a01b031663cdca1753876001600160a01b03166350eb1c43878681518110611314576113146124c4565b60200260200101516040518263ffffffff1660e01b815260040161134791906001600160a01b0391909116815260200190565b600060405180830381865afa158015611364573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261138c919081019061257d565b836040518363ffffffff1660e01b81526004016113aa9291906125f4565b6020604051808303816000875af11580156113c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ed91906124ab565b6113f79084612442565b92505b505b80611406816124da565b915050611207565b5060675460735461141f919061255e565b94505050505090565b6001806114336117c2565b6002811115611444576114446123ee565b146114615760405162461bcd60e51b815260040161066f906124f3565b6065546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156114aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ce91906124ab565b3360009081526076602052604081205491925090611505906114f09084612442565b33600090815260746020526040902054611c1f565b33600090815260746020526040812080549293508392909190611529908490612494565b9091555050818111156115e2576115408282612494565b336000908152607660205260408120805490919061155f908490612494565b90915550506065546001600160a01b0316639dc29fac306115808585612494565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156115c657600080fd5b505af11580156115da573d6000803e3d6000fd5b505050508190505b606554604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561162e57600080fd5b505af1158015611642573d6000803e3d6000fd5b50505050600060675482611656919061255e565b604051909150339082156108fc029083906000818181858888f19350505050158015611686573d6000803e3d6000fd5b5050505050565b611695610563565b6116e15760405162461bcd60e51b815260206004820152601860248201527f556e6c6f636b206e6f742079657420617661696c61626c650000000000000000604482015260640161066f565b336000908152607660205260409020546117315760405162461bcd60e51b81526020600482015260116024820152704e6f206c6f636b65642062616c616e636560781b604482015260640161066f565b336000818152607660205260408082208054929055606554905163a9059cbb60e01b815260048101939093526024830182905290916001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561179a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117be919061253c565b5050565b6000606f546072546117d49190612442565b4310156117e15750600090565b606954607354106117f25750600290565b50600190565b6002806118036117c2565b6002811115611814576118146123ee565b146118315760405162461bcd60e51b815260040161066f906124f3565b6001600160a01b0382166118c9576117be47606560009054906101000a90046001600160a01b03166001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ba919061251f565b6001600160a01b031690611c37565b6065546001600160a01b03908116908316036119275760405162461bcd60e51b815260206004820181905260248201527f496d706f737369626c6520746f207472616e736665722054474520746f6b656e604482015260640161066f565b606554604080516316f0115b60e01b815290516117be926001600160a01b0316916316f0115b9160048083019260209291908290030181865afa158015611972573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611996919061251f565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa1580156119da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fe91906124ab565b6001600160a01b0385169190611d55565b6033546001600160a01b03163314611a695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066f565b6001600160a01b038116611ace5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161066f565b611ad781611b62565b50565b60008054610100900460ff1615611b21578160ff166001148015611afd5750303b155b611b195760405162461bcd60e51b815260040161066f906126c7565b506000919050565b60005460ff808416911610611b485760405162461bcd60e51b815260040161066f906126c7565b506000805460ff191660ff92909216919091179055600190565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526109f99085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611d85565b6000818310611c2e5781611c30565b825b9392505050565b80471015611c875760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161066f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611cd4576040519150601f19603f3d011682016040523d82523d6000602084013e611cd9565b606091505b5050905080611d505760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161066f565b505050565b6040516001600160a01b038316602482015260448101829052611d5090849063a9059cbb60e01b90606401611be8565b6000611dda826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e579092919063ffffffff16565b805190915015611d505780806020019051810190611df8919061253c565b611d505760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161066f565b6060611e668484600085611e6e565b949350505050565b606082471015611ecf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161066f565b6001600160a01b0385163b611f265760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161066f565b600080866001600160a01b03168587604051611f429190612715565b60006040518083038185875af1925050503d8060008114611f7f576040519150601f19603f3d011682016040523d82523d6000602084013e611f84565b606091505b5091509150611f94828286611f9f565b979650505050505050565b60608315611fae575081611c30565b825115611fbe5782518084602001fd5b8160405162461bcd60e51b815260040161066f91906120c9565b828054611fe49061245a565b90600052602060002090601f016020900481019282612006576000855561204c565b82601f1061201f57805160ff191683800117855561204c565b8280016001018555821561204c579182015b8281111561204c578251825591602001919060010190612031565b5061205892915061205c565b5090565b5b80821115612058576000815560010161205d565b60005b8381101561208c578181015183820152602001612074565b838111156109f95750506000910152565b600081518084526120b5816020860160208601612071565b601f01601f19169290920160200192915050565b602081526000611c30602083018461209d565b6001600160a01b0381168114611ad757600080fd5b60006020828403121561210357600080fd5b8135611c30816120dc565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff811182821017156121485761214861210e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156121775761217761210e565b604052919050565b600067ffffffffffffffff8211156121995761219961210e565b50601f01601f191660200190565b600082601f8301126121b857600080fd5b81356121cb6121c68261217f565b61214e565b8181528460208386010111156121e057600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff8211156122175761221761210e565b5060051b60200190565b600082601f83011261223257600080fd5b813560206122426121c6836121fd565b82815260059290921b8401810191818101908684111561226157600080fd5b8286015b84811015612285578035612278816120dc565b8352918301918301612265565b509695505050505050565b6000806000606084860312156122a557600080fd5b83356122b0816120dc565b925060208401356122c0816120dc565b9150604084013567ffffffffffffffff808211156122dd57600080fd5b9085019061016082880312156122f257600080fd5b6122fa612124565b82358281111561230957600080fd5b612315898286016121a7565b8252506020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358183015250610120808401358183015250610140808401358381111561238a57600080fd5b6123968a828701612221565b8284015250508093505050509250925092565b6000602082840312156123bb57600080fd5b5035919050565b600080604083850312156123d557600080fd5b82356123e0816120dc565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061242657634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052601160045260246000fd5b600082198211156124555761245561242c565b500190565b600181811c9082168061246e57607f821691505b60208210810361248e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000828210156124a6576124a661242c565b500390565b6000602082840312156124bd57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000600182016124ec576124ec61242c565b5060010190565b60208082526012908201527154474520696e2077726f6e6720737461746560701b604082015260600190565b60006020828403121561253157600080fd5b8151611c30816120dc565b60006020828403121561254e57600080fd5b81518015158114611c3057600080fd5b60008160001904831182151516156125785761257861242c565b500290565b60006020828403121561258f57600080fd5b815167ffffffffffffffff8111156125a657600080fd5b8201601f810184136125b757600080fd5b80516125c56121c68261217f565b8181528560208385010111156125da57600080fd5b6125eb826020830160208601612071565b95945050505050565b604081526000612607604083018561209d565b90508260208301529392505050565b60008261263357634e487b7160e01b600052601260045260246000fd5b500490565b6000602080838503121561264b57600080fd5b825167ffffffffffffffff81111561266257600080fd5b8301601f8101851361267357600080fd5b80516126816121c6826121fd565b81815260059190911b820183019083810190878311156126a057600080fd5b928401925b82841015611f945783516126b8816120dc565b825292840192908401906126a5565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008251612727818460208701612071565b919091019291505056fea26469706673582212206a5a0df327d7e9e7fa42f403ef4195e3868f74775b890498a4f14490a343b4e764736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 208,
        "contract": "contracts/TGE.sol:TGE",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 211,
        "contract": "contracts/TGE.sol:TGE",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2536,
        "contract": "contracts/TGE.sol:TGE",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/TGE.sol:TGE",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/TGE.sol:TGE",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8526,
        "contract": "contracts/TGE.sol:TGE",
        "label": "token",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IGovernanceToken)9758"
      },
      {
        "astId": 8528,
        "contract": "contracts/TGE.sol:TGE",
        "label": "metadataURI",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 8530,
        "contract": "contracts/TGE.sol:TGE",
        "label": "price",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 8532,
        "contract": "contracts/TGE.sol:TGE",
        "label": "hardcap",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 8534,
        "contract": "contracts/TGE.sol:TGE",
        "label": "softcap",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 8536,
        "contract": "contracts/TGE.sol:TGE",
        "label": "minPurchase",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 8538,
        "contract": "contracts/TGE.sol:TGE",
        "label": "maxPurchase",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 8540,
        "contract": "contracts/TGE.sol:TGE",
        "label": "lockupPercent",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 8542,
        "contract": "contracts/TGE.sol:TGE",
        "label": "lockupTVL",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 8544,
        "contract": "contracts/TGE.sol:TGE",
        "label": "lockupDuration",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 8546,
        "contract": "contracts/TGE.sol:TGE",
        "label": "duration",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 8549,
        "contract": "contracts/TGE.sol:TGE",
        "label": "whitelist",
        "offset": 0,
        "slot": "112",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8553,
        "contract": "contracts/TGE.sol:TGE",
        "label": "isWhitelisted",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8555,
        "contract": "contracts/TGE.sol:TGE",
        "label": "createdAt",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 8557,
        "contract": "contracts/TGE.sol:TGE",
        "label": "totalPurchases",
        "offset": 0,
        "slot": "115",
        "type": "t_uint256"
      },
      {
        "astId": 8561,
        "contract": "contracts/TGE.sol:TGE",
        "label": "purchaseOf",
        "offset": 0,
        "slot": "116",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8563,
        "contract": "contracts/TGE.sol:TGE",
        "label": "lockupTVLReached",
        "offset": 0,
        "slot": "117",
        "type": "t_bool"
      },
      {
        "astId": 8567,
        "contract": "contracts/TGE.sol:TGE",
        "label": "lockedBalanceOf",
        "offset": 0,
        "slot": "118",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IGovernanceToken)9758": {
        "encoding": "inplace",
        "label": "contract IGovernanceToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}