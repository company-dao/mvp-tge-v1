{
  "address": "0x3fd37C8Cc82b25E0a221F09Aa1f3957e7b7b715c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "TokenWhitelistedSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "swapPaths",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "swapReversePaths",
          "type": "bytes[]"
        }
      ],
      "name": "addTokensToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isTokenWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "removeTokensFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenSwapPath",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenSwapReversePath",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenWhitelist",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa23d152323f5fedc772959aa3542dea94ac19dddddb1795df5f6b9e657194c70",
  "receipt": {
    "to": null,
    "from": "0xF89e3d72F182BBcccEfFB7F7d2c9ce796D6547e6",
    "contractAddress": "0x3fd37C8Cc82b25E0a221F09Aa1f3957e7b7b715c",
    "transactionIndex": 86,
    "gasUsed": "832155",
    "logsBloom": "0x
    "blockHash": "0xcafe9b700de93a2f6defbe9b9fb2ae4ed8236e54e737dc30986afc74a0cc766d",
    "transactionHash": "0xa23d152323f5fedc772959aa3542dea94ac19dddddb1795df5f6b9e657194c70",
    "logs": [
      {
        "transactionIndex": 86,
        "blockNumber": 7375089,
        "transactionHash": "0xa23d152323f5fedc772959aa3542dea94ac19dddddb1795df5f6b9e657194c70",
        "address": "0x3fd37C8Cc82b25E0a221F09Aa1f3957e7b7b715c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f89e3d72f182bbccceffb7f7d2c9ce796d6547e6"
        ],
        "data": "0x",
        "logIndex": 188,
        "blockHash": "0xcafe9b700de93a2f6defbe9b9fb2ae4ed8236e54e737dc30986afc74a0cc766d"
      }
    ],
    "blockNumber": 7375089,
    "cumulativeGasUsed": "27941641",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "b9998a23ca6039613f0dca759c066aa7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"TokenWhitelistedSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"swapPaths\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"swapReversePaths\",\"type\":\"bytes[]\"}],\"name\":\"addTokensToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"removeTokensFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSwapPath\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSwapReversePath\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WhitelistedTokens.sol\":\"WhitelistedTokens\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/WhitelistedTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IService.sol\\\";\\nimport \\\"./interfaces/IWhitelistedTokens.sol\\\";\\n\\ncontract WhitelistedTokens is IWhitelistedTokens, Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet private _tokenWhitelist;\\n\\n    mapping(address => bytes) public tokenSwapPath;\\n\\n    mapping(address => bytes) public tokenSwapReversePath;\\n\\n    event TokenWhitelistedSet(address token, bool whitelisted);\\n\\n    function addTokensToWhitelist(\\n        address[] memory tokens,\\n        bytes[] memory swapPaths,\\n        bytes[] memory swapReversePaths\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            require(_tokenWhitelist.add(tokens[i]), \\\"Already whitelisted\\\");\\n            tokenSwapPath[tokens[i]] = swapPaths[i];\\n            tokenSwapReversePath[tokens[i]] = swapReversePaths[i];\\n            emit TokenWhitelistedSet(tokens[i], true);\\n        }\\n    }\\n\\n    function removeTokensFromWhitelist(address[] memory tokens)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            require(\\n                _tokenWhitelist.remove(tokens[i]),\\n                \\\"Already not whitelisted\\\"\\n            );\\n            emit TokenWhitelistedSet(tokens[i], false);\\n        }\\n    }\\n\\n    function tokenWhitelist()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return _tokenWhitelist.values();\\n    }\\n\\n    function isTokenWhitelisted(address token)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _tokenWhitelist.contains(token);\\n    }\\n}\",\"keccak256\":\"0xaf3648db7c303a39616b6b1fc717b7d94afa60e7bec01fded0af211492db4fad\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IDirectory {\\n    enum ContractType {\\n        None,\\n        Pool,\\n        GovernanceToken,\\n        TGE\\n    }\\n\\n    function addContractRecord(address addr, ContractType contractType)\\n        external\\n        returns (uint256 index);\\n\\n    function addProposalRecord(address pool, uint256 proposalId)\\n        external\\n        returns (uint256 index);\\n\\n    function typeOf(address addr) external view returns (ContractType);\\n}\\n\",\"keccak256\":\"0x39fc90b444e9aefc4e2a3a40b43840dfa44ff13441a9e50d3de9bb95f044bd81\",\"license\":\"MIT\"},\"contracts/interfaces/IMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IMetadata {\\n    enum Status {NotUsed, Used}\\n\\n    struct QueueInfo {\\n        uint256 jurisdiction;\\n        string serialNumber;\\n        string dateOfIncorporation;\\n        string legalAddress;\\n        string taxationStatus;\\n        string registeredName;\\n        Status status;\\n        address owner;\\n    }\\n\\n    function initialize() external;\\n\\n    function lockRecord(uint256 jurisdiction) external returns (uint256);\\n\\n    function getInfo(uint256 id) external view returns (string[5] memory);\\n\\n    function getQueueInfo(uint256 id) external view returns (QueueInfo memory);\\n\\n    function setOwner(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x23b41d34da7eb536d0fb8ba2fe0ea089dc9ca9b5726dccfb0f4e11cf66625050\",\"license\":\"MIT\"},\"contracts/interfaces/IService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\nimport \\\"./IDirectory.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./IMetadata.sol\\\";\\nimport \\\"./IWhitelistedTokens.sol\\\";\\n\\ninterface IService {\\n    // function initialize(\\n    //     IDirectory directory_,\\n    //     address poolBeacon_,\\n    //     address proposalGateway_,\\n    //     address tokenBeacon_,\\n    //     address tgeBeacon_,\\n    //     IMetadata metadata_,\\n    //     uint256 fee_,\\n    //     uint256[3] memory ballotParams,\\n    //     ISwapRouter uniswapRouter_,\\n    //     IQuoter uniswapQuoter_,\\n    //     IWhitelistedTokens whitelistedTokens_\\n    // ) external;\\n\\n    function createSecondaryTGE(ITGE.TGEInfo memory tgeInfo) external;\\n\\n    function addProposal(uint256 proposalId) external;\\n\\n    function directory() external view returns (IDirectory);\\n\\n    // function isTokenWhitelisted(address token) external view returns (bool);\\n\\n    function tokenWhitelist() external view returns (address[] memory);\\n\\n    function owner() external view returns (address);\\n\\n    function proposalGateway() external view returns (address);\\n\\n    function proposalQuorum() external view returns (uint256);\\n\\n    function proposalThreshold() external view returns (uint256);\\n\\n    function uniswapRouter() external view returns (ISwapRouter);\\n\\n    function uniswapQuoter() external view returns (IQuoter);\\n\\n    function whitelistedTokens() external view returns (IWhitelistedTokens);\\n\\n    function metadata() external view returns (IMetadata);\\n\\n    // function tokenSwapPath(address) external view returns (bytes memory);\\n\\n    // function tokenSwapReversePath(address) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x6cf37fd103eb7aa038c76fca9746a5244ca58967273195c7bac4464669322cea\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface ITGE {\\n    struct TGEInfo {\\n        string metadataURI;\\n        uint256 price;\\n        uint256 hardcap;\\n        uint256 softcap;\\n        uint256 minPurchase;\\n        uint256 maxPurchase;\\n        uint256 lockupPercent;\\n        uint256 lockupDuration;\\n        uint256 lockupTVL;\\n        uint256 duration;\\n        address[] userWhitelist;\\n        address unitOfAccount;\\n    }\\n\\n    function initialize(\\n        address owner_,\\n        address token_,\\n        TGEInfo memory info\\n    ) external;\\n\\n    function redeem() external;\\n\\n    function maxPurchaseOf(address account) external view returns (uint256);\\n\\n    enum State {\\n        Active,\\n        Failed,\\n        Successful\\n    }\\n\\n    function state() external view returns (State);\\n}\\n\",\"keccak256\":\"0x32c1ee5dd0dc081a1305a264b21a373de51ff99da7d863d174114eaca7e0a1ef\",\"license\":\"MIT\"},\"contracts/interfaces/IWhitelistedTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IWhitelistedTokens {\\n    function tokenWhitelist() external view returns (address[] memory);\\n\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n\\n    function tokenSwapPath(address) external view returns (bytes memory);\\n\\n    function tokenSwapReversePath(address) external view returns (bytes memory);\\n}\",\"keccak256\":\"0x746c443b0542a134fb619d2db969647bc14dbe5c318089818cf7f738a67c7be1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610da48061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a7ca279f11610066578063a7ca279f146100f9578063b36bb0e31461010c578063b5af090f1461011f578063ca735cc114610142578063f2fde38b1461015757600080fd5b806350eb1c431461009857806363d08dff146100c1578063715018a6146100d45780638da5cb5b146100de575b600080fd5b6100ab6100a636600461094a565b61016a565b6040516100b89190610965565b60405180910390f35b6100ab6100cf36600461094a565b610204565b6100dc61021d565b005b6000546040516001600160a01b0390911681526020016100b8565b6100dc610107366004610b7b565b61025c565b6100dc61011a366004610c03565b61045a565b61013261012d36600461094a565b610588565b60405190151581526020016100b8565b61014a61059b565b6040516100b89190610c40565b6100dc61016536600461094a565b6105ac565b6003602052600090815260409020805461018390610c8d565b80601f01602080910402602001604051908101604052809291908181526020018280546101af90610c8d565b80156101fc5780601f106101d1576101008083540402835291602001916101fc565b820191906000526020600020905b8154815290600101906020018083116101df57829003601f168201915b505050505081565b6004602052600090815260409020805461018390610c8d565b6000546001600160a01b031633146102505760405162461bcd60e51b815260040161024790610cc7565b60405180910390fd5b61025a6000610647565b565b6000546001600160a01b031633146102865760405162461bcd60e51b815260040161024790610cc7565b60005b8351811015610454576102bf8482815181106102a7576102a7610cfc565b6020026020010151600161069790919063ffffffff16565b6103015760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481dda1a5d195b1a5cdd1959606a1b6044820152606401610247565b82818151811061031357610313610cfc565b60200260200101516003600086848151811061033157610331610cfc565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020908051906020019061036c929190610895565b5081818151811061037f5761037f610cfc565b60200260200101516004600086848151811061039d5761039d610cfc565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090805190602001906103d8929190610895565b507f56141cd46fa0d7cb29ad16da2ac6b833fb19832cf2c38b83fcc8333bf9165cc784828151811061040c5761040c610cfc565b6020026020010151600160405161043a9291906001600160a01b039290921682521515602082015260400190565b60405180910390a18061044c81610d28565b915050610289565b50505050565b6000546001600160a01b031633146104845760405162461bcd60e51b815260040161024790610cc7565b60005b8151811015610584576104bd8282815181106104a5576104a5610cfc565b602002602001015160016106b390919063ffffffff16565b6105095760405162461bcd60e51b815260206004820152601760248201527f416c7265616479206e6f742077686974656c69737465640000000000000000006044820152606401610247565b7f56141cd46fa0d7cb29ad16da2ac6b833fb19832cf2c38b83fcc8333bf9165cc782828151811061053c5761053c610cfc565b6020026020010151600060405161056a9291906001600160a01b039290921682521515602082015260400190565b60405180910390a18061057c81610d28565b915050610487565b5050565b60006105956001836106c8565b92915050565b60606105a760016106ea565b905090565b6000546001600160a01b031633146105d65760405162461bcd60e51b815260040161024790610cc7565b6001600160a01b03811661063b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610247565b61064481610647565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006106ac836001600160a01b0384166106f7565b9392505050565b60006106ac836001600160a01b038416610746565b6001600160a01b038116600090815260018301602052604081205415156106ac565b606060006106ac83610839565b600081815260018301602052604081205461073e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610595565b506000610595565b6000818152600183016020526040812054801561082f57600061076a600183610d41565b855490915060009061077e90600190610d41565b90508181146107e357600086600001828154811061079e5761079e610cfc565b90600052602060002001549050808760000184815481106107c1576107c1610cfc565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806107f4576107f4610d58565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610595565b6000915050610595565b60608160000180548060200260200160405190810160405280929190818152602001828054801561088957602002820191906000526020600020905b815481526020019060010190808311610875575b50505050509050919050565b8280546108a190610c8d565b90600052602060002090601f0160209004810192826108c35760008555610909565b82601f106108dc57805160ff1916838001178555610909565b82800160010185558215610909579182015b828111156109095782518255916020019190600101906108ee565b50610915929150610919565b5090565b5b80821115610915576000815560010161091a565b80356001600160a01b038116811461094557600080fd5b919050565b60006020828403121561095c57600080fd5b6106ac8261092e565b600060208083528351808285015260005b8181101561099257858101830151858201604001528201610976565b818111156109a4576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156109f9576109f96109ba565b604052919050565b600067ffffffffffffffff821115610a1b57610a1b6109ba565b5060051b60200190565b600082601f830112610a3657600080fd5b81356020610a4b610a4683610a01565b6109d0565b82815260059290921b84018101918181019086841115610a6a57600080fd5b8286015b84811015610a8c57610a7f8161092e565b8352918301918301610a6e565b509695505050505050565b6000601f8381840112610aa957600080fd5b82356020610ab9610a4683610a01565b82815260059290921b85018101918181019087841115610ad857600080fd5b8287015b84811015610b6f57803567ffffffffffffffff80821115610afd5760008081fd5b818a0191508a603f830112610b125760008081fd5b85820135604082821115610b2857610b286109ba565b610b39828b01601f191689016109d0565b92508183528c81838601011115610b505760008081fd5b8181850189850137506000908201870152845250918301918301610adc565b50979650505050505050565b600080600060608486031215610b9057600080fd5b833567ffffffffffffffff80821115610ba857600080fd5b610bb487838801610a25565b94506020860135915080821115610bca57600080fd5b610bd687838801610a97565b93506040860135915080821115610bec57600080fd5b50610bf986828701610a97565b9150509250925092565b600060208284031215610c1557600080fd5b813567ffffffffffffffff811115610c2c57600080fd5b610c3884828501610a25565b949350505050565b6020808252825182820181905260009190848201906040850190845b81811015610c815783516001600160a01b031683529284019291840191600101610c5c565b50909695505050505050565b600181811c90821680610ca157607f821691505b602082108103610cc157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610d3a57610d3a610d12565b5060010190565b600082821015610d5357610d53610d12565b500390565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220853978c4183ba897481fa40d1527606fc28f014af5fcb23c6dd99411d5e6723b64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063a7ca279f11610066578063a7ca279f146100f9578063b36bb0e31461010c578063b5af090f1461011f578063ca735cc114610142578063f2fde38b1461015757600080fd5b806350eb1c431461009857806363d08dff146100c1578063715018a6146100d45780638da5cb5b146100de575b600080fd5b6100ab6100a636600461094a565b61016a565b6040516100b89190610965565b60405180910390f35b6100ab6100cf36600461094a565b610204565b6100dc61021d565b005b6000546040516001600160a01b0390911681526020016100b8565b6100dc610107366004610b7b565b61025c565b6100dc61011a366004610c03565b61045a565b61013261012d36600461094a565b610588565b60405190151581526020016100b8565b61014a61059b565b6040516100b89190610c40565b6100dc61016536600461094a565b6105ac565b6003602052600090815260409020805461018390610c8d565b80601f01602080910402602001604051908101604052809291908181526020018280546101af90610c8d565b80156101fc5780601f106101d1576101008083540402835291602001916101fc565b820191906000526020600020905b8154815290600101906020018083116101df57829003601f168201915b505050505081565b6004602052600090815260409020805461018390610c8d565b6000546001600160a01b031633146102505760405162461bcd60e51b815260040161024790610cc7565b60405180910390fd5b61025a6000610647565b565b6000546001600160a01b031633146102865760405162461bcd60e51b815260040161024790610cc7565b60005b8351811015610454576102bf8482815181106102a7576102a7610cfc565b6020026020010151600161069790919063ffffffff16565b6103015760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481dda1a5d195b1a5cdd1959606a1b6044820152606401610247565b82818151811061031357610313610cfc565b60200260200101516003600086848151811061033157610331610cfc565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020908051906020019061036c929190610895565b5081818151811061037f5761037f610cfc565b60200260200101516004600086848151811061039d5761039d610cfc565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090805190602001906103d8929190610895565b507f56141cd46fa0d7cb29ad16da2ac6b833fb19832cf2c38b83fcc8333bf9165cc784828151811061040c5761040c610cfc565b6020026020010151600160405161043a9291906001600160a01b039290921682521515602082015260400190565b60405180910390a18061044c81610d28565b915050610289565b50505050565b6000546001600160a01b031633146104845760405162461bcd60e51b815260040161024790610cc7565b60005b8151811015610584576104bd8282815181106104a5576104a5610cfc565b602002602001015160016106b390919063ffffffff16565b6105095760405162461bcd60e51b815260206004820152601760248201527f416c7265616479206e6f742077686974656c69737465640000000000000000006044820152606401610247565b7f56141cd46fa0d7cb29ad16da2ac6b833fb19832cf2c38b83fcc8333bf9165cc782828151811061053c5761053c610cfc565b6020026020010151600060405161056a9291906001600160a01b039290921682521515602082015260400190565b60405180910390a18061057c81610d28565b915050610487565b5050565b60006105956001836106c8565b92915050565b60606105a760016106ea565b905090565b6000546001600160a01b031633146105d65760405162461bcd60e51b815260040161024790610cc7565b6001600160a01b03811661063b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610247565b61064481610647565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006106ac836001600160a01b0384166106f7565b9392505050565b60006106ac836001600160a01b038416610746565b6001600160a01b038116600090815260018301602052604081205415156106ac565b606060006106ac83610839565b600081815260018301602052604081205461073e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610595565b506000610595565b6000818152600183016020526040812054801561082f57600061076a600183610d41565b855490915060009061077e90600190610d41565b90508181146107e357600086600001828154811061079e5761079e610cfc565b90600052602060002001549050808760000184815481106107c1576107c1610cfc565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806107f4576107f4610d58565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610595565b6000915050610595565b60608160000180548060200260200160405190810160405280929190818152602001828054801561088957602002820191906000526020600020905b815481526020019060010190808311610875575b50505050509050919050565b8280546108a190610c8d565b90600052602060002090601f0160209004810192826108c35760008555610909565b82601f106108dc57805160ff1916838001178555610909565b82800160010185558215610909579182015b828111156109095782518255916020019190600101906108ee565b50610915929150610919565b5090565b5b80821115610915576000815560010161091a565b80356001600160a01b038116811461094557600080fd5b919050565b60006020828403121561095c57600080fd5b6106ac8261092e565b600060208083528351808285015260005b8181101561099257858101830151858201604001528201610976565b818111156109a4576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156109f9576109f96109ba565b604052919050565b600067ffffffffffffffff821115610a1b57610a1b6109ba565b5060051b60200190565b600082601f830112610a3657600080fd5b81356020610a4b610a4683610a01565b6109d0565b82815260059290921b84018101918181019086841115610a6a57600080fd5b8286015b84811015610a8c57610a7f8161092e565b8352918301918301610a6e565b509695505050505050565b6000601f8381840112610aa957600080fd5b82356020610ab9610a4683610a01565b82815260059290921b85018101918181019087841115610ad857600080fd5b8287015b84811015610b6f57803567ffffffffffffffff80821115610afd5760008081fd5b818a0191508a603f830112610b125760008081fd5b85820135604082821115610b2857610b286109ba565b610b39828b01601f191689016109d0565b92508183528c81838601011115610b505760008081fd5b8181850189850137506000908201870152845250918301918301610adc565b50979650505050505050565b600080600060608486031215610b9057600080fd5b833567ffffffffffffffff80821115610ba857600080fd5b610bb487838801610a25565b94506020860135915080821115610bca57600080fd5b610bd687838801610a97565b93506040860135915080821115610bec57600080fd5b50610bf986828701610a97565b9150509250925092565b600060208284031215610c1557600080fd5b813567ffffffffffffffff811115610c2c57600080fd5b610c3884828501610a25565b949350505050565b6020808252825182820181905260009190848201906040850190845b81811015610c815783516001600160a01b031683529284019291840191600101610c5c565b50909695505050505050565b600181811c90821680610ca157607f821691505b602082108103610cc157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610d3a57610d3a610d12565b5060010190565b600082821015610d5357610d53610d12565b500390565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220853978c4183ba897481fa40d1527606fc28f014af5fcb23c6dd99411d5e6723b64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4403,
        "contract": "contracts/WhitelistedTokens.sol:WhitelistedTokens",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10916,
        "contract": "contracts/WhitelistedTokens.sol:WhitelistedTokens",
        "label": "_tokenWhitelist",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)6898_storage"
      },
      {
        "astId": 10920,
        "contract": "contracts/WhitelistedTokens.sol:WhitelistedTokens",
        "label": "tokenSwapPath",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bytes_storage)"
      },
      {
        "astId": 10924,
        "contract": "contracts/WhitelistedTokens.sol:WhitelistedTokens",
        "label": "tokenSwapReversePath",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)6898_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6897,
            "contract": "contracts/WhitelistedTokens.sol:WhitelistedTokens",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6597_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)6597_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6592,
            "contract": "contracts/WhitelistedTokens.sol:WhitelistedTokens",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6596,
            "contract": "contracts/WhitelistedTokens.sol:WhitelistedTokens",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}