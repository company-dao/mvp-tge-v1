{
  "address": "0xcDaCdf01228424E6796f60A99197bb6C962C8a7d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jurisdiction",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "serialNumber",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "dateOfIncorporation",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "legalAddress",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "taxationStatus",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "registeredName",
          "type": "string"
        }
      ],
      "name": "RecordCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "RecordDeleted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jurisdiction",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "serialNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dateOfIncorporation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "legalAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "taxationStatus",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "registeredName",
          "type": "string"
        }
      ],
      "name": "createRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "deleteRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getInfo",
      "outputs": [
        {
          "internalType": "string[5]",
          "name": "",
          "type": "string[5]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getQueueInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "jurisdiction",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "serialNumber",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dateOfIncorporation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "legalAddress",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "taxationStatus",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "registeredName",
              "type": "string"
            },
            {
              "internalType": "enum IMetadata.Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct IMetadata.QueueInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jurisdiction",
          "type": "uint256"
        }
      ],
      "name": "jurisdictionAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jurisdiction",
          "type": "uint256"
        }
      ],
      "name": "lockRecord",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "queueInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "jurisdiction",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "serialNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dateOfIncorporation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "legalAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "taxationStatus",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "registeredName",
          "type": "string"
        },
        {
          "internalType": "enum IMetadata.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "service",
      "outputs": [
        {
          "internalType": "contract IService",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "service_",
          "type": "address"
        }
      ],
      "name": "setService",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d8cab0ee651d8de39454d5ff2d04c7958ab13eee2929c61688d0fc149ffd32f",
  "receipt": {
    "to": null,
    "from": "0xF89e3d72F182BBcccEfFB7F7d2c9ce796D6547e6",
    "contractAddress": "0xcDaCdf01228424E6796f60A99197bb6C962C8a7d",
    "transactionIndex": 1,
    "gasUsed": "1689914",
    "logsBloom": "0x
    "blockHash": "0x04e4197d173e1b5b3179a89b5d4517dab5f74ded66712eb503077e870d472401",
    "transactionHash": "0x6d8cab0ee651d8de39454d5ff2d04c7958ab13eee2929c61688d0fc149ffd32f",
    "logs": [],
    "blockNumber": 7375938,
    "cumulativeGasUsed": "1828362",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "997243aed0f6d9a9bf25071fa8e11a98",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"serialNumber\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dateOfIncorporation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"legalAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"taxationStatus\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"registeredName\",\"type\":\"string\"}],\"name\":\"RecordCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RecordDeleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"serialNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dateOfIncorporation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"legalAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"taxationStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"registeredName\",\"type\":\"string\"}],\"name\":\"createRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"deleteRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"string[5]\",\"name\":\"\",\"type\":\"string[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getQueueInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"serialNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dateOfIncorporation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"legalAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"taxationStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"registeredName\",\"type\":\"string\"},{\"internalType\":\"enum IMetadata.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct IMetadata.QueueInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"}],\"name\":\"jurisdictionAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"}],\"name\":\"lockRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"queueInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"serialNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dateOfIncorporation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"legalAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"taxationStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"registeredName\",\"type\":\"string\"},{\"internalType\":\"enum IMetadata.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"service\",\"outputs\":[{\"internalType\":\"contract IService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service_\",\"type\":\"address\"}],\"name\":\"setService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Metadata.sol\":\"Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IService.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IMetadata.sol\\\";\\n\\ncontract Metadata is IMetadata, OwnableUpgradeable {\\n    IService public service;\\n\\n    uint256 public currentId;\\n\\n    mapping(uint256 => QueueInfo) public queueInfo;\\n\\n    // EVENTS\\n\\n    event RecordCreated(\\n        uint256 id, \\n        uint256 jurisdiction, \\n        string serialNumber, \\n        string dateOfIncorporation, \\n        string legalAddress, \\n        string taxationStatus, \\n        string registeredName\\n    );\\n\\n    event RecordDeleted(uint256 id);\\n\\n    function initialize() external initializer {\\n        __Ownable_init();\\n        currentId = 1;\\n    }\\n\\n    function setService(address service_) external onlyOwner {\\n        service = IService(service_);\\n    }\\n\\n    function createRecord(\\n        uint256 jurisdiction, \\n        string memory serialNumber, \\n        string memory dateOfIncorporation, \\n        string memory legalAddress, \\n        string memory taxationStatus, \\n        string memory registeredName\\n    ) external onlyOwner {\\n        require(\\n            (jurisdiction > 0) && (bytes(serialNumber).length != 0), \\n            \\\"Invalid jurisdiction or serialNumber\\\"\\n        );\\n\\n        for (uint256 i = 0; i < currentId; i++) {\\n            require(\\n                queueInfo[i].jurisdiction != jurisdiction || \\n                (\\n                    queueInfo[i].jurisdiction == jurisdiction && \\n                    keccak256(abi.encodePacked(queueInfo[i].serialNumber)) != keccak256(abi.encodePacked(serialNumber))\\n                ),\\n                \\\"jurisdiction must have different serial numbers\\\"\\n            );\\n        }\\n\\n        queueInfo[currentId] = QueueInfo({\\n            jurisdiction: jurisdiction, \\n            serialNumber: serialNumber, \\n            dateOfIncorporation: dateOfIncorporation, \\n            legalAddress: legalAddress, \\n            taxationStatus: taxationStatus, \\n            registeredName: registeredName,\\n            status: Status.NotUsed, \\n            owner: address(0)});\\n        emit RecordCreated(currentId, jurisdiction, serialNumber, dateOfIncorporation, legalAddress, taxationStatus, registeredName);\\n        currentId += 1;\\n    }\\n\\n    function lockRecord(uint256 jurisdiction) external onlyService returns (uint256) {\\n        for (uint256 i = 0; i <= currentId; i++) {\\n            if (queueInfo[i].jurisdiction == jurisdiction && (queueInfo[i].status == Status.NotUsed)) {\\n                queueInfo[i].status = Status.Used;\\n                return i; // queueInfo[i].serialNumber;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function setOwner(uint256 id, address owner) external onlyService {\\n        queueInfo[id].owner = owner;\\n    }\\n\\n    function deleteRecord(uint256 id) external onlyOwner {\\n        require(\\n            queueInfo[id].status == Status.NotUsed, \\n            \\\"Record is in use\\\"\\n        );\\n\\n        delete queueInfo[id];\\n        emit RecordDeleted(id);\\n    }\\n\\n    function getInfo(uint256 id) external view returns (string[5] memory) {\\n        return [\\n            queueInfo[id].serialNumber, \\n            queueInfo[id].dateOfIncorporation, \\n            queueInfo[id].legalAddress, \\n            queueInfo[id].taxationStatus, \\n            queueInfo[id].registeredName \\n        ];\\n    }\\n\\n    function getQueueInfo(uint256 id) external view returns (QueueInfo memory) {\\n        return queueInfo[id];\\n    }\\n\\n    /*\\n        returns 0 if there are no available companies\\n        returns 1 if there are no available companies in current jurisdiction, but exists in other jurisdiction\\n        returns 2 if there are available companies in current jurisdiction \\n    */\\n    function jurisdictionAvailable(uint256 jurisdiction) external view returns (uint256) {\\n        uint256 flag = 0;\\n        for (uint256 i = 0; i < currentId; i++) {\\n            if (queueInfo[i].jurisdiction != jurisdiction && (queueInfo[i].status == Status.NotUsed)) {\\n                flag = 1;\\n            }\\n\\n            if (queueInfo[i].jurisdiction == jurisdiction && (queueInfo[i].status == Status.NotUsed)) {\\n                return 2;\\n            }\\n        }\\n\\n        return flag;\\n    }\\n\\n    modifier onlyService() {\\n        require(msg.sender == address(service), \\\"Not service\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdd96090a90571975f3518013219427272dcbbcc891853a9e1f59f9358958cbce\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IDirectory {\\n    enum ContractType {\\n        None,\\n        Pool,\\n        GovernanceToken,\\n        TGE\\n    }\\n\\n    function addContractRecord(address addr, ContractType contractType)\\n        external\\n        returns (uint256 index);\\n\\n    function addProposalRecord(address pool, uint256 proposalId)\\n        external\\n        returns (uint256 index);\\n\\n    function typeOf(address addr) external view returns (ContractType);\\n}\\n\",\"keccak256\":\"0x39fc90b444e9aefc4e2a3a40b43840dfa44ff13441a9e50d3de9bb95f044bd81\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./IService.sol\\\";\\n\\ninterface IGovernanceToken is IERC20Upgradeable {\\n    struct TokenInfo {\\n        string name;\\n        string symbol;\\n        uint256 cap;\\n    }\\n\\n    function initialize(address pool_, TokenInfo memory info) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function lock(\\n        address account,\\n        uint256 amount,\\n        uint256 deadline\\n    ) external;\\n\\n    function cap() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function service() external view returns (IService);\\n}\\n\",\"keccak256\":\"0x7ab5e082a0b9d346827f0737d19904b5ff18b9fdb91fe676675e92c8a60afffc\",\"license\":\"MIT\"},\"contracts/interfaces/IMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IMetadata {\\n    enum Status {NotUsed, Used}\\n\\n    struct QueueInfo {\\n        uint256 jurisdiction;\\n        string serialNumber;\\n        string dateOfIncorporation;\\n        string legalAddress;\\n        string taxationStatus;\\n        string registeredName;\\n        Status status;\\n        address owner;\\n    }\\n\\n    function initialize() external;\\n\\n    function lockRecord(uint256 jurisdiction) external returns (uint256);\\n\\n    function getInfo(uint256 id) external view returns (string[5] memory);\\n\\n    function getQueueInfo(uint256 id) external view returns (QueueInfo memory);\\n\\n    function setOwner(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x23b41d34da7eb536d0fb8ba2fe0ea089dc9ca9b5726dccfb0f4e11cf66625050\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IService.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./IGovernanceToken.sol\\\";\\n\\ninterface IPool {\\n    function initialize(\\n        address poolCreator_, \\n        uint256 jurisdiction_, \\n        string memory poolEIN_, \\n        string memory dateOfIncorporation, \\n        string memory legalAddress, \\n        string memory taxationStatus, \\n        string memory registeredName, \\n        uint256 ballotQuorumThreshold_, \\n        uint256 ballotDecisionThreshold_, \\n        uint256 ballotLifespan_, \\n        string memory trademark\\n    ) external;\\n\\n    function setToken(address token_) external;\\n\\n    function setTGE(address tge_) external;\\n\\n    function setGovernanceSettings(\\n        uint256 ballotQuorumThreshold_, \\n        uint256 ballotDecisionThreshold_, \\n        uint256 ballotLifespan_\\n    ) external;\\n\\n    function proposeSingleAction(\\n        address target,\\n        uint256 value,\\n        bytes memory cd,\\n        string memory description\\n    ) external returns (uint256 proposalId);\\n\\n    function getTVL() external returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function service() external view returns (IService);\\n\\n    function token() external view returns (IGovernanceToken);\\n\\n    function tge() external view returns (ITGE);\\n\\n    function getPoolTrademark() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95d6f96a3615373e47e7673db24f34ef773e693aae1bf2a746ae26d42e5c84bb\",\"license\":\"MIT\"},\"contracts/interfaces/IService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\nimport \\\"./IDirectory.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./IMetadata.sol\\\";\\nimport \\\"./IWhitelistedTokens.sol\\\";\\n\\ninterface IService {\\n    // function initialize(\\n    //     IDirectory directory_,\\n    //     address poolBeacon_,\\n    //     address proposalGateway_,\\n    //     address tokenBeacon_,\\n    //     address tgeBeacon_,\\n    //     IMetadata metadata_,\\n    //     uint256 fee_,\\n    //     uint256[3] memory ballotParams,\\n    //     ISwapRouter uniswapRouter_,\\n    //     IQuoter uniswapQuoter_,\\n    //     IWhitelistedTokens whitelistedTokens_\\n    // ) external;\\n\\n    function createSecondaryTGE(ITGE.TGEInfo memory tgeInfo) external;\\n\\n    function addProposal(uint256 proposalId) external;\\n\\n    function directory() external view returns (IDirectory);\\n\\n    // function isTokenWhitelisted(address token) external view returns (bool);\\n\\n    function tokenWhitelist() external view returns (address[] memory);\\n\\n    function owner() external view returns (address);\\n\\n    function proposalGateway() external view returns (address);\\n\\n    function proposalQuorum() external view returns (uint256);\\n\\n    function proposalThreshold() external view returns (uint256);\\n\\n    function uniswapRouter() external view returns (ISwapRouter);\\n\\n    function uniswapQuoter() external view returns (IQuoter);\\n\\n    function whitelistedTokens() external view returns (IWhitelistedTokens);\\n\\n    function metadata() external view returns (IMetadata);\\n\\n    // function tokenSwapPath(address) external view returns (bytes memory);\\n\\n    // function tokenSwapReversePath(address) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x6cf37fd103eb7aa038c76fca9746a5244ca58967273195c7bac4464669322cea\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface ITGE {\\n    struct TGEInfo {\\n        string metadataURI;\\n        uint256 price;\\n        uint256 hardcap;\\n        uint256 softcap;\\n        uint256 minPurchase;\\n        uint256 maxPurchase;\\n        uint256 lockupPercent;\\n        uint256 lockupDuration;\\n        uint256 lockupTVL;\\n        uint256 duration;\\n        address[] userWhitelist;\\n        address unitOfAccount;\\n    }\\n\\n    function initialize(\\n        address owner_,\\n        address token_,\\n        TGEInfo memory info\\n    ) external;\\n\\n    function redeem() external;\\n\\n    function maxPurchaseOf(address account) external view returns (uint256);\\n\\n    enum State {\\n        Active,\\n        Failed,\\n        Successful\\n    }\\n\\n    function state() external view returns (State);\\n}\\n\",\"keccak256\":\"0x32c1ee5dd0dc081a1305a264b21a373de51ff99da7d863d174114eaca7e0a1ef\",\"license\":\"MIT\"},\"contracts/interfaces/IWhitelistedTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IWhitelistedTokens {\\n    function tokenWhitelist() external view returns (address[] memory);\\n\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n\\n    function tokenSwapPath(address) external view returns (bytes memory);\\n\\n    function tokenSwapReversePath(address) external view returns (bytes memory);\\n}\",\"keccak256\":\"0x746c443b0542a134fb619d2db969647bc14dbe5c318089818cf7f738a67c7be1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80637fd3924711610097578063d598d4c911610066578063d598d4c91461020a578063dbcb0bc91461021d578063e00dd16114610230578063f2fde38b1461023957600080fd5b80637fd39247146101b75780638129fc1c146101ca5780638da5cb5b146101d2578063bf8bdac1146101f757600080fd5b80631a3cd59a116100d35780631a3cd59a146101485780634bedf3691461016857806352211b4614610188578063715018a6146101af57600080fd5b8063061f9811146100fa5780630ca3d0fb1461010f5780630d602f1514610135575b600080fd5b61010d61010836600461169e565b61024c565b005b61012261011d36600461169e565b610385565b6040519081526020015b60405180910390f35b61010d61014336600461175a565b610460565b61015b61015636600461169e565b6107ac565b60405161012c9190611890565b61017b61017636600461169e565b610af8565b60405161012c9190611915565b61019b61019636600461169e565b610e55565b60405161012c9897969594939291906119e7565b61010d61114c565b61010d6101c5366004611a96565b611182565b61010d611202565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161012c565b61010d610205366004611ac2565b611278565b6065546101df906001600160a01b031681565b61012261022b36600461169e565b6112c4565b61012260665481565b61010d610247366004611ac2565b611386565b6033546001600160a01b0316331461027f5760405162461bcd60e51b815260040161027690611ae4565b60405180910390fd5b60008181526067602052604081206006015460ff1660018111156102a5576102a56118dd565b146102e55760405162461bcd60e51b815260206004820152601060248201526f5265636f726420697320696e2075736560801b6044820152606401610276565b600081815260676020526040812081815590610304600183018261154e565b61031260028301600061154e565b61032060038301600061154e565b61032e60048301600061154e565b61033c60058301600061154e565b5060060180546001600160a81b03191690556040518181527fb88d8be2c9fe5e1ef7087e07e8a84d625e33292845de220553103e7d540ada0c906020015b60405180910390a150565b6065546000906001600160a01b031633146103d05760405162461bcd60e51b815260206004820152600b60248201526a4e6f74207365727669636560a81b6044820152606401610276565b60005b6066548111610455576000818152606760205260409020548314801561041c575060008181526067602052604081206006015460ff16600181111561041a5761041a6118dd565b145b15610443576000818152606760205260409020600601805460ff1916600117905592915050565b8061044d81611b2f565b9150506103d3565b50600090505b919050565b6033546001600160a01b0316331461048a5760405162461bcd60e51b815260040161027690611ae4565b60008611801561049a5750845115155b6104f25760405162461bcd60e51b8152602060048201526024808201527f496e76616c6964206a7572697364696374696f6e206f722073657269616c4e7560448201526336b132b960e11b6064820152608401610276565b60005b606654811015610604576000818152606760205260409020548714158061058e57506000818152606760205260409020548714801561058e5750856040516020016105409190611b48565b60408051601f198184030181528282528051602091820120600085815260678352929092209192610575926001019101611b9e565b6040516020818303038152906040528051906020012014155b6105f25760405162461bcd60e51b815260206004820152602f60248201527f6a7572697364696374696f6e206d757374206861766520646966666572656e7460448201526e2073657269616c206e756d6265727360881b6064820152608401610276565b806105fc81611b2f565b9150506104f5565b5060405180610100016040528087815260200186815260200185815260200184815260200183815260200182815260200160006001811115610648576106486118dd565b8152600060209182018190526066548152606782526040902082518155828201518051919261067f92600185019290910190611588565b506040820151805161069b916002840191602090910190611588565b50606082015180516106b7916003840191602090910190611588565b50608082015180516106d3916004840191602090910190611588565b5060a082015180516106ef916005840191602090910190611588565b5060c082015160068201805460ff191660018381811115610712576107126118dd565b021790555060e09190910151600690910180546001600160a01b0390921661010002610100600160a81b03199092169190911790556066546040517f1a642a202970c59e33f6b49e26f01883125b735c83df6eb7aa253c9c484895cd9161078491899089908990899089908990611c39565b60405180910390a160016066600082825461079f9190611cb4565b9091555050505050505050565b6107b461160c565b6040518060a001604052806067600085815260200190815260200160002060010180546107e090611b64565b80601f016020809104026020016040519081016040528092919081815260200182805461080c90611b64565b80156108595780601f1061082e57610100808354040283529160200191610859565b820191906000526020600020905b81548152906001019060200180831161083c57829003601f168201915b5050505050815260200160676000858152602001908152602001600020600201805461088490611b64565b80601f01602080910402602001604051908101604052809291908181526020018280546108b090611b64565b80156108fd5780601f106108d2576101008083540402835291602001916108fd565b820191906000526020600020905b8154815290600101906020018083116108e057829003601f168201915b5050505050815260200160676000858152602001908152602001600020600301805461092890611b64565b80601f016020809104026020016040519081016040528092919081815260200182805461095490611b64565b80156109a15780601f10610976576101008083540402835291602001916109a1565b820191906000526020600020905b81548152906001019060200180831161098457829003601f168201915b505050505081526020016067600085815260200190815260200160002060040180546109cc90611b64565b80601f01602080910402602001604051908101604052809291908181526020018280546109f890611b64565b8015610a455780601f10610a1a57610100808354040283529160200191610a45565b820191906000526020600020905b815481529060010190602001808311610a2857829003601f168201915b50505050508152602001606760008581526020019081526020016000206005018054610a7090611b64565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9c90611b64565b8015610ae95780601f10610abe57610100808354040283529160200191610ae9565b820191906000526020600020905b815481529060010190602001808311610acc57829003601f168201915b50505050508152509050919050565b610b00611633565b606760008381526020019081526020016000206040518061010001604052908160008201548152602001600182018054610b3990611b64565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6590611b64565b8015610bb25780601f10610b8757610100808354040283529160200191610bb2565b820191906000526020600020905b815481529060010190602001808311610b9557829003601f168201915b50505050508152602001600282018054610bcb90611b64565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf790611b64565b8015610c445780601f10610c1957610100808354040283529160200191610c44565b820191906000526020600020905b815481529060010190602001808311610c2757829003601f168201915b50505050508152602001600382018054610c5d90611b64565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8990611b64565b8015610cd65780601f10610cab57610100808354040283529160200191610cd6565b820191906000526020600020905b815481529060010190602001808311610cb957829003601f168201915b50505050508152602001600482018054610cef90611b64565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1b90611b64565b8015610d685780601f10610d3d57610100808354040283529160200191610d68565b820191906000526020600020905b815481529060010190602001808311610d4b57829003601f168201915b50505050508152602001600582018054610d8190611b64565b80601f0160208091040260200160405190810160405280929190818152602001828054610dad90611b64565b8015610dfa5780601f10610dcf57610100808354040283529160200191610dfa565b820191906000526020600020905b815481529060010190602001808311610ddd57829003601f168201915b5050509183525050600682015460209091019060ff166001811115610e2157610e216118dd565b6001811115610e3257610e326118dd565b81526006919091015461010090046001600160a01b031660209091015292915050565b60676020526000908152604090208054600182018054919291610e7790611b64565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea390611b64565b8015610ef05780601f10610ec557610100808354040283529160200191610ef0565b820191906000526020600020905b815481529060010190602001808311610ed357829003601f168201915b505050505090806002018054610f0590611b64565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3190611b64565b8015610f7e5780601f10610f5357610100808354040283529160200191610f7e565b820191906000526020600020905b815481529060010190602001808311610f6157829003601f168201915b505050505090806003018054610f9390611b64565b80601f0160208091040260200160405190810160405280929190818152602001828054610fbf90611b64565b801561100c5780601f10610fe15761010080835404028352916020019161100c565b820191906000526020600020905b815481529060010190602001808311610fef57829003601f168201915b50505050509080600401805461102190611b64565b80601f016020809104026020016040519081016040528092919081815260200182805461104d90611b64565b801561109a5780601f1061106f5761010080835404028352916020019161109a565b820191906000526020600020905b81548152906001019060200180831161107d57829003601f168201915b5050505050908060050180546110af90611b64565b80601f01602080910402602001604051908101604052809291908181526020018280546110db90611b64565b80156111285780601f106110fd57610100808354040283529160200191611128565b820191906000526020600020905b81548152906001019060200180831161110b57829003601f168201915b5050506006909301549192505060ff8116906001600160a01b036101009091041688565b6033546001600160a01b031633146111765760405162461bcd60e51b815260040161027690611ae4565b611180600061141a565b565b6065546001600160a01b031633146111ca5760405162461bcd60e51b815260206004820152600b60248201526a4e6f74207365727669636560a81b6044820152606401610276565b60009182526067602052604090912060060180546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600061120e600161146c565b90508015611226576000805461ff0019166101001790555b61122e6114f4565b60016066558015611275576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200161037a565b50565b6033546001600160a01b031633146112a25760405162461bcd60e51b815260040161027690611ae4565b606580546001600160a01b0319166001600160a01b0392909216919091179055565b600080805b60665481101561137f576000818152606760205260409020548414801590611314575060008181526067602052604081206006015460ff166001811115611312576113126118dd565b145b1561131e57600191505b6000818152606760205260409020548414801561135e575060008181526067602052604081206006015460ff16600181111561135c5761135c6118dd565b145b1561136d575060029392505050565b8061137781611b2f565b9150506112c9565b5092915050565b6033546001600160a01b031633146113b05760405162461bcd60e51b815260040161027690611ae4565b6001600160a01b0381166114155760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610276565b611275815b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff16156114b3578160ff16600114801561148f5750303b155b6114ab5760405162461bcd60e51b815260040161027690611ccc565b506000919050565b60005460ff8084169116106114da5760405162461bcd60e51b815260040161027690611ccc565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff1661151b5760405162461bcd60e51b815260040161027690611d1a565b611180600054610100900460ff166115455760405162461bcd60e51b815260040161027690611d1a565b6111803361141a565b50805461155a90611b64565b6000825580601f1061156a575050565b601f0160209004906000526020600020908101906112759190611689565b82805461159490611b64565b90600052602060002090601f0160209004810192826115b657600085556115fc565b82601f106115cf57805160ff19168380011785556115fc565b828001600101855582156115fc579182015b828111156115fc5782518255916020019190600101906115e1565b50611608929150611689565b5090565b6040518060a001604052806005905b606081526020019060019003908161161b5790505090565b6040518061010001604052806000815260200160608152602001606081526020016060815260200160608152602001606081526020016000600181111561167c5761167c6118dd565b8152600060209091015290565b5b80821115611608576000815560010161168a565b6000602082840312156116b057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126116de57600080fd5b813567ffffffffffffffff808211156116f9576116f96116b7565b604051601f8301601f19908116603f01168101908282118183101715611721576117216116b7565b8160405283815286602085880101111561173a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c0878903121561177357600080fd5b86359550602087013567ffffffffffffffff8082111561179257600080fd5b61179e8a838b016116cd565b965060408901359150808211156117b457600080fd5b6117c08a838b016116cd565b955060608901359150808211156117d657600080fd5b6117e28a838b016116cd565b945060808901359150808211156117f857600080fd5b6118048a838b016116cd565b935060a089013591508082111561181a57600080fd5b5061182789828a016116cd565b9150509295509295509295565b60005b8381101561184f578181015183820152602001611837565b8381111561185e576000848401525b50505050565b6000815180845261187c816020860160208601611834565b601f01601f19169290920160200192915050565b602080825260009060c0830183820185845b60058110156118d157601f198785030183526118bf848351611864565b935091840191908401906001016118a2565b50919695505050505050565b634e487b7160e01b600052602160045260246000fd5b6002811061191157634e487b7160e01b600052602160045260246000fd5b9052565b60208152815160208201526000602083015161010080604085015261193e610120850183611864565b91506040850151601f198086850301606087015261195c8483611864565b935060608701519150808685030160808701526119798483611864565b935060808701519150808685030160a08701526119968483611864565b935060a08701519150808685030160c0870152506119b48382611864565b92505060c08501516119c960e08601826118f3565b5060e08501516001600160a01b038116858301525090949350505050565b60006101008a8352806020840152611a018184018b611864565b90508281036040840152611a15818a611864565b90508281036060840152611a298189611864565b90508281036080840152611a3d8188611864565b905082810360a0840152611a518187611864565b915050611a6160c08301856118f3565b6001600160a01b039290921660e09190910152979650505050505050565b80356001600160a01b038116811461045b57600080fd5b60008060408385031215611aa957600080fd5b82359150611ab960208401611a7f565b90509250929050565b600060208284031215611ad457600080fd5b611add82611a7f565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600060018201611b4157611b41611b19565b5060010190565b60008251611b5a818460208701611834565b9190910192915050565b600181811c90821680611b7857607f821691505b602082108103611b9857634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c915080831680611bba57607f831692505b60208084108203611bd957634e487b7160e01b86526022600452602486fd5b818015611bed5760018114611bfe57611c2b565b60ff19861689528489019650611c2b565b60008a81526020902060005b86811015611c235781548b820152908501908301611c0a565b505084890196505b509498975050505050505050565b87815286602082015260e060408201526000611c5860e0830188611864565b8281036060840152611c6a8188611864565b90508281036080840152611c7e8187611864565b905082810360a0840152611c928186611864565b905082810360c0840152611ca68185611864565b9a9950505050505050505050565b60008219821115611cc757611cc7611b19565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220d39063a231e3ad55bef55c31f5538098fc4eac42ea379b6116015cf66fe6763964736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 208,
        "contract": "contracts/Metadata.sol:Metadata",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 211,
        "contract": "contracts/Metadata.sol:Metadata",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2536,
        "contract": "contracts/Metadata.sol:Metadata",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Metadata.sol:Metadata",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Metadata.sol:Metadata",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7917,
        "contract": "contracts/Metadata.sol:Metadata",
        "label": "service",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IService)11842"
      },
      {
        "astId": 7919,
        "contract": "contracts/Metadata.sol:Metadata",
        "label": "currentId",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 7924,
        "contract": "contracts/Metadata.sol:Metadata",
        "label": "queueInfo",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_struct(QueueInfo)11635_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IService)11842": {
        "encoding": "inplace",
        "label": "contract IService",
        "numberOfBytes": "20"
      },
      "t_enum(Status)11617": {
        "encoding": "inplace",
        "label": "enum IMetadata.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(QueueInfo)11635_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IMetadata.QueueInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(QueueInfo)11635_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(QueueInfo)11635_storage": {
        "encoding": "inplace",
        "label": "struct IMetadata.QueueInfo",
        "members": [
          {
            "astId": 11619,
            "contract": "contracts/Metadata.sol:Metadata",
            "label": "jurisdiction",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11621,
            "contract": "contracts/Metadata.sol:Metadata",
            "label": "serialNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 11623,
            "contract": "contracts/Metadata.sol:Metadata",
            "label": "dateOfIncorporation",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 11625,
            "contract": "contracts/Metadata.sol:Metadata",
            "label": "legalAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 11627,
            "contract": "contracts/Metadata.sol:Metadata",
            "label": "taxationStatus",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 11629,
            "contract": "contracts/Metadata.sol:Metadata",
            "label": "registeredName",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 11632,
            "contract": "contracts/Metadata.sol:Metadata",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(Status)11617"
          },
          {
            "astId": 11634,
            "contract": "contracts/Metadata.sol:Metadata",
            "label": "owner",
            "offset": 1,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}