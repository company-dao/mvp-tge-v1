{
  "address": "0x1e98F660EDAd60d7C9eC09563019aeb466293b37",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDirectory",
          "name": "directory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolMaster_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "proposalGateway_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenMaster_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tgeMaster_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proposalQuorum_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proposalThreshold_",
          "type": "uint256"
        },
        {
          "internalType": "contract ISwapRouter",
          "name": "uniswapRouter_",
          "type": "address"
        },
        {
          "internalType": "contract IQuoter",
          "name": "uniswapQuoter_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "FeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tge",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        }
      ],
      "name": "ProposalQuorumSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "ProposalThresholdSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tge",
          "type": "address"
        }
      ],
      "name": "SecondaryTGECreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "TokenWhitelistedSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "UserWhitelistedSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "addProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "swapPaths",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "swapReversePaths",
          "type": "bytes[]"
        }
      ],
      "name": "addTokensToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addUserToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "cap",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGovernanceToken.TokenInfo",
          "name": "tokenInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupTVL",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "whitelist",
              "type": "address[]"
            }
          ],
          "internalType": "struct ITGE.TGEInfo",
          "name": "tgeInfo",
          "type": "tuple"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupTVL",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "whitelist",
              "type": "address[]"
            }
          ],
          "internalType": "struct ITGE.TGEInfo",
          "name": "tgeInfo",
          "type": "tuple"
        }
      ],
      "name": "createSecondaryTGE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isTokenWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isUserWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolMaster",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalQuorum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "removeTokensFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeUserFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalQuorum_",
          "type": "uint256"
        }
      ],
      "name": "setProposalQuorum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalThreshold_",
          "type": "uint256"
        }
      ],
      "name": "setProposalThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tgeMaster",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenMaster",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenSwapPath",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenSwapReversePath",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenWhitelist",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapQuoter",
      "outputs": [
        {
          "internalType": "contract IQuoter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userWhitelist",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "userWhitelistAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userWhitelistLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b30922ae6b0aded2377fab3541ef8d9391d0e41c84cf40d0f4fd878acd7229a",
  "receipt": {
    "to": null,
    "from": "0xF89e3d72F182BBcccEfFB7F7d2c9ce796D6547e6",
    "contractAddress": "0x1e98F660EDAd60d7C9eC09563019aeb466293b37",
    "transactionIndex": 7,
    "gasUsed": "2411170",
    "logsBloom": "0x
    "blockHash": "0x21d392a0584e19dcad123936eaaa6922c02365c460b5b9ac083b485317aecf9a",
    "transactionHash": "0x6b30922ae6b0aded2377fab3541ef8d9391d0e41c84cf40d0f4fd878acd7229a",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 7146162,
        "transactionHash": "0x6b30922ae6b0aded2377fab3541ef8d9391d0e41c84cf40d0f4fd878acd7229a",
        "address": "0x1e98F660EDAd60d7C9eC09563019aeb466293b37",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f89e3d72f182bbccceffb7f7d2c9ce796d6547e6"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0x21d392a0584e19dcad123936eaaa6922c02365c460b5b9ac083b485317aecf9a"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 7146162,
        "transactionHash": "0x6b30922ae6b0aded2377fab3541ef8d9391d0e41c84cf40d0f4fd878acd7229a",
        "address": "0x1e98F660EDAd60d7C9eC09563019aeb466293b37",
        "topics": [
          "0x20461e09b8e557b77e107939f9ce6544698123aad0fc964ac5cc59b7df2e608f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 39,
        "blockHash": "0x21d392a0584e19dcad123936eaaa6922c02365c460b5b9ac083b485317aecf9a"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 7146162,
        "transactionHash": "0x6b30922ae6b0aded2377fab3541ef8d9391d0e41c84cf40d0f4fd878acd7229a",
        "address": "0x1e98F660EDAd60d7C9eC09563019aeb466293b37",
        "topics": [
          "0xb3b5a2f69b3db6f9f9545a71982d531ee15418a26301988f14ec9d4636042e68"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000001e",
        "logIndex": 40,
        "blockHash": "0x21d392a0584e19dcad123936eaaa6922c02365c460b5b9ac083b485317aecf9a"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 7146162,
        "transactionHash": "0x6b30922ae6b0aded2377fab3541ef8d9391d0e41c84cf40d0f4fd878acd7229a",
        "address": "0x1e98F660EDAd60d7C9eC09563019aeb466293b37",
        "topics": [
          "0xddaabc20f9c626e5660727e2e44f0bf5ad346108c4c3be2674ea6300a815218f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000032",
        "logIndex": 41,
        "blockHash": "0x21d392a0584e19dcad123936eaaa6922c02365c460b5b9ac083b485317aecf9a"
      }
    ],
    "blockNumber": 7146162,
    "cumulativeGasUsed": "4546229",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC6870803C1d59a62F4FC4800C30D42747c2Cc704",
    "0x4065e20cb2c8f780C4413E248E03Bbbe18c47Eb8",
    "0x94747446347680a32E7C6aE486653d92A95fDf61",
    "0xa88b9E9C08A1525D21b53Ba3f3562ee3870196BD",
    "0xFD1e8032E416511088fB4e607d95325A68Cb3Af0",
    "0",
    "30",
    "50",
    "0xe592427a0aece92de3edee1f18e0157c05861564",
    "0xb27308f9f90d607463bb33ea1bebb41c27ce5ab6"
  ],
  "numDeployments": 1,
  "solcInputHash": "4dfaa6771f87ad430e2d47b84c416ad0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDirectory\",\"name\":\"directory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolMaster_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposalGateway_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenMaster_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tgeMaster_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalQuorum_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"uniswapRouter_\",\"type\":\"address\"},{\"internalType\":\"contract IQuoter\",\"name\":\"uniswapQuoter_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"ProposalQuorumSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ProposalThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"}],\"name\":\"SecondaryTGECreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"TokenWhitelistedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"UserWhitelistedSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"addProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"swapPaths\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"swapReversePaths\",\"type\":\"bytes[]\"}],\"name\":\"addTokensToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addUserToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"internalType\":\"struct IGovernanceToken.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"internalType\":\"struct ITGE.TGEInfo\",\"name\":\"tgeInfo\",\"type\":\"tuple\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"internalType\":\"struct ITGE.TGEInfo\",\"name\":\"tgeInfo\",\"type\":\"tuple\"}],\"name\":\"createSecondaryTGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isUserWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"removeTokensFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeUserFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalQuorum_\",\"type\":\"uint256\"}],\"name\":\"setProposalQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalThreshold_\",\"type\":\"uint256\"}],\"name\":\"setProposalThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSwapPath\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSwapReversePath\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapQuoter\",\"outputs\":[{\"internalType\":\"contract IQuoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"userWhitelistAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userWhitelistLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Service.sol\":\"Service\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Service.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\nimport \\\"./interfaces/IService.sol\\\";\\nimport \\\"./interfaces/IDirectory.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IGovernanceToken.sol\\\";\\nimport \\\"./interfaces/ITGE.sol\\\";\\n\\ncontract Service is IService, Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Clones for address;\\n\\n    IDirectory public directory;\\n\\n    address public proposalGateway;\\n\\n    address public poolMaster;\\n\\n    address public tokenMaster;\\n\\n    address public tgeMaster;\\n\\n    uint256 public fee;\\n\\n    uint256 public proposalQuorum;\\n\\n    uint256 public proposalThreshold;\\n\\n    ISwapRouter public uniswapRouter;\\n\\n    IQuoter public uniswapQuoter;\\n\\n    EnumerableSet.AddressSet private _userWhitelist;\\n\\n    EnumerableSet.AddressSet private _tokenWhitelist;\\n\\n    mapping(address => bytes) public tokenSwapPath;\\n\\n    mapping(address => bytes) public tokenSwapReversePath;\\n\\n    // EVENTS\\n\\n    event UserWhitelistedSet(address account, bool whitelisted);\\n\\n    event TokenWhitelistedSet(address token, bool whitelisted);\\n\\n    event FeeSet(uint256 fee);\\n\\n    event ProposalQuorumSet(uint256 quorum);\\n\\n    event ProposalThresholdSet(uint256 threshold);\\n\\n    event PoolCreated(address pool, address token, address tge);\\n\\n    event SecondaryTGECreated(address pool, address tge);\\n\\n    // CONSTRUCTOR\\n\\n    constructor(\\n        IDirectory directory_,\\n        address poolMaster_,\\n        address proposalGateway_,\\n        address tokenMaster_,\\n        address tgeMaster_,\\n        uint256 fee_,\\n        uint256 proposalQuorum_,\\n        uint256 proposalThreshold_,\\n        ISwapRouter uniswapRouter_,\\n        IQuoter uniswapQuoter_\\n    ) {\\n        directory = directory_;\\n        proposalGateway = proposalGateway_;\\n        poolMaster = poolMaster_;\\n        tokenMaster = tokenMaster_;\\n        tgeMaster = tgeMaster_;\\n        fee = fee_;\\n        proposalQuorum = proposalQuorum_;\\n        proposalThreshold = proposalThreshold_;\\n        uniswapRouter = uniswapRouter_;\\n        uniswapQuoter = uniswapQuoter_;\\n\\n        emit FeeSet(fee_);\\n        emit ProposalQuorumSet(proposalQuorum_);\\n        emit ProposalThresholdSet(proposalThreshold_);\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    function createPool(\\n        IPool pool,\\n        IGovernanceToken.TokenInfo memory tokenInfo,\\n        ITGE.TGEInfo memory tgeInfo\\n    ) external payable onlyWhitelisted {\\n        require(msg.value == fee, \\\"Incorrect fee passed\\\");\\n\\n        if (address(pool) == address(0)) {\\n            pool = IPool(poolMaster.clone());\\n            pool.initialize(msg.sender);\\n            directory.addContractRecord(\\n                address(pool),\\n                IDirectory.ContractType.Pool\\n            );\\n        } else {\\n            require(\\n                directory.typeOf(address(pool)) == IDirectory.ContractType.Pool,\\n                \\\"Not a pool\\\"\\n            );\\n            require(msg.sender == pool.owner(), \\\"Sender is not pool owner\\\");\\n            require(\\n                pool.tge().state() == ITGE.State.Failed,\\n                \\\"Previous TGE not failed\\\"\\n            );\\n        }\\n\\n        address token = tokenMaster.clone();\\n        directory.addContractRecord(\\n            token,\\n            IDirectory.ContractType.GovernanceToken\\n        );\\n        address tge = tgeMaster.clone();\\n        directory.addContractRecord(tge, IDirectory.ContractType.TGE);\\n\\n        IGovernanceToken(token).initialize(address(pool), tokenInfo);\\n        pool.setToken(token);\\n        ITGE(tge).initialize(msg.sender, token, tgeInfo);\\n        pool.setTGE(tge);\\n\\n        emit PoolCreated(address(pool), token, tge);\\n    }\\n\\n    // PUBLIC INDIRECT FUNCTIONS (CALLED THROUGH POOL)\\n\\n    function createSecondaryTGE(ITGE.TGEInfo memory tgeInfo)\\n        external\\n        override\\n        onlyPool\\n    {\\n        require(\\n            IPool(msg.sender).tge().state() != ITGE.State.Active,\\n            \\\"Has active TGE\\\"\\n        );\\n\\n        address tge = tgeMaster.clone();\\n        directory.addContractRecord(tge, IDirectory.ContractType.TGE);\\n        ITGE(tge).initialize(\\n            msg.sender,\\n            address(IPool(msg.sender).token()),\\n            tgeInfo\\n        );\\n        IPool(msg.sender).setTGE(tge);\\n\\n        emit SecondaryTGECreated(msg.sender, tge);\\n    }\\n\\n    function addProposal(uint256 proposalId) external onlyPool {\\n        directory.addProposalRecord(msg.sender, proposalId);\\n    }\\n\\n    // RESTRICTED FUNCTIONS\\n\\n    function addUserToWhitelist(address account) external onlyOwner {\\n        require(_userWhitelist.add(account), \\\"Already whitelisted\\\");\\n        emit UserWhitelistedSet(account, true);\\n    }\\n\\n    function removeUserFromWhitelist(address account) external onlyOwner {\\n        require(_userWhitelist.remove(account), \\\"Already not whitelisted\\\");\\n        emit UserWhitelistedSet(account, false);\\n    }\\n\\n    function addTokensToWhitelist(\\n        address[] memory tokens,\\n        bytes[] memory swapPaths,\\n        bytes[] memory swapReversePaths\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            require(_tokenWhitelist.add(tokens[i]), \\\"Already whitelisted\\\");\\n            tokenSwapPath[tokens[i]] = swapPaths[i];\\n            tokenSwapReversePath[tokens[i]] = swapReversePaths[i];\\n            emit TokenWhitelistedSet(tokens[i], true);\\n        }\\n    }\\n\\n    function removeTokensFromWhitelist(address[] memory tokens)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            require(\\n                _tokenWhitelist.remove(tokens[i]),\\n                \\\"Already not whitelisted\\\"\\n            );\\n            emit TokenWhitelistedSet(tokens[i], false);\\n        }\\n    }\\n\\n    function setFee(uint256 fee_) external onlyOwner {\\n        fee = fee_;\\n        emit FeeSet(fee_);\\n    }\\n\\n    function setProposalQuorum(uint256 proposalQuorum_) external onlyOwner {\\n        proposalQuorum = proposalQuorum_;\\n        emit ProposalQuorumSet(proposalQuorum_);\\n    }\\n\\n    function setProposalThreshold(uint256 proposalThreshold_)\\n        external\\n        onlyOwner\\n    {\\n        proposalThreshold = proposalThreshold_;\\n        emit ProposalThresholdSet(proposalThreshold_);\\n    }\\n\\n    function transferFunds(address to) external onlyOwner {\\n        payable(to).transfer(payable(address(this)).balance);\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    function isUserWhitelisted(address account) public view returns (bool) {\\n        return _userWhitelist.contains(account);\\n    }\\n\\n    function userWhitelist() external view returns (address[] memory) {\\n        return _userWhitelist.values();\\n    }\\n\\n    function userWhitelistLength() external view returns (uint256) {\\n        return _userWhitelist.length();\\n    }\\n\\n    function userWhitelistAt(uint256 index) external view returns (address) {\\n        return _userWhitelist.at(index);\\n    }\\n\\n    function isTokenWhitelisted(address token)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _tokenWhitelist.contains(token);\\n    }\\n\\n    function tokenWhitelist()\\n        external\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return _tokenWhitelist.values();\\n    }\\n\\n    function owner() public view override(IService, Ownable) returns (address) {\\n        return super.owner();\\n    }\\n\\n    // MODIFIERS\\n\\n    modifier onlyWhitelisted() {\\n        require(isUserWhitelisted(msg.sender), \\\"Not whitelisted\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(\\n            directory.typeOf(msg.sender) == IDirectory.ContractType.Pool,\\n            \\\"Not a pool\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc25ce6154c90a157cd8580f6932db6fd8baa963a3c60a2e70a128068ea54e9c4\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IDirectory {\\n    enum ContractType {\\n        None,\\n        Pool,\\n        GovernanceToken,\\n        TGE\\n    }\\n\\n    function addContractRecord(address addr, ContractType contractType)\\n        external\\n        returns (uint256 index);\\n\\n    function addProposalRecord(address pool, uint256 proposalId)\\n        external\\n        returns (uint256 index);\\n\\n    function typeOf(address addr) external view returns (ContractType);\\n}\\n\",\"keccak256\":\"0x39fc90b444e9aefc4e2a3a40b43840dfa44ff13441a9e50d3de9bb95f044bd81\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./IService.sol\\\";\\n\\ninterface IGovernanceToken is IERC20Upgradeable {\\n    struct TokenInfo {\\n        string name;\\n        string symbol;\\n        uint256 cap;\\n    }\\n\\n    function initialize(address pool_, TokenInfo memory info) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function lock(\\n        address account,\\n        uint256 amount,\\n        uint256 deadline\\n    ) external;\\n\\n    function cap() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function service() external view returns (IService);\\n}\\n\",\"keccak256\":\"0x7ab5e082a0b9d346827f0737d19904b5ff18b9fdb91fe676675e92c8a60afffc\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IService.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./IGovernanceToken.sol\\\";\\n\\ninterface IPool {\\n    function initialize(address owner_) external;\\n\\n    function setToken(address token_) external;\\n\\n    function setTGE(address tge_) external;\\n\\n    function setCompanyDomain(string memory companyDomain_) external;\\n\\n    function proposeSingleAction(\\n        uint256 duration,\\n        address target,\\n        uint256 value,\\n        bytes memory cd,\\n        string memory description\\n    ) external returns (uint256 proposalId);\\n\\n    function owner() external view returns (address);\\n\\n    function service() external view returns (IService);\\n\\n    function token() external view returns (IGovernanceToken);\\n\\n    function tge() external view returns (ITGE);\\n}\\n\",\"keccak256\":\"0x657183a4cee768cba3f5d808b65c1e75e7bd7accaac88dc622b6953ba5949f41\",\"license\":\"MIT\"},\"contracts/interfaces/IService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\nimport \\\"./IDirectory.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\n\\ninterface IService {\\n    function createSecondaryTGE(ITGE.TGEInfo memory tgeInfo) external;\\n\\n    function addProposal(uint256 proposalId) external;\\n\\n    function directory() external view returns (IDirectory);\\n\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n\\n    function tokenWhitelist() external view returns (address[] memory);\\n\\n    function owner() external view returns (address);\\n\\n    function proposalGateway() external view returns (address);\\n\\n    function proposalQuorum() external view returns (uint256);\\n\\n    function proposalThreshold() external view returns (uint256);\\n\\n    function uniswapRouter() external view returns (ISwapRouter);\\n\\n    function uniswapQuoter() external view returns (IQuoter);\\n\\n    function tokenSwapPath(address) external view returns (bytes memory);\\n\\n    function tokenSwapReversePath(address) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf1d37d18235df54aff8811fc947c319d175c11832e228ba4e8345c42307b53b8\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface ITGE {\\n    struct TGEInfo {\\n        string metadataURI;\\n        uint256 price;\\n        uint256 hardcap;\\n        uint256 softcap;\\n        uint256 minPurchase;\\n        uint256 maxPurchase;\\n        uint256 lockupPercent;\\n        uint256 lockupDuration;\\n        uint256 lockupTVL;\\n        uint256 duration;\\n        address[] whitelist;\\n    }\\n\\n    function initialize(\\n        address owner_,\\n        address token_,\\n        TGEInfo memory info\\n    ) external;\\n\\n    function claimBack() external;\\n\\n    function maxPurchaseOf(address account) external view returns (uint256);\\n\\n    enum State {\\n        Active,\\n        Failed,\\n        Successful\\n    }\\n\\n    function state() external view returns (State);\\n}\\n\",\"keccak256\":\"0x6e364e4c5b5fb6cc31734ba94e0272ef3db83b676a216369b4317bb69b608e27\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620028f2380380620028f28339810160408190526200003491620001ce565b6200003f3362000165565b600180546001600160a01b03199081166001600160a01b038d8116919091179092556002805482168b84161790556003805482168c84161790556004805482168a8416179055600580548216898416179055600687905560078690556008859055600980548216858416179055600a80549091169183169190911790556040518581527f20461e09b8e557b77e107939f9ce6544698123aad0fc964ac5cc59b7df2e608f9060200160405180910390a16040518481527fb3b5a2f69b3db6f9f9545a71982d531ee15418a26301988f14ec9d4636042e689060200160405180910390a16040518381527fddaabc20f9c626e5660727e2e44f0bf5ad346108c4c3be2674ea6300a815218f9060200160405180910390a15050505050505050505062000299565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620001cb57600080fd5b50565b6000806000806000806000806000806101408b8d031215620001ef57600080fd5b8a51620001fc81620001b5565b60208c0151909a506200020f81620001b5565b60408c01519099506200022281620001b5565b60608c01519098506200023581620001b5565b60808c01519097506200024881620001b5565b8096505060a08b0151945060c08b0151935060e08b015192506101008b01516200027281620001b5565b6101208c01519092506200028681620001b5565b809150509295989b9194979a5092959850565b61264980620002a96000396000f3fe6080604052600436106101e35760003560e01c80639459c17311610102578063ccd4743e11610095578063ece40cc111610064578063ece40cc114610566578063f2fde38b14610586578063f9902bb1146105a6578063fb237eb2146105c657600080fd5b8063ccd4743e146104fb578063dad01e5b1461051b578063ddca3f4314610530578063e39ff19f1461054657600080fd5b8063b58131b0116100d1578063b58131b014610480578063b5af090f14610496578063c41c2f24146104c6578063ca735cc1146104e657600080fd5b80639459c173146103fc5780639a0b6f9b1461041c578063a7ca279f14610440578063b36bb0e31461046057600080fd5b806363d08dff1161017a578063747b805011610149578063747b80501461037c5780638548abf61461039c5780638da5cb5b146103bc57806394218737146103da57600080fd5b806363d08dff1461030757806369fe0e2d14610327578063715018a614610347578063735de9f71461035c57600080fd5b80633fec91a4116101b65780633fec91a41461028757806342b8cdbf146102a75780634db4a352146102ba57806350eb1c43146102da57600080fd5b806304e31dfb146101e85780631022ed60146102255780632346e06d14610247578063265d440914610267575b600080fd5b3480156101f457600080fd5b50600254610208906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561023157600080fd5b50610245610240366004611fd8565b6105e6565b005b34801561025357600080fd5b50600554610208906001600160a01b031681565b34801561027357600080fd5b50600454610208906001600160a01b031681565b34801561029357600080fd5b506102456102a2366004612015565b610990565b6102456102b536600461202e565b610aa4565b3480156102c657600080fd5b50600a54610208906001600160a01b031681565b3480156102e657600080fd5b506102fa6102f53660046120fe565b611199565b60405161021c9190612168565b34801561031357600080fd5b506102fa6103223660046120fe565b611233565b34801561033357600080fd5b50610245610342366004612015565b61124c565b34801561035357600080fd5b506102456112b2565b34801561036857600080fd5b50600954610208906001600160a01b031681565b34801561038857600080fd5b506102456103973660046120fe565b6112e8565b3480156103a857600080fd5b506102456103b7366004612015565b61139e565b3480156103c857600080fd5b506000546001600160a01b0316610208565b3480156103e657600080fd5b506103ef611402565b60405161021c91906121bf565b34801561040857600080fd5b50610208610417366004612015565b61140e565b34801561042857600080fd5b5061043260075481565b60405190815260200161021c565b34801561044c57600080fd5b5061024561045b366004612267565b611421565b34801561046c57600080fd5b5061024561047b3660046122e5565b61161f565b34801561048c57600080fd5b5061043260085481565b3480156104a257600080fd5b506104b66104b13660046120fe565b611743565b604051901515815260200161021c565b3480156104d257600080fd5b50600154610208906001600160a01b031681565b3480156104f257600080fd5b506103ef611750565b34801561050757600080fd5b50600354610208906001600160a01b031681565b34801561052757600080fd5b5061043261175c565b34801561053c57600080fd5b5061043260065481565b34801561055257600080fd5b506102456105613660046120fe565b611768565b34801561057257600080fd5b50610245610581366004612015565b6117c8565b34801561059257600080fd5b506102456105a13660046120fe565b611827565b3480156105b257600080fd5b506102456105c13660046120fe565b6118c2565b3480156105d257600080fd5b506104b66105e13660046120fe565b61197c565b60018054604051630db9619f60e31b81523360048201526001600160a01b0390911690636dcb0cf890602401602060405180830381865afa15801561062f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106539190612330565b60038111156106645761066461231a565b1461068a5760405162461bcd60e51b815260040161068190612351565b60405180910390fd5b6000336001600160a01b031663a7497fa56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ee9190612375565b6001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561072b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074f9190612392565b60028111156107605761076061231a565b0361079e5760405162461bcd60e51b815260206004820152600e60248201526d486173206163746976652054474560901b6044820152606401610681565b6005546000906107b6906001600160a01b0316611989565b6001546040516303203cd960e21b81529192506001600160a01b031690630c80f364906107ea9084906003906004016123b3565b6020604051808303816000875af1158015610809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082d91906123ee565b50806001600160a01b03166349297b3333336001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a09190612375565b856040518463ffffffff1660e01b81526004016108bf93929190612407565b600060405180830381600087803b1580156108d957600080fd5b505af11580156108ed573d6000803e3d6000fd5b505060405163024aa90f60e61b81526001600160a01b03841660048201523392506392aa43c09150602401600060405180830381600087803b15801561093257600080fd5b505af1158015610946573d6000803e3d6000fd5b5050604080513381526001600160a01b03851660208201527f0e3dbd8c6caab1c68013fb13d63b7ff61db8fed8b3e7ce4e8e294ee1d0c22e8e935001905060405180910390a15050565b60018054604051630db9619f60e31b81523360048201526001600160a01b0390911690636dcb0cf890602401602060405180830381865afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190612330565b6003811115610a0e57610a0e61231a565b14610a2b5760405162461bcd60e51b815260040161068190612351565b60015460405163f4be936960e01b8152336004820152602481018390526001600160a01b039091169063f4be9369906044016020604051808303816000875af1158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa091906123ee565b5050565b610aad3361197c565b610aeb5760405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b6044820152606401610681565b6006543414610b335760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd08199959481c185cdcd95960621b6044820152606401610681565b6001600160a01b038316610c2c57600354610b56906001600160a01b0316611989565b60405163189acdbd60e31b81523360048201529093506001600160a01b0384169063c4d66de890602401600060405180830381600087803b158015610b9a57600080fd5b505af1158015610bae573d6000803e3d6000fd5b5050600180546040516303203cd960e21b81526001600160a01b039091169350630c80f3649250610be39187916004016123b3565b6020604051808303816000875af1158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2691906123ee565b50610eae565b60018054604051630db9619f60e31b81526001600160a01b03868116600483015290911690636dcb0cf890602401602060405180830381865afa158015610c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9b9190612330565b6003811115610cac57610cac61231a565b14610cc95760405162461bcd60e51b815260040161068190612351565b826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2b9190612375565b6001600160a01b0316336001600160a01b031614610d8b5760405162461bcd60e51b815260206004820152601860248201527f53656e646572206973206e6f7420706f6f6c206f776e657200000000000000006044820152606401610681565b6001836001600160a01b031663a7497fa56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610def9190612375565b6001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e509190612392565b6002811115610e6157610e6161231a565b14610eae5760405162461bcd60e51b815260206004820152601760248201527f50726576696f757320544745206e6f74206661696c65640000000000000000006044820152606401610681565b600454600090610ec6906001600160a01b0316611989565b6001546040516303203cd960e21b81529192506001600160a01b031690630c80f36490610efa9084906002906004016123b3565b6020604051808303816000875af1158015610f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3d91906123ee565b50600554600090610f56906001600160a01b0316611989565b6001546040516303203cd960e21b81529192506001600160a01b031690630c80f36490610f8a9084906003906004016123b3565b6020604051808303816000875af1158015610fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcd91906123ee565b506040516322ae8aef60e01b81526001600160a01b038316906322ae8aef90610ffc90889088906004016124d3565b600060405180830381600087803b15801561101657600080fd5b505af115801561102a573d6000803e3d6000fd5b505060405163144fa6d760e01b81526001600160a01b0385811660048301528816925063144fa6d79150602401600060405180830381600087803b15801561107157600080fd5b505af1158015611085573d6000803e3d6000fd5b50506040516349297b3360e01b81526001600160a01b03841692506349297b3391506110b990339086908890600401612407565b600060405180830381600087803b1580156110d357600080fd5b505af11580156110e7573d6000803e3d6000fd5b505060405163024aa90f60e61b81526001600160a01b038481166004830152881692506392aa43c09150602401600060405180830381600087803b15801561112e57600080fd5b505af1158015611142573d6000803e3d6000fd5b5050604080516001600160a01b038981168252868116602083015285168183015290517f9c5d829b9b23efc461f9aeef91979ec04bb903feb3bee4f26d22114abfc7335b9350908190036060019150a15050505050565b600f60205260009081526040902080546111b290612532565b80601f01602080910402602001604051908101604052809291908181526020018280546111de90612532565b801561122b5780601f106112005761010080835404028352916020019161122b565b820191906000526020600020905b81548152906001019060200180831161120e57829003601f168201915b505050505081565b601060205260009081526040902080546111b290612532565b6000546001600160a01b031633146112765760405162461bcd60e51b81526004016106819061256c565b60068190556040518181527f20461e09b8e557b77e107939f9ce6544698123aad0fc964ac5cc59b7df2e608f906020015b60405180910390a150565b6000546001600160a01b031633146112dc5760405162461bcd60e51b81526004016106819061256c565b6112e66000611a26565b565b6000546001600160a01b031633146113125760405162461bcd60e51b81526004016106819061256c565b61131d600b82611a76565b61135f5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481dda1a5d195b1a5cdd1959606a1b6044820152606401610681565b604080516001600160a01b0383168152600160208201527fdf3714d6f88cdae2b889250b70116def7fb5083073c65cce38b56d2b0b0ef64e91016112a7565b6000546001600160a01b031633146113c85760405162461bcd60e51b81526004016106819061256c565b60078190556040518181527fb3b5a2f69b3db6f9f9545a71982d531ee15418a26301988f14ec9d4636042e68906020016112a7565b905090565b60606113fd600b611a92565b600061141b600b83611a9f565b92915050565b6000546001600160a01b0316331461144b5760405162461bcd60e51b81526004016106819061256c565b60005b83518110156116195761148484828151811061146c5761146c6125a1565b6020026020010151600d611a7690919063ffffffff16565b6114c65760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481dda1a5d195b1a5cdd1959606a1b6044820152606401610681565b8281815181106114d8576114d86125a1565b6020026020010151600f60008684815181106114f6576114f66125a1565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190611531929190611cb4565b50818181518110611544576115446125a1565b602002602001015160106000868481518110611562576115626125a1565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020908051906020019061159d929190611cb4565b507f56141cd46fa0d7cb29ad16da2ac6b833fb19832cf2c38b83fcc8333bf9165cc78482815181106115d1576115d16125a1565b602002602001015160016040516115ff9291906001600160a01b039290921682521515602082015260400190565b60405180910390a180611611816125cd565b91505061144e565b50505050565b6000546001600160a01b031633146116495760405162461bcd60e51b81526004016106819061256c565b60005b8151811015610aa05761168282828151811061166a5761166a6125a1565b6020026020010151600d611aab90919063ffffffff16565b6116c85760405162461bcd60e51b8152602060048201526017602482015276105b1c9958591e481b9bdd081dda1a5d195b1a5cdd1959604a1b6044820152606401610681565b7f56141cd46fa0d7cb29ad16da2ac6b833fb19832cf2c38b83fcc8333bf9165cc78282815181106116fb576116fb6125a1565b602002602001015160006040516117299291906001600160a01b039290921682521515602082015260400190565b60405180910390a18061173b816125cd565b91505061164c565b600061141b600d83611ac0565b60606113fd600d611a92565b60006113fd600b611ae2565b6000546001600160a01b031633146117925760405162461bcd60e51b81526004016106819061256c565b6040516001600160a01b03821690303180156108fc02916000818181858888f19350505050158015610aa0573d6000803e3d6000fd5b6000546001600160a01b031633146117f25760405162461bcd60e51b81526004016106819061256c565b60088190556040518181527fddaabc20f9c626e5660727e2e44f0bf5ad346108c4c3be2674ea6300a815218f906020016112a7565b6000546001600160a01b031633146118515760405162461bcd60e51b81526004016106819061256c565b6001600160a01b0381166118b65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610681565b6118bf81611a26565b50565b6000546001600160a01b031633146118ec5760405162461bcd60e51b81526004016106819061256c565b6118f7600b82611aab565b61193d5760405162461bcd60e51b8152602060048201526017602482015276105b1c9958591e481b9bdd081dda1a5d195b1a5cdd1959604a1b6044820152606401610681565b604080516001600160a01b0383168152600060208201527fdf3714d6f88cdae2b889250b70116def7fb5083073c65cce38b56d2b0b0ef64e91016112a7565b600061141b600b83611ac0565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116611a215760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610681565b919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611a8b836001600160a01b038416611aec565b9392505050565b60606000611a8b83611b3b565b6000611a8b8383611b97565b6000611a8b836001600160a01b038416611bc1565b6001600160a01b03811660009081526001830160205260408120541515611a8b565b600061141b825490565b6000818152600183016020526040812054611b335750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561141b565b50600061141b565b606081600001805480602002602001604051908101604052809291908181526020018280548015611b8b57602002820191906000526020600020905b815481526020019060010190808311611b77575b50505050509050919050565b6000826000018281548110611bae57611bae6125a1565b9060005260206000200154905092915050565b60008181526001830160205260408120548015611caa576000611be56001836125e6565b8554909150600090611bf9906001906125e6565b9050818114611c5e576000866000018281548110611c1957611c196125a1565b9060005260206000200154905080876000018481548110611c3c57611c3c6125a1565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611c6f57611c6f6125fd565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061141b565b600091505061141b565b828054611cc090612532565b90600052602060002090601f016020900481019282611ce25760008555611d28565b82601f10611cfb57805160ff1916838001178555611d28565b82800160010185558215611d28579182015b82811115611d28578251825591602001919060010190611d0d565b50611d34929150611d38565b5090565b5b80821115611d345760008155600101611d39565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715611d8757611d87611d4d565b60405290565b6040516060810167ffffffffffffffff81118282101715611d8757611d87611d4d565b604051601f8201601f1916810167ffffffffffffffff81118282101715611dd957611dd9611d4d565b604052919050565b600067ffffffffffffffff831115611dfb57611dfb611d4d565b611e0e601f8401601f1916602001611db0565b9050828152838383011115611e2257600080fd5b828260208301376000602084830101529392505050565b600082601f830112611e4a57600080fd5b611a8b83833560208501611de1565b600067ffffffffffffffff821115611e7357611e73611d4d565b5060051b60200190565b6001600160a01b03811681146118bf57600080fd5b600082601f830112611ea357600080fd5b81356020611eb8611eb383611e59565b611db0565b82815260059290921b84018101918181019086841115611ed757600080fd5b8286015b84811015611efb578035611eee81611e7d565b8352918301918301611edb565b509695505050505050565b60006101608284031215611f1957600080fd5b611f21611d63565b9050813567ffffffffffffffff80821115611f3b57600080fd5b611f4785838601611e39565b83526020840135602084015260408401356040840152606084013560608401526080840135608084015260a084013560a084015260c084013560c084015260e084013560e0840152610100915081840135828401526101209150818401358284015261014091508184013581811115611fbf57600080fd5b611fcb86828701611e92565b8385015250505092915050565b600060208284031215611fea57600080fd5b813567ffffffffffffffff81111561200157600080fd5b61200d84828501611f06565b949350505050565b60006020828403121561202757600080fd5b5035919050565b60008060006060848603121561204357600080fd5b833561204e81611e7d565b9250602084013567ffffffffffffffff8082111561206b57600080fd5b908501906060828803121561207f57600080fd5b612087611d8d565b82358281111561209657600080fd5b6120a289828601611e39565b8252506020830135828111156120b757600080fd5b6120c389828601611e39565b6020830152506040928301358382015293509085013590808211156120e757600080fd5b506120f486828701611f06565b9150509250925092565b60006020828403121561211057600080fd5b8135611a8b81611e7d565b6000815180845260005b8181101561214157602081850181015186830182015201612125565b81811115612153576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611a8b602083018461211b565b600081518084526020808501945080840160005b838110156121b45781516001600160a01b03168752958201959082019060010161218f565b509495945050505050565b602081526000611a8b602083018461217b565b600082601f8301126121e357600080fd5b813560206121f3611eb383611e59565b82815260059290921b8401810191818101908684111561221257600080fd5b8286015b84811015611efb57803567ffffffffffffffff8111156122365760008081fd5b8701603f810189136122485760008081fd5b612259898683013560408401611de1565b845250918301918301612216565b60008060006060848603121561227c57600080fd5b833567ffffffffffffffff8082111561229457600080fd5b6122a087838801611e92565b945060208601359150808211156122b657600080fd5b6122c2878388016121d2565b935060408601359150808211156122d857600080fd5b506120f4868287016121d2565b6000602082840312156122f757600080fd5b813567ffffffffffffffff81111561230e57600080fd5b61200d84828501611e92565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561234257600080fd5b815160048110611a8b57600080fd5b6020808252600a9082015269139bdd0818481c1bdbdb60b21b604082015260600190565b60006020828403121561238757600080fd5b8151611a8b81611e7d565b6000602082840312156123a457600080fd5b815160038110611a8b57600080fd5b6001600160a01b038316815260408101600483106123e157634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b60006020828403121561240057600080fd5b5051919050565b6001600160a01b0384811682528316602082015260606040820181905282516101609183018290526000916124406101c085018361211b565b915060208501516080850152604085015160a0850152606085015160c0850152608085015160e085015260a0850151610100818187015260c08701519150610120828188015260e08801519250610140838189015282890151858901528189015161018089015280890151945050505050605f19848303016101a08501526124c8828261217b565b979650505050505050565b60018060a01b03831681526040602082015260008251606060408401526124fd60a084018261211b565b90506020840151603f1984830301606085015261251a828261211b565b91505060408401516080840152809150509392505050565b600181811c9082168061254657607f821691505b60208210810361256657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016125df576125df6125b7565b5060010190565b6000828210156125f8576125f86125b7565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212205f84e214a7e7909e8baaeac277a9cda1b0238a052b825f0a2fc80c7e3ef4d3db64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c80639459c17311610102578063ccd4743e11610095578063ece40cc111610064578063ece40cc114610566578063f2fde38b14610586578063f9902bb1146105a6578063fb237eb2146105c657600080fd5b8063ccd4743e146104fb578063dad01e5b1461051b578063ddca3f4314610530578063e39ff19f1461054657600080fd5b8063b58131b0116100d1578063b58131b014610480578063b5af090f14610496578063c41c2f24146104c6578063ca735cc1146104e657600080fd5b80639459c173146103fc5780639a0b6f9b1461041c578063a7ca279f14610440578063b36bb0e31461046057600080fd5b806363d08dff1161017a578063747b805011610149578063747b80501461037c5780638548abf61461039c5780638da5cb5b146103bc57806394218737146103da57600080fd5b806363d08dff1461030757806369fe0e2d14610327578063715018a614610347578063735de9f71461035c57600080fd5b80633fec91a4116101b65780633fec91a41461028757806342b8cdbf146102a75780634db4a352146102ba57806350eb1c43146102da57600080fd5b806304e31dfb146101e85780631022ed60146102255780632346e06d14610247578063265d440914610267575b600080fd5b3480156101f457600080fd5b50600254610208906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561023157600080fd5b50610245610240366004611fd8565b6105e6565b005b34801561025357600080fd5b50600554610208906001600160a01b031681565b34801561027357600080fd5b50600454610208906001600160a01b031681565b34801561029357600080fd5b506102456102a2366004612015565b610990565b6102456102b536600461202e565b610aa4565b3480156102c657600080fd5b50600a54610208906001600160a01b031681565b3480156102e657600080fd5b506102fa6102f53660046120fe565b611199565b60405161021c9190612168565b34801561031357600080fd5b506102fa6103223660046120fe565b611233565b34801561033357600080fd5b50610245610342366004612015565b61124c565b34801561035357600080fd5b506102456112b2565b34801561036857600080fd5b50600954610208906001600160a01b031681565b34801561038857600080fd5b506102456103973660046120fe565b6112e8565b3480156103a857600080fd5b506102456103b7366004612015565b61139e565b3480156103c857600080fd5b506000546001600160a01b0316610208565b3480156103e657600080fd5b506103ef611402565b60405161021c91906121bf565b34801561040857600080fd5b50610208610417366004612015565b61140e565b34801561042857600080fd5b5061043260075481565b60405190815260200161021c565b34801561044c57600080fd5b5061024561045b366004612267565b611421565b34801561046c57600080fd5b5061024561047b3660046122e5565b61161f565b34801561048c57600080fd5b5061043260085481565b3480156104a257600080fd5b506104b66104b13660046120fe565b611743565b604051901515815260200161021c565b3480156104d257600080fd5b50600154610208906001600160a01b031681565b3480156104f257600080fd5b506103ef611750565b34801561050757600080fd5b50600354610208906001600160a01b031681565b34801561052757600080fd5b5061043261175c565b34801561053c57600080fd5b5061043260065481565b34801561055257600080fd5b506102456105613660046120fe565b611768565b34801561057257600080fd5b50610245610581366004612015565b6117c8565b34801561059257600080fd5b506102456105a13660046120fe565b611827565b3480156105b257600080fd5b506102456105c13660046120fe565b6118c2565b3480156105d257600080fd5b506104b66105e13660046120fe565b61197c565b60018054604051630db9619f60e31b81523360048201526001600160a01b0390911690636dcb0cf890602401602060405180830381865afa15801561062f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106539190612330565b60038111156106645761066461231a565b1461068a5760405162461bcd60e51b815260040161068190612351565b60405180910390fd5b6000336001600160a01b031663a7497fa56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ee9190612375565b6001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561072b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074f9190612392565b60028111156107605761076061231a565b0361079e5760405162461bcd60e51b815260206004820152600e60248201526d486173206163746976652054474560901b6044820152606401610681565b6005546000906107b6906001600160a01b0316611989565b6001546040516303203cd960e21b81529192506001600160a01b031690630c80f364906107ea9084906003906004016123b3565b6020604051808303816000875af1158015610809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082d91906123ee565b50806001600160a01b03166349297b3333336001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a09190612375565b856040518463ffffffff1660e01b81526004016108bf93929190612407565b600060405180830381600087803b1580156108d957600080fd5b505af11580156108ed573d6000803e3d6000fd5b505060405163024aa90f60e61b81526001600160a01b03841660048201523392506392aa43c09150602401600060405180830381600087803b15801561093257600080fd5b505af1158015610946573d6000803e3d6000fd5b5050604080513381526001600160a01b03851660208201527f0e3dbd8c6caab1c68013fb13d63b7ff61db8fed8b3e7ce4e8e294ee1d0c22e8e935001905060405180910390a15050565b60018054604051630db9619f60e31b81523360048201526001600160a01b0390911690636dcb0cf890602401602060405180830381865afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190612330565b6003811115610a0e57610a0e61231a565b14610a2b5760405162461bcd60e51b815260040161068190612351565b60015460405163f4be936960e01b8152336004820152602481018390526001600160a01b039091169063f4be9369906044016020604051808303816000875af1158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa091906123ee565b5050565b610aad3361197c565b610aeb5760405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b6044820152606401610681565b6006543414610b335760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd08199959481c185cdcd95960621b6044820152606401610681565b6001600160a01b038316610c2c57600354610b56906001600160a01b0316611989565b60405163189acdbd60e31b81523360048201529093506001600160a01b0384169063c4d66de890602401600060405180830381600087803b158015610b9a57600080fd5b505af1158015610bae573d6000803e3d6000fd5b5050600180546040516303203cd960e21b81526001600160a01b039091169350630c80f3649250610be39187916004016123b3565b6020604051808303816000875af1158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2691906123ee565b50610eae565b60018054604051630db9619f60e31b81526001600160a01b03868116600483015290911690636dcb0cf890602401602060405180830381865afa158015610c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9b9190612330565b6003811115610cac57610cac61231a565b14610cc95760405162461bcd60e51b815260040161068190612351565b826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2b9190612375565b6001600160a01b0316336001600160a01b031614610d8b5760405162461bcd60e51b815260206004820152601860248201527f53656e646572206973206e6f7420706f6f6c206f776e657200000000000000006044820152606401610681565b6001836001600160a01b031663a7497fa56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610def9190612375565b6001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e509190612392565b6002811115610e6157610e6161231a565b14610eae5760405162461bcd60e51b815260206004820152601760248201527f50726576696f757320544745206e6f74206661696c65640000000000000000006044820152606401610681565b600454600090610ec6906001600160a01b0316611989565b6001546040516303203cd960e21b81529192506001600160a01b031690630c80f36490610efa9084906002906004016123b3565b6020604051808303816000875af1158015610f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3d91906123ee565b50600554600090610f56906001600160a01b0316611989565b6001546040516303203cd960e21b81529192506001600160a01b031690630c80f36490610f8a9084906003906004016123b3565b6020604051808303816000875af1158015610fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcd91906123ee565b506040516322ae8aef60e01b81526001600160a01b038316906322ae8aef90610ffc90889088906004016124d3565b600060405180830381600087803b15801561101657600080fd5b505af115801561102a573d6000803e3d6000fd5b505060405163144fa6d760e01b81526001600160a01b0385811660048301528816925063144fa6d79150602401600060405180830381600087803b15801561107157600080fd5b505af1158015611085573d6000803e3d6000fd5b50506040516349297b3360e01b81526001600160a01b03841692506349297b3391506110b990339086908890600401612407565b600060405180830381600087803b1580156110d357600080fd5b505af11580156110e7573d6000803e3d6000fd5b505060405163024aa90f60e61b81526001600160a01b038481166004830152881692506392aa43c09150602401600060405180830381600087803b15801561112e57600080fd5b505af1158015611142573d6000803e3d6000fd5b5050604080516001600160a01b038981168252868116602083015285168183015290517f9c5d829b9b23efc461f9aeef91979ec04bb903feb3bee4f26d22114abfc7335b9350908190036060019150a15050505050565b600f60205260009081526040902080546111b290612532565b80601f01602080910402602001604051908101604052809291908181526020018280546111de90612532565b801561122b5780601f106112005761010080835404028352916020019161122b565b820191906000526020600020905b81548152906001019060200180831161120e57829003601f168201915b505050505081565b601060205260009081526040902080546111b290612532565b6000546001600160a01b031633146112765760405162461bcd60e51b81526004016106819061256c565b60068190556040518181527f20461e09b8e557b77e107939f9ce6544698123aad0fc964ac5cc59b7df2e608f906020015b60405180910390a150565b6000546001600160a01b031633146112dc5760405162461bcd60e51b81526004016106819061256c565b6112e66000611a26565b565b6000546001600160a01b031633146113125760405162461bcd60e51b81526004016106819061256c565b61131d600b82611a76565b61135f5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481dda1a5d195b1a5cdd1959606a1b6044820152606401610681565b604080516001600160a01b0383168152600160208201527fdf3714d6f88cdae2b889250b70116def7fb5083073c65cce38b56d2b0b0ef64e91016112a7565b6000546001600160a01b031633146113c85760405162461bcd60e51b81526004016106819061256c565b60078190556040518181527fb3b5a2f69b3db6f9f9545a71982d531ee15418a26301988f14ec9d4636042e68906020016112a7565b905090565b60606113fd600b611a92565b600061141b600b83611a9f565b92915050565b6000546001600160a01b0316331461144b5760405162461bcd60e51b81526004016106819061256c565b60005b83518110156116195761148484828151811061146c5761146c6125a1565b6020026020010151600d611a7690919063ffffffff16565b6114c65760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481dda1a5d195b1a5cdd1959606a1b6044820152606401610681565b8281815181106114d8576114d86125a1565b6020026020010151600f60008684815181106114f6576114f66125a1565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190611531929190611cb4565b50818181518110611544576115446125a1565b602002602001015160106000868481518110611562576115626125a1565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020908051906020019061159d929190611cb4565b507f56141cd46fa0d7cb29ad16da2ac6b833fb19832cf2c38b83fcc8333bf9165cc78482815181106115d1576115d16125a1565b602002602001015160016040516115ff9291906001600160a01b039290921682521515602082015260400190565b60405180910390a180611611816125cd565b91505061144e565b50505050565b6000546001600160a01b031633146116495760405162461bcd60e51b81526004016106819061256c565b60005b8151811015610aa05761168282828151811061166a5761166a6125a1565b6020026020010151600d611aab90919063ffffffff16565b6116c85760405162461bcd60e51b8152602060048201526017602482015276105b1c9958591e481b9bdd081dda1a5d195b1a5cdd1959604a1b6044820152606401610681565b7f56141cd46fa0d7cb29ad16da2ac6b833fb19832cf2c38b83fcc8333bf9165cc78282815181106116fb576116fb6125a1565b602002602001015160006040516117299291906001600160a01b039290921682521515602082015260400190565b60405180910390a18061173b816125cd565b91505061164c565b600061141b600d83611ac0565b60606113fd600d611a92565b60006113fd600b611ae2565b6000546001600160a01b031633146117925760405162461bcd60e51b81526004016106819061256c565b6040516001600160a01b03821690303180156108fc02916000818181858888f19350505050158015610aa0573d6000803e3d6000fd5b6000546001600160a01b031633146117f25760405162461bcd60e51b81526004016106819061256c565b60088190556040518181527fddaabc20f9c626e5660727e2e44f0bf5ad346108c4c3be2674ea6300a815218f906020016112a7565b6000546001600160a01b031633146118515760405162461bcd60e51b81526004016106819061256c565b6001600160a01b0381166118b65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610681565b6118bf81611a26565b50565b6000546001600160a01b031633146118ec5760405162461bcd60e51b81526004016106819061256c565b6118f7600b82611aab565b61193d5760405162461bcd60e51b8152602060048201526017602482015276105b1c9958591e481b9bdd081dda1a5d195b1a5cdd1959604a1b6044820152606401610681565b604080516001600160a01b0383168152600060208201527fdf3714d6f88cdae2b889250b70116def7fb5083073c65cce38b56d2b0b0ef64e91016112a7565b600061141b600b83611ac0565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116611a215760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610681565b919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611a8b836001600160a01b038416611aec565b9392505050565b60606000611a8b83611b3b565b6000611a8b8383611b97565b6000611a8b836001600160a01b038416611bc1565b6001600160a01b03811660009081526001830160205260408120541515611a8b565b600061141b825490565b6000818152600183016020526040812054611b335750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561141b565b50600061141b565b606081600001805480602002602001604051908101604052809291908181526020018280548015611b8b57602002820191906000526020600020905b815481526020019060010190808311611b77575b50505050509050919050565b6000826000018281548110611bae57611bae6125a1565b9060005260206000200154905092915050565b60008181526001830160205260408120548015611caa576000611be56001836125e6565b8554909150600090611bf9906001906125e6565b9050818114611c5e576000866000018281548110611c1957611c196125a1565b9060005260206000200154905080876000018481548110611c3c57611c3c6125a1565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611c6f57611c6f6125fd565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061141b565b600091505061141b565b828054611cc090612532565b90600052602060002090601f016020900481019282611ce25760008555611d28565b82601f10611cfb57805160ff1916838001178555611d28565b82800160010185558215611d28579182015b82811115611d28578251825591602001919060010190611d0d565b50611d34929150611d38565b5090565b5b80821115611d345760008155600101611d39565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715611d8757611d87611d4d565b60405290565b6040516060810167ffffffffffffffff81118282101715611d8757611d87611d4d565b604051601f8201601f1916810167ffffffffffffffff81118282101715611dd957611dd9611d4d565b604052919050565b600067ffffffffffffffff831115611dfb57611dfb611d4d565b611e0e601f8401601f1916602001611db0565b9050828152838383011115611e2257600080fd5b828260208301376000602084830101529392505050565b600082601f830112611e4a57600080fd5b611a8b83833560208501611de1565b600067ffffffffffffffff821115611e7357611e73611d4d565b5060051b60200190565b6001600160a01b03811681146118bf57600080fd5b600082601f830112611ea357600080fd5b81356020611eb8611eb383611e59565b611db0565b82815260059290921b84018101918181019086841115611ed757600080fd5b8286015b84811015611efb578035611eee81611e7d565b8352918301918301611edb565b509695505050505050565b60006101608284031215611f1957600080fd5b611f21611d63565b9050813567ffffffffffffffff80821115611f3b57600080fd5b611f4785838601611e39565b83526020840135602084015260408401356040840152606084013560608401526080840135608084015260a084013560a084015260c084013560c084015260e084013560e0840152610100915081840135828401526101209150818401358284015261014091508184013581811115611fbf57600080fd5b611fcb86828701611e92565b8385015250505092915050565b600060208284031215611fea57600080fd5b813567ffffffffffffffff81111561200157600080fd5b61200d84828501611f06565b949350505050565b60006020828403121561202757600080fd5b5035919050565b60008060006060848603121561204357600080fd5b833561204e81611e7d565b9250602084013567ffffffffffffffff8082111561206b57600080fd5b908501906060828803121561207f57600080fd5b612087611d8d565b82358281111561209657600080fd5b6120a289828601611e39565b8252506020830135828111156120b757600080fd5b6120c389828601611e39565b6020830152506040928301358382015293509085013590808211156120e757600080fd5b506120f486828701611f06565b9150509250925092565b60006020828403121561211057600080fd5b8135611a8b81611e7d565b6000815180845260005b8181101561214157602081850181015186830182015201612125565b81811115612153576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611a8b602083018461211b565b600081518084526020808501945080840160005b838110156121b45781516001600160a01b03168752958201959082019060010161218f565b509495945050505050565b602081526000611a8b602083018461217b565b600082601f8301126121e357600080fd5b813560206121f3611eb383611e59565b82815260059290921b8401810191818101908684111561221257600080fd5b8286015b84811015611efb57803567ffffffffffffffff8111156122365760008081fd5b8701603f810189136122485760008081fd5b612259898683013560408401611de1565b845250918301918301612216565b60008060006060848603121561227c57600080fd5b833567ffffffffffffffff8082111561229457600080fd5b6122a087838801611e92565b945060208601359150808211156122b657600080fd5b6122c2878388016121d2565b935060408601359150808211156122d857600080fd5b506120f4868287016121d2565b6000602082840312156122f757600080fd5b813567ffffffffffffffff81111561230e57600080fd5b61200d84828501611e92565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561234257600080fd5b815160048110611a8b57600080fd5b6020808252600a9082015269139bdd0818481c1bdbdb60b21b604082015260600190565b60006020828403121561238757600080fd5b8151611a8b81611e7d565b6000602082840312156123a457600080fd5b815160038110611a8b57600080fd5b6001600160a01b038316815260408101600483106123e157634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b60006020828403121561240057600080fd5b5051919050565b6001600160a01b0384811682528316602082015260606040820181905282516101609183018290526000916124406101c085018361211b565b915060208501516080850152604085015160a0850152606085015160c0850152608085015160e085015260a0850151610100818187015260c08701519150610120828188015260e08801519250610140838189015282890151858901528189015161018089015280890151945050505050605f19848303016101a08501526124c8828261217b565b979650505050505050565b60018060a01b03831681526040602082015260008251606060408401526124fd60a084018261211b565b90506020840151603f1984830301606085015261251a828261211b565b91505060408401516080840152809150509392505050565b600181811c9082168061254657607f821691505b60208210810361256657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016125df576125df6125b7565b5060010190565b6000828210156125f8576125f86125b7565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212205f84e214a7e7909e8baaeac277a9cda1b0238a052b825f0a2fc80c7e3ef4d3db64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4403,
        "contract": "contracts/Service.sol:Service",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7758,
        "contract": "contracts/Service.sol:Service",
        "label": "directory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDirectory)9690"
      },
      {
        "astId": 7760,
        "contract": "contracts/Service.sol:Service",
        "label": "proposalGateway",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7762,
        "contract": "contracts/Service.sol:Service",
        "label": "poolMaster",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7764,
        "contract": "contracts/Service.sol:Service",
        "label": "tokenMaster",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7766,
        "contract": "contracts/Service.sol:Service",
        "label": "tgeMaster",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 7768,
        "contract": "contracts/Service.sol:Service",
        "label": "fee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7770,
        "contract": "contracts/Service.sol:Service",
        "label": "proposalQuorum",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7772,
        "contract": "contracts/Service.sol:Service",
        "label": "proposalThreshold",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7775,
        "contract": "contracts/Service.sol:Service",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ISwapRouter)6609"
      },
      {
        "astId": 7778,
        "contract": "contracts/Service.sol:Service",
        "label": "uniswapQuoter",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IQuoter)6509"
      },
      {
        "astId": 7781,
        "contract": "contracts/Service.sol:Service",
        "label": "_userWhitelist",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(AddressSet)6151_storage"
      },
      {
        "astId": 7784,
        "contract": "contracts/Service.sol:Service",
        "label": "_tokenWhitelist",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(AddressSet)6151_storage"
      },
      {
        "astId": 7788,
        "contract": "contracts/Service.sol:Service",
        "label": "tokenSwapPath",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bytes_storage)"
      },
      {
        "astId": 7792,
        "contract": "contracts/Service.sol:Service",
        "label": "tokenSwapReversePath",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IDirectory)9690": {
        "encoding": "inplace",
        "label": "contract IDirectory",
        "numberOfBytes": "20"
      },
      "t_contract(IQuoter)6509": {
        "encoding": "inplace",
        "label": "contract IQuoter",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)6609": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)6151_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6150,
            "contract": "contracts/Service.sol:Service",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5850_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5850_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5845,
            "contract": "contracts/Service.sol:Service",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5849,
            "contract": "contracts/Service.sol:Service",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}