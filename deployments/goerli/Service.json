{
  "address": "0xdAAe5f081A53F14b925d6209F345Ee81f766154C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDirectory",
          "name": "directory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolBeacon_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "proposalGateway_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenBeacon_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tgeBeacon_",
          "type": "address"
        },
        {
          "internalType": "contract IMetadata",
          "name": "metadata_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        },
        {
          "internalType": "uint256[3]",
          "name": "ballotParams",
          "type": "uint256[3]"
        },
        {
          "internalType": "contract ISwapRouter",
          "name": "uniswapRouter_",
          "type": "address"
        },
        {
          "internalType": "contract IQuoter",
          "name": "uniswapQuoter_",
          "type": "address"
        },
        {
          "internalType": "contract IWhitelistedTokens",
          "name": "whitelistedTokens_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "FeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quorumThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decisionThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lifespan",
          "type": "uint256"
        }
      ],
      "name": "GovernanceSettingsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tge",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tge",
          "type": "address"
        }
      ],
      "name": "SecondaryTGECreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "TokenWhitelistedSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "UserWhitelistedSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ThresholdDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "addProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addUserToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "cap",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGovernanceToken.TokenInfo",
          "name": "tokenInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupTVL",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "userWhitelist",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "unitOfAccount",
              "type": "address"
            }
          ],
          "internalType": "struct ITGE.TGEInfo",
          "name": "tgeInfo",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "ballotQuorumThreshold_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ballotDecisionThreshold_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ballotLifespan_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "jurisdiction",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "trademark",
          "type": "string"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupTVL",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "userWhitelist",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "unitOfAccount",
              "type": "address"
            }
          ],
          "internalType": "struct ITGE.TGEInfo",
          "name": "tgeInfo",
          "type": "tuple"
        }
      ],
      "name": "createSecondaryTGE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBallotDecisionThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBallotLifespan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBallotQuorumThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isUserWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "contract IMetadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolBeacon",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalQuorum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeUserFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ballotQuorumThreshold_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ballotDecisionThreshold_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ballotLifespan_",
          "type": "uint256"
        }
      ],
      "name": "setGovernanceSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolBeacon_",
          "type": "address"
        }
      ],
      "name": "setPoolBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tgeBeacon_",
          "type": "address"
        }
      ],
      "name": "setTGEBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenBeacon_",
          "type": "address"
        }
      ],
      "name": "setTokenBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tgeBeacon",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenBeacon",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenWhitelist",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapQuoter",
      "outputs": [
        {
          "internalType": "contract IQuoter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userWhitelist",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "userWhitelistAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userWhitelistLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistedTokens",
      "outputs": [
        {
          "internalType": "contract IWhitelistedTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xda267bb16fb2aff91e854042591b4e5b273e297620be81ed3c3ebcf078a6c470",
  "receipt": {
    "to": null,
    "from": "0xF89e3d72F182BBcccEfFB7F7d2c9ce796D6547e6",
    "contractAddress": "0xdAAe5f081A53F14b925d6209F345Ee81f766154C",
    "transactionIndex": 33,
    "gasUsed": "3411765",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000010000021000000000000000800a00000000000000000000000000000000400000000000000000000000000000000000000000000000000200000000000000000000000010000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000100000000000000000000000000000080000000000000000000800840000",
    "blockHash": "0xd0c2f7d20766cda82cbdbf2973b516bb4552e04a4a6416641f5b78f2fff1e9e1",
    "transactionHash": "0xda267bb16fb2aff91e854042591b4e5b273e297620be81ed3c3ebcf078a6c470",
    "logs": [
      {
        "transactionIndex": 33,
        "blockNumber": 7375952,
        "transactionHash": "0xda267bb16fb2aff91e854042591b4e5b273e297620be81ed3c3ebcf078a6c470",
        "address": "0xdAAe5f081A53F14b925d6209F345Ee81f766154C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f89e3d72f182bbccceffb7f7d2c9ce796d6547e6"
        ],
        "data": "0x",
        "logIndex": 46,
        "blockHash": "0xd0c2f7d20766cda82cbdbf2973b516bb4552e04a4a6416641f5b78f2fff1e9e1"
      },
      {
        "transactionIndex": 33,
        "blockNumber": 7375952,
        "transactionHash": "0xda267bb16fb2aff91e854042591b4e5b273e297620be81ed3c3ebcf078a6c470",
        "address": "0xdAAe5f081A53F14b925d6209F345Ee81f766154C",
        "topics": [
          "0x20461e09b8e557b77e107939f9ce6544698123aad0fc964ac5cc59b7df2e608f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 47,
        "blockHash": "0xd0c2f7d20766cda82cbdbf2973b516bb4552e04a4a6416641f5b78f2fff1e9e1"
      },
      {
        "transactionIndex": 33,
        "blockNumber": 7375952,
        "transactionHash": "0xda267bb16fb2aff91e854042591b4e5b273e297620be81ed3c3ebcf078a6c470",
        "address": "0xdAAe5f081A53F14b925d6209F345Ee81f766154C",
        "topics": [
          "0xae6075a1f7b230b994c46ac23890f3aea156bbf1195be708ad574a240164a655"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000032",
        "logIndex": 48,
        "blockHash": "0xd0c2f7d20766cda82cbdbf2973b516bb4552e04a4a6416641f5b78f2fff1e9e1"
      }
    ],
    "blockNumber": 7375952,
    "cumulativeGasUsed": "27793949",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7E2E490FD367C8D4dC50c2145edE9B0E1d55b61F",
    "0x73df0a68c85CBFeF108EC6664447cAeEf4E15315",
    "0x9Ea94C63D6b454fCf9a81e7Bb1db05d7f49d8ae5",
    "0xe95238Dc068A069eE0558Ce4A9E7DC6C59Fd6B25",
    "0x090B0FCd34C905d6BEA873Ff2C2C0A65Aa18677E",
    "0x657678294425d55EC2c81D510A56768AA8025E89",
    "0",
    [
      "50",
      "25",
      "50"
    ],
    "0xe592427a0aece92de3edee1f18e0157c05861564",
    "0xb27308f9f90d607463bb33ea1bebb41c27ce5ab6",
    "0x3fd37C8Cc82b25E0a221F09Aa1f3957e7b7b715c"
  ],
  "numDeployments": 1,
  "solcInputHash": "997243aed0f6d9a9bf25071fa8e11a98",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDirectory\",\"name\":\"directory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolBeacon_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposalGateway_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenBeacon_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tgeBeacon_\",\"type\":\"address\"},{\"internalType\":\"contract IMetadata\",\"name\":\"metadata_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"ballotParams\",\"type\":\"uint256[3]\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"uniswapRouter_\",\"type\":\"address\"},{\"internalType\":\"contract IQuoter\",\"name\":\"uniswapQuoter_\",\"type\":\"address\"},{\"internalType\":\"contract IWhitelistedTokens\",\"name\":\"whitelistedTokens_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorumThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decisionThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lifespan\",\"type\":\"uint256\"}],\"name\":\"GovernanceSettingsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"}],\"name\":\"SecondaryTGECreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"TokenWhitelistedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"UserWhitelistedSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ThresholdDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"addProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addUserToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"internalType\":\"struct IGovernanceToken.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"userWhitelist\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"unitOfAccount\",\"type\":\"address\"}],\"internalType\":\"struct ITGE.TGEInfo\",\"name\":\"tgeInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"ballotQuorumThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotDecisionThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotLifespan_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"trademark\",\"type\":\"string\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"userWhitelist\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"unitOfAccount\",\"type\":\"address\"}],\"internalType\":\"struct ITGE.TGEInfo\",\"name\":\"tgeInfo\",\"type\":\"tuple\"}],\"name\":\"createSecondaryTGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBallotDecisionThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBallotLifespan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBallotQuorumThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isUserWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"contract IMetadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolBeacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeUserFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ballotQuorumThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotDecisionThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotLifespan_\",\"type\":\"uint256\"}],\"name\":\"setGovernanceSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolBeacon_\",\"type\":\"address\"}],\"name\":\"setPoolBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tgeBeacon_\",\"type\":\"address\"}],\"name\":\"setTGEBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenBeacon_\",\"type\":\"address\"}],\"name\":\"setTokenBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeBeacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBeacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapQuoter\",\"outputs\":[{\"internalType\":\"contract IQuoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"userWhitelistAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userWhitelistLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"contract IWhitelistedTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Service.sol\":\"Service\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\",\"keccak256\":\"0x54878f0d2f40b5e13f84977bcd3c71d4c38581414e7efb4909cb16dd3ace392f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Service.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n// import \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n// import \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\nimport \\\"./interfaces/IService.sol\\\";\\nimport \\\"./interfaces/IDirectory.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IGovernanceToken.sol\\\";\\nimport \\\"./interfaces/ITGE.sol\\\";\\nimport \\\"./interfaces/IMetadata.sol\\\";\\nimport \\\"./interfaces/IWhitelistedTokens.sol\\\";\\n\\ncontract Service is IService, Ownable { // OwnableUpgradeable {\\n    // using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IMetadata public metadata;\\n\\n    uint256 public constant ThresholdDecimals = 2;\\n\\n    IDirectory public directory;\\n\\n    IWhitelistedTokens public whitelistedTokens;\\n\\n    address public proposalGateway;\\n\\n    address public poolBeacon;\\n\\n    address public tokenBeacon;\\n\\n    address public tgeBeacon;\\n\\n    uint256 public fee;\\n\\n    uint256 public proposalQuorum;\\n\\n    uint256 public proposalThreshold;\\n\\n    uint256 private _ballotQuorumThreshold; \\n\\n    uint256 private _ballotDecisionThreshold; \\n\\n    uint256 private _ballotLifespan; \\n\\n    ISwapRouter public uniswapRouter;\\n\\n    IQuoter public uniswapQuoter;\\n\\n    EnumerableSet.AddressSet private _userWhitelist;\\n\\n    // EnumerableSetUpgradeable.AddressSet private _userWhitelist;\\n\\n    // EnumerableSet.AddressSet private _tokenWhitelist;\\n\\n    // mapping(address => bytes) public tokenSwapPath;\\n\\n    // mapping(address => bytes) public tokenSwapReversePath;\\n\\n    // EVENTS\\n\\n    event UserWhitelistedSet(address account, bool whitelisted);\\n\\n    event TokenWhitelistedSet(address token, bool whitelisted);\\n\\n    event FeeSet(uint256 fee);\\n\\n    event PoolCreated(address pool, address token, address tge);\\n\\n    event SecondaryTGECreated(address pool, address tge);\\n\\n    event GovernanceSettingsSet(uint256 quorumThreshold, uint256 decisionThreshold, uint256 lifespan);\\n\\n    // event QueueCreated(address queueContract);\\n\\n    // CONSTRUCTOR\\n\\n    constructor( // function initialize(\\n        IDirectory directory_,\\n        address poolBeacon_,\\n        address proposalGateway_,\\n        address tokenBeacon_,\\n        address tgeBeacon_,\\n        IMetadata metadata_,\\n        uint256 fee_,\\n        uint256[3] memory ballotParams,\\n        ISwapRouter uniswapRouter_,\\n        IQuoter uniswapQuoter_,\\n        IWhitelistedTokens whitelistedTokens_\\n    ) { // external initializer {\\n        // __Ownable_init();\\n        directory = directory_;\\n        proposalGateway = proposalGateway_;\\n        poolBeacon = poolBeacon_;\\n        tokenBeacon = tokenBeacon_;\\n        tgeBeacon = tgeBeacon_;\\n        metadata = metadata_;\\n        fee = fee_;\\n        _ballotQuorumThreshold = ballotParams[0];\\n        _ballotDecisionThreshold = ballotParams[1];\\n        _ballotLifespan = ballotParams[2];\\n        uniswapRouter = uniswapRouter_;\\n        uniswapQuoter = uniswapQuoter_;\\n        whitelistedTokens = whitelistedTokens_;\\n\\n        // address metadataContract = metadataMaster.clone();\\n        // metadata = IMetadata(metadataContract);\\n        // metadata.initialize(msg.sender);\\n\\n        // emit QueueCreated(metadataContract);\\n        emit FeeSet(fee_);\\n        emit GovernanceSettingsSet(ballotParams[0], ballotParams[1], ballotParams[2]);\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    function createPool(\\n        IPool pool,\\n        IGovernanceToken.TokenInfo memory tokenInfo,\\n        ITGE.TGEInfo memory tgeInfo,\\n        uint256 ballotQuorumThreshold_, \\n        uint256 ballotDecisionThreshold_, \\n        uint256 ballotLifespan_,\\n        uint256 jurisdiction, \\n        string memory trademark\\n    ) external payable onlyWhitelisted {\\n        require(\\n            whitelistedTokens.isTokenWhitelisted(tgeInfo.unitOfAccount) || tgeInfo.unitOfAccount == address(0), \\n            \\\"Invalid UnitOfAccount\\\"\\n        );\\n\\n        if (address(pool) == address(0)) {\\n            require(msg.value == fee, \\\"Incorrect fee passed\\\");\\n\\n            uint256 id = metadata.lockRecord(jurisdiction);\\n            require(id > 0, \\\"Avaliable company not found\\\");\\n            string[5] memory infoParams = metadata.getInfo(id);\\n\\n            // pool = IPool(poolMaster.clone());\\n            pool = IPool(address(new BeaconProxy(poolBeacon, \\\"\\\")));\\n            pool.initialize(\\n                msg.sender, \\n                jurisdiction, \\n                infoParams[0], \\n                infoParams[1], \\n                infoParams[2], \\n                infoParams[3], \\n                infoParams[4], \\n                ballotQuorumThreshold_, \\n                ballotDecisionThreshold_, \\n                ballotLifespan_,\\n                trademark\\n            );\\n            metadata.setOwner(id, address(pool));\\n\\n            directory.addContractRecord(\\n                address(pool),\\n                IDirectory.ContractType.Pool\\n            );\\n        } else {\\n            require(\\n                directory.typeOf(address(pool)) == IDirectory.ContractType.Pool,\\n                \\\"Not a pool\\\"\\n            );\\n            require(msg.sender == pool.owner(), \\\"Sender is not pool owner\\\");\\n            require(\\n                pool.tge().state() == ITGE.State.Failed,\\n                \\\"Previous TGE not failed\\\"\\n            );\\n        }\\n\\n        // address token = tokenMaster.clone();\\n        IGovernanceToken token = IGovernanceToken(address(new BeaconProxy(tokenBeacon, \\\"\\\")));\\n        directory.addContractRecord(\\n            address(token),\\n            IDirectory.ContractType.GovernanceToken\\n        );\\n        // address tge = tgeMaster.clone();\\n        ITGE tge = ITGE(address(new BeaconProxy(tgeBeacon, \\\"\\\")));\\n        directory.addContractRecord(address(tge), IDirectory.ContractType.TGE);\\n\\n        if (address(pool) == address(0)) {\\n            token.initialize(address(pool), tokenInfo);\\n        } else {\\n            token.initialize(\\n                address(pool), \\n                IGovernanceToken.TokenInfo({\\n                    name: pool.getPoolTrademark(),\\n                    symbol: tokenInfo.symbol,\\n                    cap: tokenInfo.cap\\n                })\\n            );\\n        }\\n        pool.setToken(address(token));\\n        tge.initialize(msg.sender, address(token), tgeInfo);\\n        pool.setTGE(address(tge));\\n\\n        emit PoolCreated(address(pool), address(token), address(tge));\\n    }\\n\\n    // PUBLIC INDIRECT FUNCTIONS (CALLED THROUGH POOL)\\n\\n    function createSecondaryTGE(ITGE.TGEInfo memory tgeInfo)\\n        external\\n        override\\n        onlyPool\\n    {\\n        require(\\n            IPool(msg.sender).tge().state() != ITGE.State.Active,\\n            \\\"Has active TGE\\\"\\n        );\\n        require(\\n            whitelistedTokens.isTokenWhitelisted(tgeInfo.unitOfAccount) || tgeInfo.unitOfAccount == address(0), \\n            \\\"Invalid UnitOfAccount\\\"\\n        );\\n\\n        // address tge = tgeMaster.clone();\\n        ITGE tge = ITGE(address(new BeaconProxy(tgeBeacon, \\\"\\\")));\\n        directory.addContractRecord(address(tge), IDirectory.ContractType.TGE);\\n        tge.initialize(\\n            msg.sender,\\n            address(IPool(msg.sender).token()),\\n            tgeInfo\\n        );\\n        IPool(msg.sender).setTGE(address(tge));\\n\\n        emit SecondaryTGECreated(msg.sender, address(tge));\\n    }\\n\\n    function addProposal(uint256 proposalId) external onlyPool {\\n        directory.addProposalRecord(msg.sender, proposalId);\\n    }\\n\\n    // RESTRICTED FUNCTIONS\\n\\n    function addUserToWhitelist(address account) external onlyOwner {\\n        require(_userWhitelist.add(account), \\\"Already whitelisted\\\");\\n        emit UserWhitelistedSet(account, true);\\n    }\\n\\n    function removeUserFromWhitelist(address account) external onlyOwner {\\n        require(_userWhitelist.remove(account), \\\"Already not whitelisted\\\");\\n        emit UserWhitelistedSet(account, false);\\n    }\\n\\n    // function addTokensToWhitelist(\\n    //     address[] memory tokens,\\n    //     bytes[] memory swapPaths,\\n    //     bytes[] memory swapReversePaths\\n    // ) external onlyOwner {\\n    //     for (uint256 i = 0; i < tokens.length; i++) {\\n    //         require(_tokenWhitelist.add(tokens[i]), \\\"Already whitelisted\\\");\\n    //         tokenSwapPath[tokens[i]] = swapPaths[i];\\n    //         tokenSwapReversePath[tokens[i]] = swapReversePaths[i];\\n    //         emit TokenWhitelistedSet(tokens[i], true);\\n    //     }\\n    // }\\n\\n    // function removeTokensFromWhitelist(address[] memory tokens)\\n    //     external\\n    //     onlyOwner\\n    // {\\n    //     for (uint256 i = 0; i < tokens.length; i++) {\\n    //         require(\\n    //             _tokenWhitelist.remove(tokens[i]),\\n    //             \\\"Already not whitelisted\\\"\\n    //         );\\n    //         emit TokenWhitelistedSet(tokens[i], false);\\n    //     }\\n    // }\\n\\n    function setPoolBeacon(address poolBeacon_) external onlyOwner {\\n        require(poolBeacon_ != address(0), \\\"Invalid address\\\");\\n        poolBeacon = poolBeacon_;\\n    }\\n\\n    function setTokenBeacon(address tokenBeacon_) external onlyOwner {\\n        require(tokenBeacon_ != address(0), \\\"Invalid address\\\");\\n        tokenBeacon = tokenBeacon_;\\n    }\\n\\n    function setTGEBeacon(address tgeBeacon_) external onlyOwner {\\n        require(tgeBeacon_ != address(0), \\\"Invalid address\\\");\\n        tgeBeacon = tgeBeacon_;\\n    }\\n\\n    function setFee(uint256 fee_) external onlyOwner {\\n        fee = fee_;\\n        emit FeeSet(fee_);\\n    }\\n\\n    function transferFunds(address to) external onlyOwner {\\n        payable(to).transfer(payable(address(this)).balance);\\n    }\\n\\n    function setGovernanceSettings(\\n        uint256 ballotQuorumThreshold_, \\n        uint256 ballotDecisionThreshold_, \\n        uint256 ballotLifespan_\\n    ) external onlyOwner {\\n        require(ballotQuorumThreshold_ <= 10000, \\\"Invalid ballotQuorumThreshold\\\");\\n        require(ballotDecisionThreshold_ <= 10000, \\\"Invalid ballotDecisionThreshold\\\");\\n        require(ballotLifespan_ > 0, \\\"Invalid ballotLifespan\\\");\\n\\n        _ballotQuorumThreshold = ballotQuorumThreshold_;\\n        _ballotDecisionThreshold = ballotDecisionThreshold_;\\n        _ballotLifespan = ballotLifespan_;\\n\\n        emit GovernanceSettingsSet(ballotQuorumThreshold_, ballotDecisionThreshold_, ballotLifespan_);\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    function isUserWhitelisted(address account) public view returns (bool) {\\n        return _userWhitelist.contains(account);\\n    }\\n\\n    function userWhitelist() external view returns (address[] memory) {\\n        return _userWhitelist.values();\\n    }\\n\\n    function userWhitelistLength() external view returns (uint256) {\\n        return _userWhitelist.length();\\n    }\\n\\n    function userWhitelistAt(uint256 index) external view returns (address) {\\n        return _userWhitelist.at(index);\\n    }\\n\\n    // function tokenWhitelist()\\n    //     external\\n    //     view\\n    //     override\\n    //     returns (address[] memory)\\n    // {\\n    //     return _tokenWhitelist.values();\\n    // }\\n\\n    function tokenWhitelist() external view returns (address[] memory) {\\n        return whitelistedTokens.tokenWhitelist();\\n    }\\n\\n    function owner() public view override(IService, Ownable) returns (address) {\\n        return super.owner();\\n    }\\n\\n    function getBallotQuorumThreshold() public view returns (uint256) {\\n        return _ballotQuorumThreshold;\\n    }\\n\\n    function getBallotDecisionThreshold() public view returns (uint256) {\\n        return _ballotDecisionThreshold;\\n    }\\n\\n    function getBallotLifespan() public view returns (uint256) {\\n        return _ballotLifespan;\\n    }\\n\\n    // MODIFIERS\\n\\n    modifier onlyWhitelisted() {\\n        require(isUserWhitelisted(msg.sender), \\\"Not whitelisted\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(\\n            directory.typeOf(msg.sender) == IDirectory.ContractType.Pool,\\n            \\\"Not a pool\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xa6a0c286191766fc60eb03f575b14b2f85095893ec9cc3fd9f6cfbbd899cd5aa\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IDirectory {\\n    enum ContractType {\\n        None,\\n        Pool,\\n        GovernanceToken,\\n        TGE\\n    }\\n\\n    function addContractRecord(address addr, ContractType contractType)\\n        external\\n        returns (uint256 index);\\n\\n    function addProposalRecord(address pool, uint256 proposalId)\\n        external\\n        returns (uint256 index);\\n\\n    function typeOf(address addr) external view returns (ContractType);\\n}\\n\",\"keccak256\":\"0x39fc90b444e9aefc4e2a3a40b43840dfa44ff13441a9e50d3de9bb95f044bd81\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./IService.sol\\\";\\n\\ninterface IGovernanceToken is IERC20Upgradeable {\\n    struct TokenInfo {\\n        string name;\\n        string symbol;\\n        uint256 cap;\\n    }\\n\\n    function initialize(address pool_, TokenInfo memory info) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function lock(\\n        address account,\\n        uint256 amount,\\n        uint256 deadline\\n    ) external;\\n\\n    function cap() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function service() external view returns (IService);\\n}\\n\",\"keccak256\":\"0x7ab5e082a0b9d346827f0737d19904b5ff18b9fdb91fe676675e92c8a60afffc\",\"license\":\"MIT\"},\"contracts/interfaces/IMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IMetadata {\\n    enum Status {NotUsed, Used}\\n\\n    struct QueueInfo {\\n        uint256 jurisdiction;\\n        string serialNumber;\\n        string dateOfIncorporation;\\n        string legalAddress;\\n        string taxationStatus;\\n        string registeredName;\\n        Status status;\\n        address owner;\\n    }\\n\\n    function initialize() external;\\n\\n    function lockRecord(uint256 jurisdiction) external returns (uint256);\\n\\n    function getInfo(uint256 id) external view returns (string[5] memory);\\n\\n    function getQueueInfo(uint256 id) external view returns (QueueInfo memory);\\n\\n    function setOwner(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x23b41d34da7eb536d0fb8ba2fe0ea089dc9ca9b5726dccfb0f4e11cf66625050\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IService.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./IGovernanceToken.sol\\\";\\n\\ninterface IPool {\\n    function initialize(\\n        address poolCreator_, \\n        uint256 jurisdiction_, \\n        string memory poolEIN_, \\n        string memory dateOfIncorporation, \\n        string memory legalAddress, \\n        string memory taxationStatus, \\n        string memory registeredName, \\n        uint256 ballotQuorumThreshold_, \\n        uint256 ballotDecisionThreshold_, \\n        uint256 ballotLifespan_, \\n        string memory trademark\\n    ) external;\\n\\n    function setToken(address token_) external;\\n\\n    function setTGE(address tge_) external;\\n\\n    function setGovernanceSettings(\\n        uint256 ballotQuorumThreshold_, \\n        uint256 ballotDecisionThreshold_, \\n        uint256 ballotLifespan_\\n    ) external;\\n\\n    function proposeSingleAction(\\n        address target,\\n        uint256 value,\\n        bytes memory cd,\\n        string memory description\\n    ) external returns (uint256 proposalId);\\n\\n    function getTVL() external returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function service() external view returns (IService);\\n\\n    function token() external view returns (IGovernanceToken);\\n\\n    function tge() external view returns (ITGE);\\n\\n    function getPoolTrademark() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95d6f96a3615373e47e7673db24f34ef773e693aae1bf2a746ae26d42e5c84bb\",\"license\":\"MIT\"},\"contracts/interfaces/IService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\nimport \\\"./IDirectory.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./IMetadata.sol\\\";\\nimport \\\"./IWhitelistedTokens.sol\\\";\\n\\ninterface IService {\\n    // function initialize(\\n    //     IDirectory directory_,\\n    //     address poolBeacon_,\\n    //     address proposalGateway_,\\n    //     address tokenBeacon_,\\n    //     address tgeBeacon_,\\n    //     IMetadata metadata_,\\n    //     uint256 fee_,\\n    //     uint256[3] memory ballotParams,\\n    //     ISwapRouter uniswapRouter_,\\n    //     IQuoter uniswapQuoter_,\\n    //     IWhitelistedTokens whitelistedTokens_\\n    // ) external;\\n\\n    function createSecondaryTGE(ITGE.TGEInfo memory tgeInfo) external;\\n\\n    function addProposal(uint256 proposalId) external;\\n\\n    function directory() external view returns (IDirectory);\\n\\n    // function isTokenWhitelisted(address token) external view returns (bool);\\n\\n    function tokenWhitelist() external view returns (address[] memory);\\n\\n    function owner() external view returns (address);\\n\\n    function proposalGateway() external view returns (address);\\n\\n    function proposalQuorum() external view returns (uint256);\\n\\n    function proposalThreshold() external view returns (uint256);\\n\\n    function uniswapRouter() external view returns (ISwapRouter);\\n\\n    function uniswapQuoter() external view returns (IQuoter);\\n\\n    function whitelistedTokens() external view returns (IWhitelistedTokens);\\n\\n    function metadata() external view returns (IMetadata);\\n\\n    // function tokenSwapPath(address) external view returns (bytes memory);\\n\\n    // function tokenSwapReversePath(address) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x6cf37fd103eb7aa038c76fca9746a5244ca58967273195c7bac4464669322cea\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface ITGE {\\n    struct TGEInfo {\\n        string metadataURI;\\n        uint256 price;\\n        uint256 hardcap;\\n        uint256 softcap;\\n        uint256 minPurchase;\\n        uint256 maxPurchase;\\n        uint256 lockupPercent;\\n        uint256 lockupDuration;\\n        uint256 lockupTVL;\\n        uint256 duration;\\n        address[] userWhitelist;\\n        address unitOfAccount;\\n    }\\n\\n    function initialize(\\n        address owner_,\\n        address token_,\\n        TGEInfo memory info\\n    ) external;\\n\\n    function redeem() external;\\n\\n    function maxPurchaseOf(address account) external view returns (uint256);\\n\\n    enum State {\\n        Active,\\n        Failed,\\n        Successful\\n    }\\n\\n    function state() external view returns (State);\\n}\\n\",\"keccak256\":\"0x32c1ee5dd0dc081a1305a264b21a373de51ff99da7d863d174114eaca7e0a1ef\",\"license\":\"MIT\"},\"contracts/interfaces/IWhitelistedTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IWhitelistedTokens {\\n    function tokenWhitelist() external view returns (address[] memory);\\n\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n\\n    function tokenSwapPath(address) external view returns (bytes memory);\\n\\n    function tokenSwapReversePath(address) external view returns (bytes memory);\\n}\",\"keccak256\":\"0x746c443b0542a134fb619d2db969647bc14dbe5c318089818cf7f738a67c7be1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003a9238038062003a928339810160408190526200003491620001ea565b6200003f336200016f565b600280546001600160a01b038d81166001600160a01b031992831617909255600480548c8416908316179055600580548d8416908316179055600680548b8416908316179055600780548a84169083161790556001805489841690831617905560088790558551600b55602080870151600c55604080880151600d55600e80548416888616179055600f80548416878616179055600380549093169385169390931790915590518681527f20461e09b8e557b77e107939f9ce6544698123aad0fc964ac5cc59b7df2e608f910160405180910390a183516020808601516040808801518151948552928401919091528201527fae6075a1f7b230b994c46ac23890f3aea156bbf1195be708ad574a240164a6559060600160405180910390a1505050505050505050505062000341565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620001d557600080fd5b50565b8051620001e581620001bf565b919050565b60008060008060008060008060008060006101a08c8e0312156200020d57600080fd5b8b516200021a81620001bf565b60208d0151909b506200022d81620001bf565b60408d0151909a506200024081620001bf565b60608d01519099506200025381620001bf565b60808d01519098506200026681620001bf565b60a08d01519097506200027981620001bf565b8096505060c08c015194508c60ff8d01126200029457600080fd5b604051606081016001600160401b0381118282101715620002c557634e487b7160e01b600052604160045260246000fd5b604052806101408e018f811115620002dc57600080fd5b60e08f015b81811015620002fb578051835260209283019201620002e1565b508296506200030a81620001d8565b95505050506200031e6101608d01620001d8565b91506200032f6101808d01620001d8565b90509295989b509295989b9093969950565b61374180620003516000396000f3fe6080604052600436106200022f5760003560e01c806394218737116200012f578063d419f54711620000ad578063e39ff19f1162000078578063e39ff19f1462000601578063f2fde38b1462000626578063f7f5e5a6146200064b578063f9902bb11462000670578063fb237eb2146200069557600080fd5b8063d419f5471462000595578063da96043114620005ba578063dad01e5b14620005d1578063ddca3f4314620005e957600080fd5b8063b58131b011620000fa578063b58131b014620004ff578063c41c2f241462000517578063c5a7b2ea1462000539578063ca735cc1146200055b578063ccf5a77c146200057357600080fd5b80639421873714620004845780639459c17314620004ab5780639a0b6f9b14620004d0578063a1db8b4c14620004e857600080fd5b806369fe0e2d11620001bd578063735de9f71162000188578063735de9f714620003e5578063747b8050146200040757806378809b83146200042c57806386c36a6b146200044d5780638da5cb5b146200046457600080fd5b806369fe0e2d146200036c5780636aca4f4914620003915780636e0e69f914620003a8578063715018a614620003cd57600080fd5b8063392f37e911620001fe578063392f37e914620002e15780633fec91a414620003035780634db4a35214620003285780635e1762a0146200034a57600080fd5b806301569ab0146200023457806304e31dfb14620002735780630f842e0c1462000295578063168dfb5014620002bc575b600080fd5b3480156200024157600080fd5b5060075462000256906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200028057600080fd5b5060045462000256906001600160a01b031681565b348015620002a257600080fd5b50620002ba620002b4366004620021f0565b620006cb565b005b348015620002c957600080fd5b50620002ba620002db36600462002210565b6200074c565b348015620002ee57600080fd5b5060015462000256906001600160a01b031681565b3480156200031057600080fd5b50620002ba620003223660046200223d565b620008c1565b3480156200033557600080fd5b50600f5462000256906001600160a01b031681565b3480156200035757600080fd5b5060035462000256906001600160a01b031681565b3480156200037957600080fd5b50620002ba6200038b3660046200223d565b620009e1565b620002ba620003a2366004620025a7565b62000a4a565b348015620003b557600080fd5b50620002ba620003c736600462002673565b620015d1565b348015620003da57600080fd5b50620002ba62001a98565b348015620003f257600080fd5b50600e5462000256906001600160a01b031681565b3480156200041457600080fd5b50620002ba62000426366004620021f0565b62001ad3565b3480156200043957600080fd5b50600c545b6040519081526020016200026a565b3480156200045a57600080fd5b506200043e600281565b3480156200047157600080fd5b506000546001600160a01b031662000256565b3480156200049157600080fd5b506200049c62001b96565b6040516200026a9190620026b4565b348015620004b857600080fd5b5062000256620004ca3660046200223d565b62001ba4565b348015620004dd57600080fd5b506200043e60095481565b348015620004f557600080fd5b50600b546200043e565b3480156200050c57600080fd5b506200043e600a5481565b3480156200052457600080fd5b5060025462000256906001600160a01b031681565b3480156200054657600080fd5b5060055462000256906001600160a01b031681565b3480156200056857600080fd5b506200049c62001bb9565b3480156200058057600080fd5b5060065462000256906001600160a01b031681565b348015620005a257600080fd5b50620002ba620005b4366004620021f0565b62001c2e565b348015620005c757600080fd5b50600d546200043e565b348015620005de57600080fd5b506200043e62001ca6565b348015620005f657600080fd5b506200043e60085481565b3480156200060e57600080fd5b50620002ba62000620366004620021f0565b62001cb4565b3480156200063357600080fd5b50620002ba62000645366004620021f0565b62001d18565b3480156200065857600080fd5b50620002ba6200066a366004620021f0565b62001dba565b3480156200067d57600080fd5b50620002ba6200068f366004620021f0565b62001e32565b348015620006a257600080fd5b50620006ba620006b4366004620021f0565b62001efa565b60405190151581526020016200026a565b6000546001600160a01b03163314620007015760405162461bcd60e51b8152600401620006f89062002703565b60405180910390fd5b6001600160a01b0381166200072a5760405162461bcd60e51b8152600401620006f89062002738565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314620007795760405162461bcd60e51b8152600401620006f89062002703565b612710831115620007cd5760405162461bcd60e51b815260206004820152601d60248201527f496e76616c69642062616c6c6f7451756f72756d5468726573686f6c640000006044820152606401620006f8565b612710821115620008215760405162461bcd60e51b815260206004820152601f60248201527f496e76616c69642062616c6c6f744465636973696f6e5468726573686f6c64006044820152606401620006f8565b600081116200086c5760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103130b63637ba2634b332b9b830b760511b6044820152606401620006f8565b600b839055600c829055600d81905560408051848152602081018490529081018290527fae6075a1f7b230b994c46ac23890f3aea156bbf1195be708ad574a240164a6559060600160405180910390a1505050565b600254604051630db9619f60e31b81523360048201526001916001600160a01b031690636dcb0cf890602401602060405180830381865afa1580156200090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000931919062002777565b600381111562000945576200094562002761565b14620009655760405162461bcd60e51b8152600401620006f8906200279a565b60025460405163f4be936960e01b8152336004820152602481018390526001600160a01b039091169063f4be9369906044016020604051808303816000875af1158015620009b7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009dd9190620027be565b5050565b6000546001600160a01b0316331462000a0e5760405162461bcd60e51b8152600401620006f89062002703565b60088190556040518181527f20461e09b8e557b77e107939f9ce6544698123aad0fc964ac5cc59b7df2e608f906020015b60405180910390a150565b62000a553362001efa565b62000a955760405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b6044820152606401620006f8565b60035461016087015160405163b5af090f60e01b81526001600160a01b03918216600482015291169063b5af090f90602401602060405180830381865afa15801562000ae5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b0b9190620027d8565b8062000b2357506101608601516001600160a01b0316155b62000b695760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a5908155b9a5d13d99058d8dbdd5b9d605a1b6044820152606401620006f8565b6001600160a01b03881662000ecd57600854341462000bc25760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd08199959481c185cdcd95960621b6044820152606401620006f8565b600154604051630ca3d0fb60e01b8152600481018490526000916001600160a01b031690630ca3d0fb906024016020604051808303816000875af115801562000c0f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c359190620027be565b90506000811162000c895760405162461bcd60e51b815260206004820152601b60248201527f4176616c6961626c6520636f6d70616e79206e6f7420666f756e6400000000006044820152606401620006f8565b600154604051630d1e6acd60e11b8152600481018390526000916001600160a01b031690631a3cd59a90602401600060405180830381865afa15801562000cd4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000cfe91908101906200287b565b6005546040519192506001600160a01b03169062000d1c90620021ba565b62000d28919062002921565b604051809103906000f08015801562000d45573d6000803e3d6000fd5b5099506001600160a01b038a1663acec84dc3386846000602002015185600160200201518660026020020151876003602002015188600460200201518f8f8f8e6040518c63ffffffff1660e01b815260040162000dad9b9a9998979695949392919062002988565b600060405180830381600087803b15801562000dc857600080fd5b505af115801562000ddd573d6000803e3d6000fd5b5050600154604051637fd3924760e01b8152600481018690526001600160a01b038e811660248301529091169250637fd392479150604401600060405180830381600087803b15801562000e3057600080fd5b505af115801562000e45573d6000803e3d6000fd5b50506002546040516303203cd960e21b81526001600160a01b039091169250630c80f364915062000e7e908d9060019060040162002a4b565b6020604051808303816000875af115801562000e9e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ec49190620027be565b50505062001168565b600254604051630db9619f60e31b81526001600160a01b038a811660048301526001921690636dcb0cf890602401602060405180830381865afa15801562000f19573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f3f919062002777565b600381111562000f535762000f5362002761565b1462000f735760405162461bcd60e51b8152600401620006f8906200279a565b876001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000fb2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fd8919062002a87565b6001600160a01b0316336001600160a01b0316146200103a5760405162461bcd60e51b815260206004820152601860248201527f53656e646572206973206e6f7420706f6f6c206f776e657200000000000000006044820152606401620006f8565b6001886001600160a01b031663a7497fa56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200107b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010a1919062002a87565b6001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620010df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001105919062002aa7565b600281111562001119576200111962002761565b14620011685760405162461bcd60e51b815260206004820152601760248201527f50726576696f757320544745206e6f74206661696c65640000000000000000006044820152606401620006f8565b6006546040516000916001600160a01b0316906200118690620021ba565b62001192919062002921565b604051809103906000f080158015620011af573d6000803e3d6000fd5b50600280546040516303203cd960e21b81529293506001600160a01b031691630c80f36491620011e59185919060040162002a4b565b6020604051808303816000875af115801562001205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200122b9190620027be565b506007546040516000916001600160a01b0316906200124a90620021ba565b62001256919062002921565b604051809103906000f08015801562001273573d6000803e3d6000fd5b506002546040516303203cd960e21b81529192506001600160a01b031690630c80f36490620012aa90849060039060040162002a4b565b6020604051808303816000875af1158015620012ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012f09190620027be565b506001600160a01b038a166200136a576040516322ae8aef60e01b81526001600160a01b038316906322ae8aef9062001330908d908d9060040162002aca565b600060405180830381600087803b1580156200134b57600080fd5b505af115801562001360573d6000803e3d6000fd5b5050505062001459565b816001600160a01b03166322ae8aef8b60405180606001604052808e6001600160a01b0316630f74fdb06040518163ffffffff1660e01b8152600401600060405180830381865afa158015620013c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620013ee919081019062002b2d565b81526020018d6020015181526020018d604001518152506040518363ffffffff1660e01b81526004016200142492919062002aca565b600060405180830381600087803b1580156200143f57600080fd5b505af115801562001454573d6000803e3d6000fd5b505050505b60405163144fa6d760e01b81526001600160a01b0383811660048301528b169063144fa6d790602401600060405180830381600087803b1580156200149d57600080fd5b505af1158015620014b2573d6000803e3d6000fd5b5050604051633a7d190b60e01b81526001600160a01b0384169250633a7d190b9150620014e890339086908d9060040162002bac565b600060405180830381600087803b1580156200150357600080fd5b505af115801562001518573d6000803e3d6000fd5b505060405163024aa90f60e61b81526001600160a01b0384811660048301528d1692506392aa43c09150602401600060405180830381600087803b1580156200156057600080fd5b505af115801562001575573d6000803e3d6000fd5b5050604080516001600160a01b038e81168252868116602083015285168183015290517f9c5d829b9b23efc461f9aeef91979ec04bb903feb3bee4f26d22114abfc7335b9350908190036060019150a150505050505050505050565b600254604051630db9619f60e31b81523360048201526001916001600160a01b031690636dcb0cf890602401602060405180830381865afa1580156200161b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001641919062002777565b600381111562001655576200165562002761565b14620016755760405162461bcd60e51b8152600401620006f8906200279a565b6000336001600160a01b031663a7497fa56040518163ffffffff1660e01b8152600401602060405180830381865afa158015620016b6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016dc919062002a87565b6001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200171a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001740919062002aa7565b600281111562001754576200175462002761565b03620017945760405162461bcd60e51b815260206004820152600e60248201526d486173206163746976652054474560901b6044820152606401620006f8565b60035461016082015160405163b5af090f60e01b81526001600160a01b03918216600482015291169063b5af090f90602401602060405180830381865afa158015620017e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200180a9190620027d8565b806200182257506101608101516001600160a01b0316155b620018685760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a5908155b9a5d13d99058d8dbdd5b9d605a1b6044820152606401620006f8565b6007546040516000916001600160a01b0316906200188690620021ba565b62001892919062002921565b604051809103906000f080158015620018af573d6000803e3d6000fd5b506002546040516303203cd960e21b81529192506001600160a01b031690630c80f36490620018e690849060039060040162002a4b565b6020604051808303816000875af115801562001906573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200192c9190620027be565b50806001600160a01b0316633a7d190b33336001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200197c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019a2919062002a87565b856040518463ffffffff1660e01b8152600401620019c39392919062002bac565b600060405180830381600087803b158015620019de57600080fd5b505af1158015620019f3573d6000803e3d6000fd5b505060405163024aa90f60e61b81526001600160a01b03841660048201523392506392aa43c09150602401600060405180830381600087803b15801562001a3957600080fd5b505af115801562001a4e573d6000803e3d6000fd5b5050604080513381526001600160a01b03851660208201527f0e3dbd8c6caab1c68013fb13d63b7ff61db8fed8b3e7ce4e8e294ee1d0c22e8e935001905060405180910390a15050565b6000546001600160a01b0316331462001ac55760405162461bcd60e51b8152600401620006f89062002703565b62001ad1600062001f09565b565b6000546001600160a01b0316331462001b005760405162461bcd60e51b8152600401620006f89062002703565b62001b0d60108262001f59565b62001b515760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481dda1a5d195b1a5cdd1959606a1b6044820152606401620006f8565b604080516001600160a01b0383168152600160208201527fdf3714d6f88cdae2b889250b70116def7fb5083073c65cce38b56d2b0b0ef64e910162000a3f565b905090565b606062001b91601062001f77565b600062001bb360108362001f86565b92915050565b6003546040805163ca735cc160e01b815290516060926001600160a01b03169163ca735cc19160048083019260009291908290030181865afa15801562001c04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001b91919081019062002ca0565b6000546001600160a01b0316331462001c5b5760405162461bcd60e51b8152600401620006f89062002703565b6001600160a01b03811662001c845760405162461bcd60e51b8152600401620006f89062002738565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600062001b91601062001f94565b6000546001600160a01b0316331462001ce15760405162461bcd60e51b8152600401620006f89062002703565b6040516001600160a01b03821690303180156108fc02916000818181858888f19350505050158015620009dd573d6000803e3d6000fd5b6000546001600160a01b0316331462001d455760405162461bcd60e51b8152600401620006f89062002703565b6001600160a01b03811662001dac5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620006f8565b62001db78162001f09565b50565b6000546001600160a01b0316331462001de75760405162461bcd60e51b8152600401620006f89062002703565b6001600160a01b03811662001e105760405162461bcd60e51b8152600401620006f89062002738565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331462001e5f5760405162461bcd60e51b8152600401620006f89062002703565b62001e6c60108262001f9f565b62001eba5760405162461bcd60e51b815260206004820152601760248201527f416c7265616479206e6f742077686974656c69737465640000000000000000006044820152606401620006f8565b604080516001600160a01b0383168152600060208201527fdf3714d6f88cdae2b889250b70116def7fb5083073c65cce38b56d2b0b0ef64e910162000a3f565b600062001bb360108362001fb6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600062001f70836001600160a01b03841662001fd9565b9392505050565b6060600062001f70836200202b565b600062001f70838362002089565b600062001bb3825490565b600062001f70836001600160a01b038416620020b6565b6001600160a01b0381166000908152600183016020526040812054151562001f70565b6000818152600183016020526040812054620020225750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562001bb3565b50600062001bb3565b6060816000018054806020026020016040519081016040528092919081815260200182805480156200207d57602002820191906000526020600020905b81548152602001906001019080831162002068575b50505050509050919050565b6000826000018281548110620020a357620020a362002944565b9060005260206000200154905092915050565b60008181526001830160205260408120548015620021af576000620020dd60018362002d45565b8554909150600090620020f39060019062002d45565b90508181146200215f57600086600001828154811062002117576200211762002944565b90600052602060002001549050808760000184815481106200213d576200213d62002944565b6000918252602080832090910192909255918252600188019052604090208390555b855486908062002173576200217362002d6b565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062001bb3565b600091505062001bb3565b61098a8062002d8283390190565b6001600160a01b038116811462001db757600080fd5b8035620021eb81620021c8565b919050565b6000602082840312156200220357600080fd5b813562001f7081620021c8565b6000806000606084860312156200222657600080fd5b505081359360208301359350604090920135919050565b6000602082840312156200225057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff8111828210171562002294576200229462002257565b60405290565b60405160a0810167ffffffffffffffff8111828210171562002294576200229462002257565b604051601f8201601f1916810167ffffffffffffffff81118282101715620022ec57620022ec62002257565b604052919050565b600067ffffffffffffffff82111562002311576200231162002257565b50601f01601f191660200190565b600082601f8301126200233157600080fd5b8135620023486200234282620022f4565b620022c0565b8181528460208386010111156200235e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000606082840312156200238e57600080fd5b6040516060810167ffffffffffffffff8282108183111715620023b557620023b562002257565b816040528293508435915080821115620023ce57600080fd5b620023dc868387016200231f565b83526020850135915080821115620023f357600080fd5b5062002402858286016200231f565b602083015250604083013560408201525092915050565b600067ffffffffffffffff82111562002436576200243662002257565b5060051b60200190565b600082601f8301126200245257600080fd5b8135602062002465620023428362002419565b82815260059290921b840181019181810190868411156200248557600080fd5b8286015b84811015620024ad5780356200249f81620021c8565b835291830191830162002489565b509695505050505050565b60006101808284031215620024cc57600080fd5b620024d66200226d565b9050813567ffffffffffffffff80821115620024f157600080fd5b620024ff858386016200231f565b83526020840135602084015260408401356040840152606084013560608401526080840135608084015260a084013560a084015260c084013560c084015260e084013560e08401526101009150818401358284015261012091508184013582840152610140915081840135818111156200257857600080fd5b620025868682870162002440565b838501525050506101606200259d818401620021de565b9082015292915050565b600080600080600080600080610100898b031215620025c557600080fd5b620025d089620021de565b9750602089013567ffffffffffffffff80821115620025ee57600080fd5b620025fc8c838d016200237b565b985060408b01359150808211156200261357600080fd5b620026218c838d01620024b8565b975060608b0135965060808b0135955060a08b0135945060c08b0135935060e08b01359150808211156200265457600080fd5b50620026638b828c016200231f565b9150509295985092959890939650565b6000602082840312156200268657600080fd5b813567ffffffffffffffff8111156200269e57600080fd5b620026ac84828501620024b8565b949350505050565b6020808252825182820181905260009190848201906040850190845b81811015620026f75783516001600160a01b031683529284019291840191600101620026d0565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156200278a57600080fd5b81516004811062001f7057600080fd5b6020808252600a9082015269139bdd0818481c1bdbdb60b21b604082015260600190565b600060208284031215620027d157600080fd5b5051919050565b600060208284031215620027eb57600080fd5b8151801515811462001f7057600080fd5b60005b8381101562002819578181015183820152602001620027ff565b8381111562002829576000848401525b50505050565b600082601f8301126200284157600080fd5b8151620028526200234282620022f4565b8181528460208386010111156200286857600080fd5b620026ac826020830160208701620027fc565b600060208083850312156200288f57600080fd5b825167ffffffffffffffff80821115620028a857600080fd5b818501915085601f830112620028bd57600080fd5b620028c76200229a565b8060a0840188811115620028da57600080fd5b845b818110156200291357805185811115620028f65760008081fd5b620029048b8289016200282f565b855250928601928601620028dc565b509098975050505050505050565b6001600160a01b0391909116815260406020820181905260009082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000815180845262002974816020860160208601620027fc565b601f01601f19169290920160200192915050565b6001600160a01b038c168152602081018b905261016060408201819052600090620029b68382018d6200295a565b90508281036060840152620029cc818c6200295a565b90508281036080840152620029e2818b6200295a565b905082810360a0840152620029f8818a6200295a565b905082810360c084015262002a0e81896200295a565b90508660e0840152856101008401528461012084015282810361014084015262002a3981856200295a565b9e9d5050505050505050505050505050565b6001600160a01b0383168152604081016004831062002a7a57634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b60006020828403121562002a9a57600080fd5b815162001f7081620021c8565b60006020828403121562002aba57600080fd5b81516003811062001f7057600080fd5b60018060a01b038316815260406020820152600082516060604084015262002af660a08401826200295a565b90506020840151603f1984830301606085015262002b1582826200295a565b91505060408401516080840152809150509392505050565b60006020828403121562002b4057600080fd5b815167ffffffffffffffff81111562002b5857600080fd5b620026ac848285016200282f565b600081518084526020808501945080840160005b8381101562002ba15781516001600160a01b03168752958201959082019060010162002b7a565b509495945050505050565b6001600160a01b03848116825283166020820152606060408201819052825161018091830182905260009162002be76101e08501836200295a565b915060208501516080850152604085015160a0850152606085015160c0850152608085015160e085015260a0850151610100818187015260c08701519150610120828188015260e0880151925061014083818901528289015193506101609250838389015281890151858901528089015194505050605f19868503016101a087015262002c75848462002b66565b9350808701519250505062002c966101c08501826001600160a01b03169052565b5095945050505050565b6000602080838503121562002cb457600080fd5b825167ffffffffffffffff81111562002ccc57600080fd5b8301601f8101851362002cde57600080fd5b805162002cef620023428262002419565b81815260059190911b8201830190838101908783111562002d0f57600080fd5b928401925b8284101562002d3a57835162002d2a81620021c8565b8252928401929084019062002d14565b979650505050505050565b60008282101562002d6657634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603160045260246000fdfe608060405260405161098a38038061098a8339810160408190526100229161048b565b61004d60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5161054b565b6000805160206109438339815191521461006957610069610570565b6100758282600061007c565b50506105f0565b61008583610147565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806100c65750805b1561014257610140836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561010c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101309190610586565b836102d860201b6100291760201c565b505b505050565b61015a8161030460201b6100551760201c565b6101b95760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b61022d816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021e9190610586565b61030460201b6100551760201c565b6102925760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b60648201526084016101b0565b806102b760008051602061094383398151915260001b61031360201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606102fd838360405180606001604052806027815260200161096360279139610316565b9392505050565b6001600160a01b03163b151590565b90565b60606001600160a01b0384163b61037e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016101b0565b600080856001600160a01b03168560405161039991906105a1565b600060405180830381855af49150503d80600081146103d4576040519150601f19603f3d011682016040523d82523d6000602084013e6103d9565b606091505b5090925090506103ea8282866103f4565b9695505050505050565b606083156104035750816102fd565b8251156104135782518084602001fd5b8160405162461bcd60e51b81526004016101b091906105bd565b80516001600160a01b038116811461044457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561047a578181015183820152602001610462565b838111156101405750506000910152565b6000806040838503121561049e57600080fd5b6104a78361042d565b60208401519092506001600160401b03808211156104c457600080fd5b818501915085601f8301126104d857600080fd5b8151818111156104ea576104ea610449565b604051601f8201601f19908116603f0116810190838211818310171561051257610512610449565b8160405282815288602084870101111561052b57600080fd5b61053c83602083016020880161045f565b80955050505050509250929050565b60008282101561056b57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561059857600080fd5b6102fd8261042d565b600082516105b381846020870161045f565b9190910192915050565b60208152600082518060208401526105dc81604085016020870161045f565b601f01601f19169190910160400192915050565b610344806105ff6000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b610100565b565b606061004e83836040518060600160405280602781526020016102e860279139610124565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb919061023f565b905090565b3660008037600080366000845af43d6000803e80801561011f573d6000f35b3d6000fd5b60606001600160a01b0384163b6101915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101ac9190610298565b600060405180830381855af49150503d80600081146101e7576040519150601f19603f3d011682016040523d82523d6000602084013e6101ec565b606091505b50915091506101fc828286610206565b9695505050505050565b6060831561021557508161004e565b8251156102255782518084602001fd5b8160405162461bcd60e51b815260040161018891906102b4565b60006020828403121561025157600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b8381101561028357818101518382015260200161026b565b83811115610292576000848401525b50505050565b600082516102aa818460208701610268565b9190910192915050565b60208152600082518060208401526102d3816040850160208701610268565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202af598a06f5c1d44b2a1949e6589ce4824b460dd99fcafab4c1f7995e392e7b664736f6c634300080d0033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b342a2ef4469aa8196bc250a50f4c2bc5aaa0429ce82944aa059c298450db53664736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106200022f5760003560e01c806394218737116200012f578063d419f54711620000ad578063e39ff19f1162000078578063e39ff19f1462000601578063f2fde38b1462000626578063f7f5e5a6146200064b578063f9902bb11462000670578063fb237eb2146200069557600080fd5b8063d419f5471462000595578063da96043114620005ba578063dad01e5b14620005d1578063ddca3f4314620005e957600080fd5b8063b58131b011620000fa578063b58131b014620004ff578063c41c2f241462000517578063c5a7b2ea1462000539578063ca735cc1146200055b578063ccf5a77c146200057357600080fd5b80639421873714620004845780639459c17314620004ab5780639a0b6f9b14620004d0578063a1db8b4c14620004e857600080fd5b806369fe0e2d11620001bd578063735de9f71162000188578063735de9f714620003e5578063747b8050146200040757806378809b83146200042c57806386c36a6b146200044d5780638da5cb5b146200046457600080fd5b806369fe0e2d146200036c5780636aca4f4914620003915780636e0e69f914620003a8578063715018a614620003cd57600080fd5b8063392f37e911620001fe578063392f37e914620002e15780633fec91a414620003035780634db4a35214620003285780635e1762a0146200034a57600080fd5b806301569ab0146200023457806304e31dfb14620002735780630f842e0c1462000295578063168dfb5014620002bc575b600080fd5b3480156200024157600080fd5b5060075462000256906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200028057600080fd5b5060045462000256906001600160a01b031681565b348015620002a257600080fd5b50620002ba620002b4366004620021f0565b620006cb565b005b348015620002c957600080fd5b50620002ba620002db36600462002210565b6200074c565b348015620002ee57600080fd5b5060015462000256906001600160a01b031681565b3480156200031057600080fd5b50620002ba620003223660046200223d565b620008c1565b3480156200033557600080fd5b50600f5462000256906001600160a01b031681565b3480156200035757600080fd5b5060035462000256906001600160a01b031681565b3480156200037957600080fd5b50620002ba6200038b3660046200223d565b620009e1565b620002ba620003a2366004620025a7565b62000a4a565b348015620003b557600080fd5b50620002ba620003c736600462002673565b620015d1565b348015620003da57600080fd5b50620002ba62001a98565b348015620003f257600080fd5b50600e5462000256906001600160a01b031681565b3480156200041457600080fd5b50620002ba62000426366004620021f0565b62001ad3565b3480156200043957600080fd5b50600c545b6040519081526020016200026a565b3480156200045a57600080fd5b506200043e600281565b3480156200047157600080fd5b506000546001600160a01b031662000256565b3480156200049157600080fd5b506200049c62001b96565b6040516200026a9190620026b4565b348015620004b857600080fd5b5062000256620004ca3660046200223d565b62001ba4565b348015620004dd57600080fd5b506200043e60095481565b348015620004f557600080fd5b50600b546200043e565b3480156200050c57600080fd5b506200043e600a5481565b3480156200052457600080fd5b5060025462000256906001600160a01b031681565b3480156200054657600080fd5b5060055462000256906001600160a01b031681565b3480156200056857600080fd5b506200049c62001bb9565b3480156200058057600080fd5b5060065462000256906001600160a01b031681565b348015620005a257600080fd5b50620002ba620005b4366004620021f0565b62001c2e565b348015620005c757600080fd5b50600d546200043e565b348015620005de57600080fd5b506200043e62001ca6565b348015620005f657600080fd5b506200043e60085481565b3480156200060e57600080fd5b50620002ba62000620366004620021f0565b62001cb4565b3480156200063357600080fd5b50620002ba62000645366004620021f0565b62001d18565b3480156200065857600080fd5b50620002ba6200066a366004620021f0565b62001dba565b3480156200067d57600080fd5b50620002ba6200068f366004620021f0565b62001e32565b348015620006a257600080fd5b50620006ba620006b4366004620021f0565b62001efa565b60405190151581526020016200026a565b6000546001600160a01b03163314620007015760405162461bcd60e51b8152600401620006f89062002703565b60405180910390fd5b6001600160a01b0381166200072a5760405162461bcd60e51b8152600401620006f89062002738565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314620007795760405162461bcd60e51b8152600401620006f89062002703565b612710831115620007cd5760405162461bcd60e51b815260206004820152601d60248201527f496e76616c69642062616c6c6f7451756f72756d5468726573686f6c640000006044820152606401620006f8565b612710821115620008215760405162461bcd60e51b815260206004820152601f60248201527f496e76616c69642062616c6c6f744465636973696f6e5468726573686f6c64006044820152606401620006f8565b600081116200086c5760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103130b63637ba2634b332b9b830b760511b6044820152606401620006f8565b600b839055600c829055600d81905560408051848152602081018490529081018290527fae6075a1f7b230b994c46ac23890f3aea156bbf1195be708ad574a240164a6559060600160405180910390a1505050565b600254604051630db9619f60e31b81523360048201526001916001600160a01b031690636dcb0cf890602401602060405180830381865afa1580156200090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000931919062002777565b600381111562000945576200094562002761565b14620009655760405162461bcd60e51b8152600401620006f8906200279a565b60025460405163f4be936960e01b8152336004820152602481018390526001600160a01b039091169063f4be9369906044016020604051808303816000875af1158015620009b7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009dd9190620027be565b5050565b6000546001600160a01b0316331462000a0e5760405162461bcd60e51b8152600401620006f89062002703565b60088190556040518181527f20461e09b8e557b77e107939f9ce6544698123aad0fc964ac5cc59b7df2e608f906020015b60405180910390a150565b62000a553362001efa565b62000a955760405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b6044820152606401620006f8565b60035461016087015160405163b5af090f60e01b81526001600160a01b03918216600482015291169063b5af090f90602401602060405180830381865afa15801562000ae5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b0b9190620027d8565b8062000b2357506101608601516001600160a01b0316155b62000b695760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a5908155b9a5d13d99058d8dbdd5b9d605a1b6044820152606401620006f8565b6001600160a01b03881662000ecd57600854341462000bc25760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd08199959481c185cdcd95960621b6044820152606401620006f8565b600154604051630ca3d0fb60e01b8152600481018490526000916001600160a01b031690630ca3d0fb906024016020604051808303816000875af115801562000c0f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c359190620027be565b90506000811162000c895760405162461bcd60e51b815260206004820152601b60248201527f4176616c6961626c6520636f6d70616e79206e6f7420666f756e6400000000006044820152606401620006f8565b600154604051630d1e6acd60e11b8152600481018390526000916001600160a01b031690631a3cd59a90602401600060405180830381865afa15801562000cd4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000cfe91908101906200287b565b6005546040519192506001600160a01b03169062000d1c90620021ba565b62000d28919062002921565b604051809103906000f08015801562000d45573d6000803e3d6000fd5b5099506001600160a01b038a1663acec84dc3386846000602002015185600160200201518660026020020151876003602002015188600460200201518f8f8f8e6040518c63ffffffff1660e01b815260040162000dad9b9a9998979695949392919062002988565b600060405180830381600087803b15801562000dc857600080fd5b505af115801562000ddd573d6000803e3d6000fd5b5050600154604051637fd3924760e01b8152600481018690526001600160a01b038e811660248301529091169250637fd392479150604401600060405180830381600087803b15801562000e3057600080fd5b505af115801562000e45573d6000803e3d6000fd5b50506002546040516303203cd960e21b81526001600160a01b039091169250630c80f364915062000e7e908d9060019060040162002a4b565b6020604051808303816000875af115801562000e9e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ec49190620027be565b50505062001168565b600254604051630db9619f60e31b81526001600160a01b038a811660048301526001921690636dcb0cf890602401602060405180830381865afa15801562000f19573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f3f919062002777565b600381111562000f535762000f5362002761565b1462000f735760405162461bcd60e51b8152600401620006f8906200279a565b876001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000fb2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fd8919062002a87565b6001600160a01b0316336001600160a01b0316146200103a5760405162461bcd60e51b815260206004820152601860248201527f53656e646572206973206e6f7420706f6f6c206f776e657200000000000000006044820152606401620006f8565b6001886001600160a01b031663a7497fa56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200107b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010a1919062002a87565b6001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620010df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001105919062002aa7565b600281111562001119576200111962002761565b14620011685760405162461bcd60e51b815260206004820152601760248201527f50726576696f757320544745206e6f74206661696c65640000000000000000006044820152606401620006f8565b6006546040516000916001600160a01b0316906200118690620021ba565b62001192919062002921565b604051809103906000f080158015620011af573d6000803e3d6000fd5b50600280546040516303203cd960e21b81529293506001600160a01b031691630c80f36491620011e59185919060040162002a4b565b6020604051808303816000875af115801562001205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200122b9190620027be565b506007546040516000916001600160a01b0316906200124a90620021ba565b62001256919062002921565b604051809103906000f08015801562001273573d6000803e3d6000fd5b506002546040516303203cd960e21b81529192506001600160a01b031690630c80f36490620012aa90849060039060040162002a4b565b6020604051808303816000875af1158015620012ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012f09190620027be565b506001600160a01b038a166200136a576040516322ae8aef60e01b81526001600160a01b038316906322ae8aef9062001330908d908d9060040162002aca565b600060405180830381600087803b1580156200134b57600080fd5b505af115801562001360573d6000803e3d6000fd5b5050505062001459565b816001600160a01b03166322ae8aef8b60405180606001604052808e6001600160a01b0316630f74fdb06040518163ffffffff1660e01b8152600401600060405180830381865afa158015620013c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620013ee919081019062002b2d565b81526020018d6020015181526020018d604001518152506040518363ffffffff1660e01b81526004016200142492919062002aca565b600060405180830381600087803b1580156200143f57600080fd5b505af115801562001454573d6000803e3d6000fd5b505050505b60405163144fa6d760e01b81526001600160a01b0383811660048301528b169063144fa6d790602401600060405180830381600087803b1580156200149d57600080fd5b505af1158015620014b2573d6000803e3d6000fd5b5050604051633a7d190b60e01b81526001600160a01b0384169250633a7d190b9150620014e890339086908d9060040162002bac565b600060405180830381600087803b1580156200150357600080fd5b505af115801562001518573d6000803e3d6000fd5b505060405163024aa90f60e61b81526001600160a01b0384811660048301528d1692506392aa43c09150602401600060405180830381600087803b1580156200156057600080fd5b505af115801562001575573d6000803e3d6000fd5b5050604080516001600160a01b038e81168252868116602083015285168183015290517f9c5d829b9b23efc461f9aeef91979ec04bb903feb3bee4f26d22114abfc7335b9350908190036060019150a150505050505050505050565b600254604051630db9619f60e31b81523360048201526001916001600160a01b031690636dcb0cf890602401602060405180830381865afa1580156200161b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001641919062002777565b600381111562001655576200165562002761565b14620016755760405162461bcd60e51b8152600401620006f8906200279a565b6000336001600160a01b031663a7497fa56040518163ffffffff1660e01b8152600401602060405180830381865afa158015620016b6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016dc919062002a87565b6001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200171a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001740919062002aa7565b600281111562001754576200175462002761565b03620017945760405162461bcd60e51b815260206004820152600e60248201526d486173206163746976652054474560901b6044820152606401620006f8565b60035461016082015160405163b5af090f60e01b81526001600160a01b03918216600482015291169063b5af090f90602401602060405180830381865afa158015620017e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200180a9190620027d8565b806200182257506101608101516001600160a01b0316155b620018685760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a5908155b9a5d13d99058d8dbdd5b9d605a1b6044820152606401620006f8565b6007546040516000916001600160a01b0316906200188690620021ba565b62001892919062002921565b604051809103906000f080158015620018af573d6000803e3d6000fd5b506002546040516303203cd960e21b81529192506001600160a01b031690630c80f36490620018e690849060039060040162002a4b565b6020604051808303816000875af115801562001906573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200192c9190620027be565b50806001600160a01b0316633a7d190b33336001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200197c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019a2919062002a87565b856040518463ffffffff1660e01b8152600401620019c39392919062002bac565b600060405180830381600087803b158015620019de57600080fd5b505af1158015620019f3573d6000803e3d6000fd5b505060405163024aa90f60e61b81526001600160a01b03841660048201523392506392aa43c09150602401600060405180830381600087803b15801562001a3957600080fd5b505af115801562001a4e573d6000803e3d6000fd5b5050604080513381526001600160a01b03851660208201527f0e3dbd8c6caab1c68013fb13d63b7ff61db8fed8b3e7ce4e8e294ee1d0c22e8e935001905060405180910390a15050565b6000546001600160a01b0316331462001ac55760405162461bcd60e51b8152600401620006f89062002703565b62001ad1600062001f09565b565b6000546001600160a01b0316331462001b005760405162461bcd60e51b8152600401620006f89062002703565b62001b0d60108262001f59565b62001b515760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481dda1a5d195b1a5cdd1959606a1b6044820152606401620006f8565b604080516001600160a01b0383168152600160208201527fdf3714d6f88cdae2b889250b70116def7fb5083073c65cce38b56d2b0b0ef64e910162000a3f565b905090565b606062001b91601062001f77565b600062001bb360108362001f86565b92915050565b6003546040805163ca735cc160e01b815290516060926001600160a01b03169163ca735cc19160048083019260009291908290030181865afa15801562001c04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001b91919081019062002ca0565b6000546001600160a01b0316331462001c5b5760405162461bcd60e51b8152600401620006f89062002703565b6001600160a01b03811662001c845760405162461bcd60e51b8152600401620006f89062002738565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600062001b91601062001f94565b6000546001600160a01b0316331462001ce15760405162461bcd60e51b8152600401620006f89062002703565b6040516001600160a01b03821690303180156108fc02916000818181858888f19350505050158015620009dd573d6000803e3d6000fd5b6000546001600160a01b0316331462001d455760405162461bcd60e51b8152600401620006f89062002703565b6001600160a01b03811662001dac5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620006f8565b62001db78162001f09565b50565b6000546001600160a01b0316331462001de75760405162461bcd60e51b8152600401620006f89062002703565b6001600160a01b03811662001e105760405162461bcd60e51b8152600401620006f89062002738565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331462001e5f5760405162461bcd60e51b8152600401620006f89062002703565b62001e6c60108262001f9f565b62001eba5760405162461bcd60e51b815260206004820152601760248201527f416c7265616479206e6f742077686974656c69737465640000000000000000006044820152606401620006f8565b604080516001600160a01b0383168152600060208201527fdf3714d6f88cdae2b889250b70116def7fb5083073c65cce38b56d2b0b0ef64e910162000a3f565b600062001bb360108362001fb6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600062001f70836001600160a01b03841662001fd9565b9392505050565b6060600062001f70836200202b565b600062001f70838362002089565b600062001bb3825490565b600062001f70836001600160a01b038416620020b6565b6001600160a01b0381166000908152600183016020526040812054151562001f70565b6000818152600183016020526040812054620020225750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562001bb3565b50600062001bb3565b6060816000018054806020026020016040519081016040528092919081815260200182805480156200207d57602002820191906000526020600020905b81548152602001906001019080831162002068575b50505050509050919050565b6000826000018281548110620020a357620020a362002944565b9060005260206000200154905092915050565b60008181526001830160205260408120548015620021af576000620020dd60018362002d45565b8554909150600090620020f39060019062002d45565b90508181146200215f57600086600001828154811062002117576200211762002944565b90600052602060002001549050808760000184815481106200213d576200213d62002944565b6000918252602080832090910192909255918252600188019052604090208390555b855486908062002173576200217362002d6b565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062001bb3565b600091505062001bb3565b61098a8062002d8283390190565b6001600160a01b038116811462001db757600080fd5b8035620021eb81620021c8565b919050565b6000602082840312156200220357600080fd5b813562001f7081620021c8565b6000806000606084860312156200222657600080fd5b505081359360208301359350604090920135919050565b6000602082840312156200225057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff8111828210171562002294576200229462002257565b60405290565b60405160a0810167ffffffffffffffff8111828210171562002294576200229462002257565b604051601f8201601f1916810167ffffffffffffffff81118282101715620022ec57620022ec62002257565b604052919050565b600067ffffffffffffffff82111562002311576200231162002257565b50601f01601f191660200190565b600082601f8301126200233157600080fd5b8135620023486200234282620022f4565b620022c0565b8181528460208386010111156200235e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000606082840312156200238e57600080fd5b6040516060810167ffffffffffffffff8282108183111715620023b557620023b562002257565b816040528293508435915080821115620023ce57600080fd5b620023dc868387016200231f565b83526020850135915080821115620023f357600080fd5b5062002402858286016200231f565b602083015250604083013560408201525092915050565b600067ffffffffffffffff82111562002436576200243662002257565b5060051b60200190565b600082601f8301126200245257600080fd5b8135602062002465620023428362002419565b82815260059290921b840181019181810190868411156200248557600080fd5b8286015b84811015620024ad5780356200249f81620021c8565b835291830191830162002489565b509695505050505050565b60006101808284031215620024cc57600080fd5b620024d66200226d565b9050813567ffffffffffffffff80821115620024f157600080fd5b620024ff858386016200231f565b83526020840135602084015260408401356040840152606084013560608401526080840135608084015260a084013560a084015260c084013560c084015260e084013560e08401526101009150818401358284015261012091508184013582840152610140915081840135818111156200257857600080fd5b620025868682870162002440565b838501525050506101606200259d818401620021de565b9082015292915050565b600080600080600080600080610100898b031215620025c557600080fd5b620025d089620021de565b9750602089013567ffffffffffffffff80821115620025ee57600080fd5b620025fc8c838d016200237b565b985060408b01359150808211156200261357600080fd5b620026218c838d01620024b8565b975060608b0135965060808b0135955060a08b0135945060c08b0135935060e08b01359150808211156200265457600080fd5b50620026638b828c016200231f565b9150509295985092959890939650565b6000602082840312156200268657600080fd5b813567ffffffffffffffff8111156200269e57600080fd5b620026ac84828501620024b8565b949350505050565b6020808252825182820181905260009190848201906040850190845b81811015620026f75783516001600160a01b031683529284019291840191600101620026d0565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156200278a57600080fd5b81516004811062001f7057600080fd5b6020808252600a9082015269139bdd0818481c1bdbdb60b21b604082015260600190565b600060208284031215620027d157600080fd5b5051919050565b600060208284031215620027eb57600080fd5b8151801515811462001f7057600080fd5b60005b8381101562002819578181015183820152602001620027ff565b8381111562002829576000848401525b50505050565b600082601f8301126200284157600080fd5b8151620028526200234282620022f4565b8181528460208386010111156200286857600080fd5b620026ac826020830160208701620027fc565b600060208083850312156200288f57600080fd5b825167ffffffffffffffff80821115620028a857600080fd5b818501915085601f830112620028bd57600080fd5b620028c76200229a565b8060a0840188811115620028da57600080fd5b845b818110156200291357805185811115620028f65760008081fd5b620029048b8289016200282f565b855250928601928601620028dc565b509098975050505050505050565b6001600160a01b0391909116815260406020820181905260009082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000815180845262002974816020860160208601620027fc565b601f01601f19169290920160200192915050565b6001600160a01b038c168152602081018b905261016060408201819052600090620029b68382018d6200295a565b90508281036060840152620029cc818c6200295a565b90508281036080840152620029e2818b6200295a565b905082810360a0840152620029f8818a6200295a565b905082810360c084015262002a0e81896200295a565b90508660e0840152856101008401528461012084015282810361014084015262002a3981856200295a565b9e9d5050505050505050505050505050565b6001600160a01b0383168152604081016004831062002a7a57634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b60006020828403121562002a9a57600080fd5b815162001f7081620021c8565b60006020828403121562002aba57600080fd5b81516003811062001f7057600080fd5b60018060a01b038316815260406020820152600082516060604084015262002af660a08401826200295a565b90506020840151603f1984830301606085015262002b1582826200295a565b91505060408401516080840152809150509392505050565b60006020828403121562002b4057600080fd5b815167ffffffffffffffff81111562002b5857600080fd5b620026ac848285016200282f565b600081518084526020808501945080840160005b8381101562002ba15781516001600160a01b03168752958201959082019060010162002b7a565b509495945050505050565b6001600160a01b03848116825283166020820152606060408201819052825161018091830182905260009162002be76101e08501836200295a565b915060208501516080850152604085015160a0850152606085015160c0850152608085015160e085015260a0850151610100818187015260c08701519150610120828188015260e0880151925061014083818901528289015193506101609250838389015281890151858901528089015194505050605f19868503016101a087015262002c75848462002b66565b9350808701519250505062002c966101c08501826001600160a01b03169052565b5095945050505050565b6000602080838503121562002cb457600080fd5b825167ffffffffffffffff81111562002ccc57600080fd5b8301601f8101851362002cde57600080fd5b805162002cef620023428262002419565b81815260059190911b8201830190838101908783111562002d0f57600080fd5b928401925b8284101562002d3a57835162002d2a81620021c8565b8252928401929084019062002d14565b979650505050505050565b60008282101562002d6657634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603160045260246000fdfe608060405260405161098a38038061098a8339810160408190526100229161048b565b61004d60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5161054b565b6000805160206109438339815191521461006957610069610570565b6100758282600061007c565b50506105f0565b61008583610147565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806100c65750805b1561014257610140836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561010c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101309190610586565b836102d860201b6100291760201c565b505b505050565b61015a8161030460201b6100551760201c565b6101b95760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b61022d816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021e9190610586565b61030460201b6100551760201c565b6102925760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b60648201526084016101b0565b806102b760008051602061094383398151915260001b61031360201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606102fd838360405180606001604052806027815260200161096360279139610316565b9392505050565b6001600160a01b03163b151590565b90565b60606001600160a01b0384163b61037e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016101b0565b600080856001600160a01b03168560405161039991906105a1565b600060405180830381855af49150503d80600081146103d4576040519150601f19603f3d011682016040523d82523d6000602084013e6103d9565b606091505b5090925090506103ea8282866103f4565b9695505050505050565b606083156104035750816102fd565b8251156104135782518084602001fd5b8160405162461bcd60e51b81526004016101b091906105bd565b80516001600160a01b038116811461044457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561047a578181015183820152602001610462565b838111156101405750506000910152565b6000806040838503121561049e57600080fd5b6104a78361042d565b60208401519092506001600160401b03808211156104c457600080fd5b818501915085601f8301126104d857600080fd5b8151818111156104ea576104ea610449565b604051601f8201601f19908116603f0116810190838211818310171561051257610512610449565b8160405282815288602084870101111561052b57600080fd5b61053c83602083016020880161045f565b80955050505050509250929050565b60008282101561056b57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561059857600080fd5b6102fd8261042d565b600082516105b381846020870161045f565b9190910192915050565b60208152600082518060208401526105dc81604085016020870161045f565b601f01601f19169190910160400192915050565b610344806105ff6000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b610100565b565b606061004e83836040518060600160405280602781526020016102e860279139610124565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb919061023f565b905090565b3660008037600080366000845af43d6000803e80801561011f573d6000f35b3d6000fd5b60606001600160a01b0384163b6101915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101ac9190610298565b600060405180830381855af49150503d80600081146101e7576040519150601f19603f3d011682016040523d82523d6000602084013e6101ec565b606091505b50915091506101fc828286610206565b9695505050505050565b6060831561021557508161004e565b8251156102255782518084602001fd5b8160405162461bcd60e51b815260040161018891906102b4565b60006020828403121561025157600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b8381101561028357818101518382015260200161026b565b83811115610292576000848401525b50505050565b600082516102aa818460208701610268565b9190910192915050565b60208152600082518060208401526102d3816040850160208701610268565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202af598a06f5c1d44b2a1949e6589ce4824b460dd99fcafab4c1f7995e392e7b664736f6c634300080d0033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b342a2ef4469aa8196bc250a50f4c2bc5aaa0429ce82944aa059c298450db53664736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4403,
        "contract": "contracts/Service.sol:Service",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9224,
        "contract": "contracts/Service.sol:Service",
        "label": "metadata",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMetadata)11670"
      },
      {
        "astId": 9230,
        "contract": "contracts/Service.sol:Service",
        "label": "directory",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDirectory)11544"
      },
      {
        "astId": 9233,
        "contract": "contracts/Service.sol:Service",
        "label": "whitelistedTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IWhitelistedTokens)11931"
      },
      {
        "astId": 9235,
        "contract": "contracts/Service.sol:Service",
        "label": "proposalGateway",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9237,
        "contract": "contracts/Service.sol:Service",
        "label": "poolBeacon",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 9239,
        "contract": "contracts/Service.sol:Service",
        "label": "tokenBeacon",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 9241,
        "contract": "contracts/Service.sol:Service",
        "label": "tgeBeacon",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 9243,
        "contract": "contracts/Service.sol:Service",
        "label": "fee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 9245,
        "contract": "contracts/Service.sol:Service",
        "label": "proposalQuorum",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 9247,
        "contract": "contracts/Service.sol:Service",
        "label": "proposalThreshold",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 9249,
        "contract": "contracts/Service.sol:Service",
        "label": "_ballotQuorumThreshold",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 9251,
        "contract": "contracts/Service.sol:Service",
        "label": "_ballotDecisionThreshold",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 9253,
        "contract": "contracts/Service.sol:Service",
        "label": "_ballotLifespan",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 9256,
        "contract": "contracts/Service.sol:Service",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(ISwapRouter)7356"
      },
      {
        "astId": 9259,
        "contract": "contracts/Service.sol:Service",
        "label": "uniswapQuoter",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IQuoter)7256"
      },
      {
        "astId": 9262,
        "contract": "contracts/Service.sol:Service",
        "label": "_userWhitelist",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(AddressSet)6898_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDirectory)11544": {
        "encoding": "inplace",
        "label": "contract IDirectory",
        "numberOfBytes": "20"
      },
      "t_contract(IMetadata)11670": {
        "encoding": "inplace",
        "label": "contract IMetadata",
        "numberOfBytes": "20"
      },
      "t_contract(IQuoter)7256": {
        "encoding": "inplace",
        "label": "contract IQuoter",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)7356": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IWhitelistedTokens)11931": {
        "encoding": "inplace",
        "label": "contract IWhitelistedTokens",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)6898_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6897,
            "contract": "contracts/Service.sol:Service",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6597_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)6597_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6592,
            "contract": "contracts/Service.sol:Service",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6596,
            "contract": "contracts/Service.sol:Service",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}