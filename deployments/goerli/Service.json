{
  "address": "0xF36C6F78444BF88fb0F7e2c83C68bA1B9805055A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDirectory",
          "name": "directory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolMaster_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenMaster_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tgeMaster_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proposalQuorum_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proposalThreshold_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "FeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tge",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        }
      ],
      "name": "ProposalQuorumSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "ProposalThresholdSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tge",
          "type": "address"
        }
      ],
      "name": "SecondaryTGECreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "WhitelistedSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "addProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "cap",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGovernanceToken.TokenInfo",
          "name": "tokenInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupTVL",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "whitelist",
              "type": "address[]"
            }
          ],
          "internalType": "struct ITGE.TGEInfo",
          "name": "tgeInfo",
          "type": "tuple"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupTVL",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "whitelist",
              "type": "address[]"
            }
          ],
          "internalType": "struct ITGE.TGEInfo",
          "name": "tgeInfo",
          "type": "tuple"
        }
      ],
      "name": "createSecondaryTGE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolMaster",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalQuorum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalQuorum_",
          "type": "uint256"
        }
      ],
      "name": "setProposalQuorum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalThreshold_",
          "type": "uint256"
        }
      ],
      "name": "setProposalThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tgeMaster",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenMaster",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "whitelistAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd53a8e95211fff2faef7ae03ecc02829c151c8384c64a60aaefaa67e29da35a1",
  "receipt": {
    "to": null,
    "from": "0x90A4a90e6FAf88c4d709F666D26793F9e2B47183",
    "contractAddress": "0xF36C6F78444BF88fb0F7e2c83C68bA1B9805055A",
    "transactionIndex": 3,
    "gasUsed": "1905526",
    "logsBloom": "0x
    "blockHash": "0xebe3f19d3c790cbabe3fbc5ea0eaf551216391901d5d62e55cbbed83a8c6930e",
    "transactionHash": "0xd53a8e95211fff2faef7ae03ecc02829c151c8384c64a60aaefaa67e29da35a1",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 7123831,
        "transactionHash": "0xd53a8e95211fff2faef7ae03ecc02829c151c8384c64a60aaefaa67e29da35a1",
        "address": "0xF36C6F78444BF88fb0F7e2c83C68bA1B9805055A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000090a4a90e6faf88c4d709f666d26793f9e2b47183"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xebe3f19d3c790cbabe3fbc5ea0eaf551216391901d5d62e55cbbed83a8c6930e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 7123831,
        "transactionHash": "0xd53a8e95211fff2faef7ae03ecc02829c151c8384c64a60aaefaa67e29da35a1",
        "address": "0xF36C6F78444BF88fb0F7e2c83C68bA1B9805055A",
        "topics": [
          "0x20461e09b8e557b77e107939f9ce6544698123aad0fc964ac5cc59b7df2e608f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0xebe3f19d3c790cbabe3fbc5ea0eaf551216391901d5d62e55cbbed83a8c6930e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 7123831,
        "transactionHash": "0xd53a8e95211fff2faef7ae03ecc02829c151c8384c64a60aaefaa67e29da35a1",
        "address": "0xF36C6F78444BF88fb0F7e2c83C68bA1B9805055A",
        "topics": [
          "0xb3b5a2f69b3db6f9f9545a71982d531ee15418a26301988f14ec9d4636042e68"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000001e",
        "logIndex": 4,
        "blockHash": "0xebe3f19d3c790cbabe3fbc5ea0eaf551216391901d5d62e55cbbed83a8c6930e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 7123831,
        "transactionHash": "0xd53a8e95211fff2faef7ae03ecc02829c151c8384c64a60aaefaa67e29da35a1",
        "address": "0xF36C6F78444BF88fb0F7e2c83C68bA1B9805055A",
        "topics": [
          "0xddaabc20f9c626e5660727e2e44f0bf5ad346108c4c3be2674ea6300a815218f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000032",
        "logIndex": 5,
        "blockHash": "0xebe3f19d3c790cbabe3fbc5ea0eaf551216391901d5d62e55cbbed83a8c6930e"
      }
    ],
    "blockNumber": 7123831,
    "cumulativeGasUsed": "2079411",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2a4a3494e1f8D8fD3eEf2b53c6105F2bB0C07322",
    "0x544C9160505712d6B5E12888b5eB9bCb708885aF",
    "0x3786a1046c0B7581B64E28331997Dc2d279324E2",
    "0xa13373fd51B44C5174CAb8C829012d78717c47AE",
    "0",
    "30",
    "50"
  ],
  "numDeployments": 1,
  "solcInputHash": "39f96f7bb5a095faa550612a86705d4a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDirectory\",\"name\":\"directory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolMaster_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenMaster_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tgeMaster_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalQuorum_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalThreshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"ProposalQuorumSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ProposalThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"}],\"name\":\"SecondaryTGECreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistedSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"addProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"internalType\":\"struct IGovernanceToken.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"internalType\":\"struct ITGE.TGEInfo\",\"name\":\"tgeInfo\",\"type\":\"tuple\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"internalType\":\"struct ITGE.TGEInfo\",\"name\":\"tgeInfo\",\"type\":\"tuple\"}],\"name\":\"createSecondaryTGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalQuorum_\",\"type\":\"uint256\"}],\"name\":\"setProposalQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalThreshold_\",\"type\":\"uint256\"}],\"name\":\"setProposalThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"whitelistAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Service.sol\":\"Service\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"contracts/Service.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IService.sol\\\";\\nimport \\\"./interfaces/IDirectory.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IGovernanceToken.sol\\\";\\nimport \\\"./interfaces/ITGE.sol\\\";\\n\\ncontract Service is IService, Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Clones for address;\\n\\n    IDirectory public directory;\\n\\n    address public poolMaster;\\n\\n    address public tokenMaster;\\n\\n    address public tgeMaster;\\n\\n    uint256 public fee;\\n\\n    uint256 public proposalQuorum;\\n\\n    uint256 public proposalThreshold;\\n\\n    EnumerableSet.AddressSet private _whitelist;\\n\\n    // EVENTS\\n\\n    event WhitelistedSet(address account, bool whitelisted);\\n\\n    event FeeSet(uint256 fee);\\n\\n    event ProposalQuorumSet(uint256 quorum);\\n\\n    event ProposalThresholdSet(uint256 threshold);\\n\\n    event PoolCreated(address pool, address token, address tge);\\n\\n    event SecondaryTGECreated(address pool, address tge);\\n\\n    // CONSTRUCTOR\\n\\n    constructor(\\n        IDirectory directory_,\\n        address poolMaster_,\\n        address tokenMaster_,\\n        address tgeMaster_,\\n        uint256 fee_,\\n        uint256 proposalQuorum_,\\n        uint256 proposalThreshold_\\n    ) {\\n        directory = directory_;\\n        poolMaster = poolMaster_;\\n        tokenMaster = tokenMaster_;\\n        tgeMaster = tgeMaster_;\\n        fee = fee_;\\n        proposalQuorum = proposalQuorum_;\\n        proposalThreshold = proposalThreshold_;\\n\\n        emit FeeSet(fee_);\\n        emit ProposalQuorumSet(proposalQuorum_);\\n        emit ProposalThresholdSet(proposalThreshold_);\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    function createPool(\\n        IPool pool,\\n        IGovernanceToken.TokenInfo memory tokenInfo,\\n        ITGE.TGEInfo memory tgeInfo\\n    ) external payable onlyWhitelisted {\\n        require(msg.value == fee, \\\"Incorrect fee passed\\\");\\n\\n        if (address(pool) == address(0)) {\\n            pool = IPool(poolMaster.clone());\\n            pool.initialize(msg.sender);\\n            directory.addContractRecord(\\n                address(pool),\\n                IDirectory.ContractType.Pool\\n            );\\n        } else {\\n            require(\\n                directory.typeOf(address(pool)) == IDirectory.ContractType.Pool,\\n                \\\"Not a pool\\\"\\n            );\\n            require(msg.sender == pool.owner(), \\\"Sender is not pool owner\\\");\\n            require(\\n                pool.tge().state() == ITGE.State.Failed,\\n                \\\"Previous TGE not failed\\\"\\n            );\\n        }\\n\\n        address token = tokenMaster.clone();\\n        directory.addContractRecord(\\n            token,\\n            IDirectory.ContractType.GovernanceToken\\n        );\\n        address tge = tgeMaster.clone();\\n        directory.addContractRecord(tge, IDirectory.ContractType.TGE);\\n\\n        IGovernanceToken(token).initialize(address(pool), tokenInfo);\\n        pool.setToken(token);\\n        ITGE(tge).initialize(msg.sender, token, tgeInfo);\\n        pool.setTGE(tge);\\n\\n        emit PoolCreated(address(pool), token, tge);\\n    }\\n\\n    // PUBLIC INDIRECT FUNCTIONS (CALLED THROUGH POOL)\\n\\n    function createSecondaryTGE(ITGE.TGEInfo memory tgeInfo)\\n        external\\n        override\\n        onlyPool\\n    {\\n        require(\\n            IPool(msg.sender).tge().state() != ITGE.State.Active,\\n            \\\"Has active TGE\\\"\\n        );\\n\\n        address tge = tgeMaster.clone();\\n        directory.addContractRecord(tge, IDirectory.ContractType.TGE);\\n        ITGE(tge).initialize(\\n            msg.sender,\\n            address(IPool(msg.sender).token()),\\n            tgeInfo\\n        );\\n        IPool(msg.sender).setTGE(tge);\\n\\n        emit SecondaryTGECreated(msg.sender, tge);\\n    }\\n\\n    function addProposal(uint256 proposalId) external onlyPool {\\n        directory.addProposalRecord(msg.sender, proposalId);\\n    }\\n\\n    // RESTRICTED FUNCTIONS\\n\\n    function addToWhitelist(address account) external onlyOwner {\\n        require(_whitelist.add(account), \\\"Already whitelisted\\\");\\n        emit WhitelistedSet(account, true);\\n    }\\n\\n    function removeFromWhitelist(address account) external onlyOwner {\\n        require(_whitelist.remove(account), \\\"Already not whitelisted\\\");\\n        emit WhitelistedSet(account, false);\\n    }\\n\\n    function setFee(uint256 fee_) external onlyOwner {\\n        fee = fee_;\\n        emit FeeSet(fee_);\\n    }\\n\\n    function setProposalQuorum(uint256 proposalQuorum_) external onlyOwner {\\n        proposalQuorum = proposalQuorum_;\\n        emit ProposalQuorumSet(proposalQuorum_);\\n    }\\n\\n    function setProposalThreshold(uint256 proposalThreshold_)\\n        external\\n        onlyOwner\\n    {\\n        proposalThreshold = proposalThreshold_;\\n        emit ProposalThresholdSet(proposalThreshold_);\\n    }\\n\\n    function transferFunds(address to) external onlyOwner {\\n        payable(to).transfer(payable(address(this)).balance);\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n        return _whitelist.contains(account);\\n    }\\n\\n    function whitelist() external view returns (address[] memory) {\\n        return _whitelist.values();\\n    }\\n\\n    function whitelistLength() external view returns (uint256) {\\n        return _whitelist.length();\\n    }\\n\\n    function whitelistAt(uint256 index) external view returns (address) {\\n        return _whitelist.at(index);\\n    }\\n\\n    function owner() public view override(IService, Ownable) returns (address) {\\n        return super.owner();\\n    }\\n\\n    // MODIFIERS\\n\\n    modifier onlyWhitelisted() {\\n        require(isWhitelisted(msg.sender), \\\"Not whitelisted\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(\\n            directory.typeOf(msg.sender) == IDirectory.ContractType.Pool,\\n            \\\"Not a pool\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc5d676567c56d765c76dcbc3246389ad3e97eced3fe9c95f48114f4be0155b54\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IDirectory {\\n    enum ContractType {\\n        None,\\n        Pool,\\n        GovernanceToken,\\n        TGE\\n    }\\n\\n    function addContractRecord(address addr, ContractType contractType)\\n        external\\n        returns (uint256 index);\\n\\n    function addProposalRecord(address pool, uint256 proposalId)\\n        external\\n        returns (uint256 index);\\n\\n    function typeOf(address addr) external view returns (ContractType);\\n}\\n\",\"keccak256\":\"0x39fc90b444e9aefc4e2a3a40b43840dfa44ff13441a9e50d3de9bb95f044bd81\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IGovernanceToken is IERC20Upgradeable {\\n    struct TokenInfo {\\n        string name;\\n        string symbol;\\n        uint256 cap;\\n    }\\n\\n    function initialize(address pool_, TokenInfo memory info) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function lock(\\n        address account,\\n        uint256 amount,\\n        uint256 deadline\\n    ) external;\\n\\n    function cap() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8f56a5e6fd46a1c2435ba839bf724567235d9192555ae238b2042f543f688eb3\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./IGovernanceToken.sol\\\";\\n\\ninterface IPool {\\n    function initialize(address owner_) external;\\n\\n    function setToken(address token_) external;\\n\\n    function setTGE(address tge_) external;\\n\\n    function owner() external view returns (address);\\n\\n    function token() external view returns (IGovernanceToken);\\n\\n    function tge() external view returns (ITGE);\\n}\\n\",\"keccak256\":\"0x2eb4359ec9c2a4aa2bc58b97838dd3d79f32e69fc799bdbdeb74fbc37dc2f82b\",\"license\":\"MIT\"},\"contracts/interfaces/IService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./IDirectory.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\n\\ninterface IService {\\n    function createSecondaryTGE(ITGE.TGEInfo memory tgeInfo) external;\\n\\n    function addProposal(uint256 proposalId) external;\\n\\n    function directory() external view returns (IDirectory);\\n\\n    function owner() external view returns (address);\\n\\n    function proposalQuorum() external view returns (uint256);\\n\\n    function proposalThreshold() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x41d55ae4b374c37db197574484afd3a292f3656eeac930f277d4311b91e61754\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface ITGE {\\n    struct TGEInfo {\\n        string metadataURI;\\n        uint256 price;\\n        uint256 hardcap;\\n        uint256 softcap;\\n        uint256 minPurchase;\\n        uint256 maxPurchase;\\n        uint256 lockupPercent;\\n        uint256 lockupDuration;\\n        uint256 lockupTVL;\\n        uint256 duration;\\n        address[] whitelist;\\n    }\\n\\n    function initialize(\\n        address owner_,\\n        address token_,\\n        TGEInfo memory info\\n    ) external;\\n\\n    function purchase(uint256 amount) external payable;\\n\\n    function claimBack() external;\\n\\n    function transferFunds() external;\\n\\n    function maxPurchaseOf(address account) external view returns (uint256);\\n\\n    enum State {\\n        Active,\\n        Failed,\\n        Successful\\n    }\\n\\n    function state() external view returns (State);\\n}\\n\",\"keccak256\":\"0x723a068fe6bdc89d8ca284d2cd917beae41de9f3ddf04f0b6a56aea5a82d2949\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620020a3380380620020a38339810160408190526200003491620001a7565b6200003f336200013e565b600180546001600160a01b03199081166001600160a01b038a811691909117909255600280548216898416179055600380548216888416179055600480549091169186169190911790556005839055600682905560078190556040518381527f20461e09b8e557b77e107939f9ce6544698123aad0fc964ac5cc59b7df2e608f9060200160405180910390a16040518281527fb3b5a2f69b3db6f9f9545a71982d531ee15418a26301988f14ec9d4636042e689060200160405180910390a16040518181527fddaabc20f9c626e5660727e2e44f0bf5ad346108c4c3be2674ea6300a815218f9060200160405180910390a1505050505050506200022e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620001a457600080fd5b50565b600080600080600080600060e0888a031215620001c357600080fd5b8751620001d0816200018e565b6020890151909750620001e3816200018e565b6040890151909650620001f6816200018e565b606089015190955062000209816200018e565b809450506080880151925060a0880151915060c0880151905092959891949750929550565b611e65806200023e6000396000f3fe6080604052600436106101405760003560e01c80638ab1d681116100b6578063ccd4743e1161006f578063ccd4743e1461036b578063ddca3f431461038b578063e39ff19f146103a1578063e43252d7146103c1578063ece40cc1146103e1578063f2fde38b1461040157600080fd5b80638ab1d681146102bf5780638da5cb5b146102df57806393e59dc1146102fd5780639a0b6f9b1461031f578063b58131b014610335578063c41c2f241461034b57600080fd5b80633fec91a4116101085780633fec91a41461021457806342b8cdbf1461023457806369fe0e2d14610247578063715018a61461026757806378bb51641461027c5780638548abf61461029f57600080fd5b80631022ed60146101455780631be40f27146101675780632346e06d146101a4578063265d4409146101c45780633af32abf146101e4575b600080fd5b34801561015157600080fd5b5061016561016036600461197b565b610421565b005b34801561017357600080fd5b506101876101823660046119b8565b6107cb565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101b057600080fd5b50600454610187906001600160a01b031681565b3480156101d057600080fd5b50600354610187906001600160a01b031681565b3480156101f057600080fd5b506102046101ff3660046119d1565b6107de565b604051901515815260200161019b565b34801561022057600080fd5b5061016561022f3660046119b8565b6107eb565b6101656102423660046119ee565b6108ff565b34801561025357600080fd5b506101656102623660046119b8565b610ff4565b34801561027357600080fd5b5061016561105a565b34801561028857600080fd5b50610291611090565b60405190815260200161019b565b3480156102ab57600080fd5b506101656102ba3660046119b8565b6110a1565b3480156102cb57600080fd5b506101656102da3660046119d1565b611100565b3480156102eb57600080fd5b506000546001600160a01b0316610187565b34801561030957600080fd5b506103126111c0565b60405161019b9190611abe565b34801561032b57600080fd5b5061029160065481565b34801561034157600080fd5b5061029160075481565b34801561035757600080fd5b50600154610187906001600160a01b031681565b34801561037757600080fd5b50600254610187906001600160a01b031681565b34801561039757600080fd5b5061029160055481565b3480156103ad57600080fd5b506101656103bc3660046119d1565b6111cc565b3480156103cd57600080fd5b506101656103dc3660046119d1565b61122c565b3480156103ed57600080fd5b506101656103fc3660046119b8565b6112e2565b34801561040d57600080fd5b5061016561041c3660046119d1565b611341565b60018054604051630db9619f60e31b81523360048201526001600160a01b0390911690636dcb0cf890602401602060405180830381865afa15801561046a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048e9190611b21565b600381111561049f5761049f611b0b565b146104c55760405162461bcd60e51b81526004016104bc90611b42565b60405180910390fd5b6000336001600160a01b031663a7497fa56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105299190611b66565b6001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058a9190611b83565b600281111561059b5761059b611b0b565b036105d95760405162461bcd60e51b815260206004820152600e60248201526d486173206163746976652054474560901b60448201526064016104bc565b6004546000906105f1906001600160a01b03166113dc565b6001546040516303203cd960e21b81529192506001600160a01b031690630c80f36490610625908490600390600401611ba4565b6020604051808303816000875af1158015610644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106689190611bdf565b50806001600160a01b03166349297b3333336001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106db9190611b66565b856040518463ffffffff1660e01b81526004016106fa93929190611c89565b600060405180830381600087803b15801561071457600080fd5b505af1158015610728573d6000803e3d6000fd5b505060405163024aa90f60e61b81526001600160a01b03841660048201523392506392aa43c09150602401600060405180830381600087803b15801561076d57600080fd5b505af1158015610781573d6000803e3d6000fd5b5050604080513381526001600160a01b03851660208201527f0e3dbd8c6caab1c68013fb13d63b7ff61db8fed8b3e7ce4e8e294ee1d0c22e8e935001905060405180910390a15050565b60006107d8600883611479565b92915050565b60006107d860088361148c565b60018054604051630db9619f60e31b81523360048201526001600160a01b0390911690636dcb0cf890602401602060405180830381865afa158015610834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108589190611b21565b600381111561086957610869611b0b565b146108865760405162461bcd60e51b81526004016104bc90611b42565b60015460405163f4be936960e01b8152336004820152602481018390526001600160a01b039091169063f4be9369906044016020604051808303816000875af11580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb9190611bdf565b5050565b610908336107de565b6109465760405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b60448201526064016104bc565b600554341461098e5760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd08199959481c185cdcd95960621b60448201526064016104bc565b6001600160a01b038316610a87576002546109b1906001600160a01b03166113dc565b60405163189acdbd60e31b81523360048201529093506001600160a01b0384169063c4d66de890602401600060405180830381600087803b1580156109f557600080fd5b505af1158015610a09573d6000803e3d6000fd5b5050600180546040516303203cd960e21b81526001600160a01b039091169350630c80f3649250610a3e918791600401611ba4565b6020604051808303816000875af1158015610a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a819190611bdf565b50610d09565b60018054604051630db9619f60e31b81526001600160a01b03868116600483015290911690636dcb0cf890602401602060405180830381865afa158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af69190611b21565b6003811115610b0757610b07611b0b565b14610b245760405162461bcd60e51b81526004016104bc90611b42565b826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b869190611b66565b6001600160a01b0316336001600160a01b031614610be65760405162461bcd60e51b815260206004820152601860248201527f53656e646572206973206e6f7420706f6f6c206f776e6572000000000000000060448201526064016104bc565b6001836001600160a01b031663a7497fa56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4a9190611b66565b6001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cab9190611b83565b6002811115610cbc57610cbc611b0b565b14610d095760405162461bcd60e51b815260206004820152601760248201527f50726576696f757320544745206e6f74206661696c656400000000000000000060448201526064016104bc565b600354600090610d21906001600160a01b03166113dc565b6001546040516303203cd960e21b81529192506001600160a01b031690630c80f36490610d55908490600290600401611ba4565b6020604051808303816000875af1158015610d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d989190611bdf565b50600454600090610db1906001600160a01b03166113dc565b6001546040516303203cd960e21b81529192506001600160a01b031690630c80f36490610de5908490600390600401611ba4565b6020604051808303816000875af1158015610e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e289190611bdf565b506040516322ae8aef60e01b81526001600160a01b038316906322ae8aef90610e579088908890600401611d4a565b600060405180830381600087803b158015610e7157600080fd5b505af1158015610e85573d6000803e3d6000fd5b505060405163144fa6d760e01b81526001600160a01b0385811660048301528816925063144fa6d79150602401600060405180830381600087803b158015610ecc57600080fd5b505af1158015610ee0573d6000803e3d6000fd5b50506040516349297b3360e01b81526001600160a01b03841692506349297b339150610f1490339086908890600401611c89565b600060405180830381600087803b158015610f2e57600080fd5b505af1158015610f42573d6000803e3d6000fd5b505060405163024aa90f60e61b81526001600160a01b038481166004830152881692506392aa43c09150602401600060405180830381600087803b158015610f8957600080fd5b505af1158015610f9d573d6000803e3d6000fd5b5050604080516001600160a01b038981168252868116602083015285168183015290517f9c5d829b9b23efc461f9aeef91979ec04bb903feb3bee4f26d22114abfc7335b9350908190036060019150a15050505050565b6000546001600160a01b0316331461101e5760405162461bcd60e51b81526004016104bc90611da9565b60058190556040518181527f20461e09b8e557b77e107939f9ce6544698123aad0fc964ac5cc59b7df2e608f906020015b60405180910390a150565b6000546001600160a01b031633146110845760405162461bcd60e51b81526004016104bc90611da9565b61108e60006114ae565b565b600061109c60086114fe565b905090565b6000546001600160a01b031633146110cb5760405162461bcd60e51b81526004016104bc90611da9565b60068190556040518181527fb3b5a2f69b3db6f9f9545a71982d531ee15418a26301988f14ec9d4636042e689060200161104f565b6000546001600160a01b0316331461112a5760405162461bcd60e51b81526004016104bc90611da9565b611135600882611508565b6111815760405162461bcd60e51b815260206004820152601760248201527f416c7265616479206e6f742077686974656c697374656400000000000000000060448201526064016104bc565b604080516001600160a01b0383168152600060208201527f707f3c5101172c4122bef76a7247663a6c9347fd005fc5eff73c858572d9f589910161104f565b606061109c600861151d565b6000546001600160a01b031633146111f65760405162461bcd60e51b81526004016104bc90611da9565b6040516001600160a01b03821690303180156108fc02916000818181858888f193505050501580156108fb573d6000803e3d6000fd5b6000546001600160a01b031633146112565760405162461bcd60e51b81526004016104bc90611da9565b61126160088261152a565b6112a35760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481dda1a5d195b1a5cdd1959606a1b60448201526064016104bc565b604080516001600160a01b0383168152600160208201527f707f3c5101172c4122bef76a7247663a6c9347fd005fc5eff73c858572d9f589910161104f565b6000546001600160a01b0316331461130c5760405162461bcd60e51b81526004016104bc90611da9565b60078190556040518181527fddaabc20f9c626e5660727e2e44f0bf5ad346108c4c3be2674ea6300a815218f9060200161104f565b6000546001600160a01b0316331461136b5760405162461bcd60e51b81526004016104bc90611da9565b6001600160a01b0381166113d05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104bc565b6113d9816114ae565b50565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166114745760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016104bc565b919050565b6000611485838361153f565b9392505050565b6001600160a01b03811660009081526001830160205260408120541515611485565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006107d8825490565b6000611485836001600160a01b038416611569565b606060006114858361165c565b6000611485836001600160a01b0384166116b8565b600082600001828154811061155657611556611dde565b9060005260206000200154905092915050565b6000818152600183016020526040812054801561165257600061158d600183611df4565b85549091506000906115a190600190611df4565b90508181146116065760008660000182815481106115c1576115c1611dde565b90600052602060002001549050808760000184815481106115e4576115e4611dde565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061161757611617611e19565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107d8565b60009150506107d8565b6060816000018054806020026020016040519081016040528092919081815260200182805480156116ac57602002820191906000526020600020905b815481526020019060010190808311611698575b50505050509050919050565b60008181526001830160205260408120546116ff575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107d8565b5060006107d8565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff8111828210171561174157611741611707565b60405290565b6040516060810167ffffffffffffffff8111828210171561174157611741611707565b604051601f8201601f1916810167ffffffffffffffff8111828210171561179357611793611707565b604052919050565b600082601f8301126117ac57600080fd5b813567ffffffffffffffff8111156117c6576117c6611707565b6117d9601f8201601f191660200161176a565b8181528460208386010111156117ee57600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b03811681146113d957600080fd5b600082601f83011261183157600080fd5b8135602067ffffffffffffffff82111561184d5761184d611707565b8160051b61185c82820161176a565b928352848101820192828101908785111561187657600080fd5b83870192505b8483101561189e57823561188f8161180b565b8252918301919083019061187c565b979650505050505050565b600061016082840312156118bc57600080fd5b6118c461171d565b9050813567ffffffffffffffff808211156118de57600080fd5b6118ea8583860161179b565b83526020840135602084015260408401356040840152606084013560608401526080840135608084015260a084013560a084015260c084013560c084015260e084013560e084015261010091508184013582840152610120915081840135828401526101409150818401358181111561196257600080fd5b61196e86828701611820565b8385015250505092915050565b60006020828403121561198d57600080fd5b813567ffffffffffffffff8111156119a457600080fd5b6119b0848285016118a9565b949350505050565b6000602082840312156119ca57600080fd5b5035919050565b6000602082840312156119e357600080fd5b81356114858161180b565b600080600060608486031215611a0357600080fd5b8335611a0e8161180b565b9250602084013567ffffffffffffffff80821115611a2b57600080fd5b9085019060608288031215611a3f57600080fd5b611a47611747565b823582811115611a5657600080fd5b611a628982860161179b565b825250602083013582811115611a7757600080fd5b611a838982860161179b565b602083015250604092830135838201529350908501359080821115611aa757600080fd5b50611ab4868287016118a9565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015611aff5783516001600160a01b031683529284019291840191600101611ada565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b600060208284031215611b3357600080fd5b81516004811061148557600080fd5b6020808252600a9082015269139bdd0818481c1bdbdb60b21b604082015260600190565b600060208284031215611b7857600080fd5b81516114858161180b565b600060208284031215611b9557600080fd5b81516003811061148557600080fd5b6001600160a01b03831681526040810160048310611bd257634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b600060208284031215611bf157600080fd5b5051919050565b6000815180845260005b81811015611c1e57602081850181015186830182015201611c02565b81811115611c30576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015611c7e5781516001600160a01b031687529582019590820190600101611c59565b509495945050505050565b6001600160a01b038481168252831660208201526060604082018190528251610160918301829052600091611cc26101c0850183611bf8565b915060208501516080850152604085015160a0850152606085015160c0850152608085015160e085015260a0850151610100818187015260c08701519150610120828188015260e08801519250610140838189015282890151858901528189015161018089015280890151945050505050605f19848303016101a085015261189e8282611c45565b60018060a01b0383168152604060208201526000825160606040840152611d7460a0840182611bf8565b90506020840151603f19848303016060850152611d918282611bf8565b91505060408401516080840152809150509392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600082821015611e1457634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212202cc07b5b48655e3297d9756645d77eb2b7d5f0cd135e15c20e9f667acd29672d64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c80638ab1d681116100b6578063ccd4743e1161006f578063ccd4743e1461036b578063ddca3f431461038b578063e39ff19f146103a1578063e43252d7146103c1578063ece40cc1146103e1578063f2fde38b1461040157600080fd5b80638ab1d681146102bf5780638da5cb5b146102df57806393e59dc1146102fd5780639a0b6f9b1461031f578063b58131b014610335578063c41c2f241461034b57600080fd5b80633fec91a4116101085780633fec91a41461021457806342b8cdbf1461023457806369fe0e2d14610247578063715018a61461026757806378bb51641461027c5780638548abf61461029f57600080fd5b80631022ed60146101455780631be40f27146101675780632346e06d146101a4578063265d4409146101c45780633af32abf146101e4575b600080fd5b34801561015157600080fd5b5061016561016036600461197b565b610421565b005b34801561017357600080fd5b506101876101823660046119b8565b6107cb565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101b057600080fd5b50600454610187906001600160a01b031681565b3480156101d057600080fd5b50600354610187906001600160a01b031681565b3480156101f057600080fd5b506102046101ff3660046119d1565b6107de565b604051901515815260200161019b565b34801561022057600080fd5b5061016561022f3660046119b8565b6107eb565b6101656102423660046119ee565b6108ff565b34801561025357600080fd5b506101656102623660046119b8565b610ff4565b34801561027357600080fd5b5061016561105a565b34801561028857600080fd5b50610291611090565b60405190815260200161019b565b3480156102ab57600080fd5b506101656102ba3660046119b8565b6110a1565b3480156102cb57600080fd5b506101656102da3660046119d1565b611100565b3480156102eb57600080fd5b506000546001600160a01b0316610187565b34801561030957600080fd5b506103126111c0565b60405161019b9190611abe565b34801561032b57600080fd5b5061029160065481565b34801561034157600080fd5b5061029160075481565b34801561035757600080fd5b50600154610187906001600160a01b031681565b34801561037757600080fd5b50600254610187906001600160a01b031681565b34801561039757600080fd5b5061029160055481565b3480156103ad57600080fd5b506101656103bc3660046119d1565b6111cc565b3480156103cd57600080fd5b506101656103dc3660046119d1565b61122c565b3480156103ed57600080fd5b506101656103fc3660046119b8565b6112e2565b34801561040d57600080fd5b5061016561041c3660046119d1565b611341565b60018054604051630db9619f60e31b81523360048201526001600160a01b0390911690636dcb0cf890602401602060405180830381865afa15801561046a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048e9190611b21565b600381111561049f5761049f611b0b565b146104c55760405162461bcd60e51b81526004016104bc90611b42565b60405180910390fd5b6000336001600160a01b031663a7497fa56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105299190611b66565b6001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058a9190611b83565b600281111561059b5761059b611b0b565b036105d95760405162461bcd60e51b815260206004820152600e60248201526d486173206163746976652054474560901b60448201526064016104bc565b6004546000906105f1906001600160a01b03166113dc565b6001546040516303203cd960e21b81529192506001600160a01b031690630c80f36490610625908490600390600401611ba4565b6020604051808303816000875af1158015610644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106689190611bdf565b50806001600160a01b03166349297b3333336001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106db9190611b66565b856040518463ffffffff1660e01b81526004016106fa93929190611c89565b600060405180830381600087803b15801561071457600080fd5b505af1158015610728573d6000803e3d6000fd5b505060405163024aa90f60e61b81526001600160a01b03841660048201523392506392aa43c09150602401600060405180830381600087803b15801561076d57600080fd5b505af1158015610781573d6000803e3d6000fd5b5050604080513381526001600160a01b03851660208201527f0e3dbd8c6caab1c68013fb13d63b7ff61db8fed8b3e7ce4e8e294ee1d0c22e8e935001905060405180910390a15050565b60006107d8600883611479565b92915050565b60006107d860088361148c565b60018054604051630db9619f60e31b81523360048201526001600160a01b0390911690636dcb0cf890602401602060405180830381865afa158015610834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108589190611b21565b600381111561086957610869611b0b565b146108865760405162461bcd60e51b81526004016104bc90611b42565b60015460405163f4be936960e01b8152336004820152602481018390526001600160a01b039091169063f4be9369906044016020604051808303816000875af11580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb9190611bdf565b5050565b610908336107de565b6109465760405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b60448201526064016104bc565b600554341461098e5760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd08199959481c185cdcd95960621b60448201526064016104bc565b6001600160a01b038316610a87576002546109b1906001600160a01b03166113dc565b60405163189acdbd60e31b81523360048201529093506001600160a01b0384169063c4d66de890602401600060405180830381600087803b1580156109f557600080fd5b505af1158015610a09573d6000803e3d6000fd5b5050600180546040516303203cd960e21b81526001600160a01b039091169350630c80f3649250610a3e918791600401611ba4565b6020604051808303816000875af1158015610a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a819190611bdf565b50610d09565b60018054604051630db9619f60e31b81526001600160a01b03868116600483015290911690636dcb0cf890602401602060405180830381865afa158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af69190611b21565b6003811115610b0757610b07611b0b565b14610b245760405162461bcd60e51b81526004016104bc90611b42565b826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b869190611b66565b6001600160a01b0316336001600160a01b031614610be65760405162461bcd60e51b815260206004820152601860248201527f53656e646572206973206e6f7420706f6f6c206f776e6572000000000000000060448201526064016104bc565b6001836001600160a01b031663a7497fa56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4a9190611b66565b6001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cab9190611b83565b6002811115610cbc57610cbc611b0b565b14610d095760405162461bcd60e51b815260206004820152601760248201527f50726576696f757320544745206e6f74206661696c656400000000000000000060448201526064016104bc565b600354600090610d21906001600160a01b03166113dc565b6001546040516303203cd960e21b81529192506001600160a01b031690630c80f36490610d55908490600290600401611ba4565b6020604051808303816000875af1158015610d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d989190611bdf565b50600454600090610db1906001600160a01b03166113dc565b6001546040516303203cd960e21b81529192506001600160a01b031690630c80f36490610de5908490600390600401611ba4565b6020604051808303816000875af1158015610e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e289190611bdf565b506040516322ae8aef60e01b81526001600160a01b038316906322ae8aef90610e579088908890600401611d4a565b600060405180830381600087803b158015610e7157600080fd5b505af1158015610e85573d6000803e3d6000fd5b505060405163144fa6d760e01b81526001600160a01b0385811660048301528816925063144fa6d79150602401600060405180830381600087803b158015610ecc57600080fd5b505af1158015610ee0573d6000803e3d6000fd5b50506040516349297b3360e01b81526001600160a01b03841692506349297b339150610f1490339086908890600401611c89565b600060405180830381600087803b158015610f2e57600080fd5b505af1158015610f42573d6000803e3d6000fd5b505060405163024aa90f60e61b81526001600160a01b038481166004830152881692506392aa43c09150602401600060405180830381600087803b158015610f8957600080fd5b505af1158015610f9d573d6000803e3d6000fd5b5050604080516001600160a01b038981168252868116602083015285168183015290517f9c5d829b9b23efc461f9aeef91979ec04bb903feb3bee4f26d22114abfc7335b9350908190036060019150a15050505050565b6000546001600160a01b0316331461101e5760405162461bcd60e51b81526004016104bc90611da9565b60058190556040518181527f20461e09b8e557b77e107939f9ce6544698123aad0fc964ac5cc59b7df2e608f906020015b60405180910390a150565b6000546001600160a01b031633146110845760405162461bcd60e51b81526004016104bc90611da9565b61108e60006114ae565b565b600061109c60086114fe565b905090565b6000546001600160a01b031633146110cb5760405162461bcd60e51b81526004016104bc90611da9565b60068190556040518181527fb3b5a2f69b3db6f9f9545a71982d531ee15418a26301988f14ec9d4636042e689060200161104f565b6000546001600160a01b0316331461112a5760405162461bcd60e51b81526004016104bc90611da9565b611135600882611508565b6111815760405162461bcd60e51b815260206004820152601760248201527f416c7265616479206e6f742077686974656c697374656400000000000000000060448201526064016104bc565b604080516001600160a01b0383168152600060208201527f707f3c5101172c4122bef76a7247663a6c9347fd005fc5eff73c858572d9f589910161104f565b606061109c600861151d565b6000546001600160a01b031633146111f65760405162461bcd60e51b81526004016104bc90611da9565b6040516001600160a01b03821690303180156108fc02916000818181858888f193505050501580156108fb573d6000803e3d6000fd5b6000546001600160a01b031633146112565760405162461bcd60e51b81526004016104bc90611da9565b61126160088261152a565b6112a35760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481dda1a5d195b1a5cdd1959606a1b60448201526064016104bc565b604080516001600160a01b0383168152600160208201527f707f3c5101172c4122bef76a7247663a6c9347fd005fc5eff73c858572d9f589910161104f565b6000546001600160a01b0316331461130c5760405162461bcd60e51b81526004016104bc90611da9565b60078190556040518181527fddaabc20f9c626e5660727e2e44f0bf5ad346108c4c3be2674ea6300a815218f9060200161104f565b6000546001600160a01b0316331461136b5760405162461bcd60e51b81526004016104bc90611da9565b6001600160a01b0381166113d05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104bc565b6113d9816114ae565b50565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166114745760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016104bc565b919050565b6000611485838361153f565b9392505050565b6001600160a01b03811660009081526001830160205260408120541515611485565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006107d8825490565b6000611485836001600160a01b038416611569565b606060006114858361165c565b6000611485836001600160a01b0384166116b8565b600082600001828154811061155657611556611dde565b9060005260206000200154905092915050565b6000818152600183016020526040812054801561165257600061158d600183611df4565b85549091506000906115a190600190611df4565b90508181146116065760008660000182815481106115c1576115c1611dde565b90600052602060002001549050808760000184815481106115e4576115e4611dde565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061161757611617611e19565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107d8565b60009150506107d8565b6060816000018054806020026020016040519081016040528092919081815260200182805480156116ac57602002820191906000526020600020905b815481526020019060010190808311611698575b50505050509050919050565b60008181526001830160205260408120546116ff575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107d8565b5060006107d8565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff8111828210171561174157611741611707565b60405290565b6040516060810167ffffffffffffffff8111828210171561174157611741611707565b604051601f8201601f1916810167ffffffffffffffff8111828210171561179357611793611707565b604052919050565b600082601f8301126117ac57600080fd5b813567ffffffffffffffff8111156117c6576117c6611707565b6117d9601f8201601f191660200161176a565b8181528460208386010111156117ee57600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b03811681146113d957600080fd5b600082601f83011261183157600080fd5b8135602067ffffffffffffffff82111561184d5761184d611707565b8160051b61185c82820161176a565b928352848101820192828101908785111561187657600080fd5b83870192505b8483101561189e57823561188f8161180b565b8252918301919083019061187c565b979650505050505050565b600061016082840312156118bc57600080fd5b6118c461171d565b9050813567ffffffffffffffff808211156118de57600080fd5b6118ea8583860161179b565b83526020840135602084015260408401356040840152606084013560608401526080840135608084015260a084013560a084015260c084013560c084015260e084013560e084015261010091508184013582840152610120915081840135828401526101409150818401358181111561196257600080fd5b61196e86828701611820565b8385015250505092915050565b60006020828403121561198d57600080fd5b813567ffffffffffffffff8111156119a457600080fd5b6119b0848285016118a9565b949350505050565b6000602082840312156119ca57600080fd5b5035919050565b6000602082840312156119e357600080fd5b81356114858161180b565b600080600060608486031215611a0357600080fd5b8335611a0e8161180b565b9250602084013567ffffffffffffffff80821115611a2b57600080fd5b9085019060608288031215611a3f57600080fd5b611a47611747565b823582811115611a5657600080fd5b611a628982860161179b565b825250602083013582811115611a7757600080fd5b611a838982860161179b565b602083015250604092830135838201529350908501359080821115611aa757600080fd5b50611ab4868287016118a9565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015611aff5783516001600160a01b031683529284019291840191600101611ada565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b600060208284031215611b3357600080fd5b81516004811061148557600080fd5b6020808252600a9082015269139bdd0818481c1bdbdb60b21b604082015260600190565b600060208284031215611b7857600080fd5b81516114858161180b565b600060208284031215611b9557600080fd5b81516003811061148557600080fd5b6001600160a01b03831681526040810160048310611bd257634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b600060208284031215611bf157600080fd5b5051919050565b6000815180845260005b81811015611c1e57602081850181015186830182015201611c02565b81811115611c30576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015611c7e5781516001600160a01b031687529582019590820190600101611c59565b509495945050505050565b6001600160a01b038481168252831660208201526060604082018190528251610160918301829052600091611cc26101c0850183611bf8565b915060208501516080850152604085015160a0850152606085015160c0850152608085015160e085015260a0850151610100818187015260c08701519150610120828188015260e08801519250610140838189015282890151858901528189015161018089015280890151945050505050605f19848303016101a085015261189e8282611c45565b60018060a01b0383168152604060208201526000825160606040840152611d7460a0840182611bf8565b90506020840151603f19848303016060850152611d918282611bf8565b91505060408401516080840152809150509392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600082821015611e1457634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212202cc07b5b48655e3297d9756645d77eb2b7d5f0cd135e15c20e9f667acd29672d64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3636,
        "contract": "contracts/Service.sol:Service",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5376,
        "contract": "contracts/Service.sol:Service",
        "label": "directory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDirectory)6940"
      },
      {
        "astId": 5378,
        "contract": "contracts/Service.sol:Service",
        "label": "poolMaster",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5380,
        "contract": "contracts/Service.sol:Service",
        "label": "tokenMaster",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5382,
        "contract": "contracts/Service.sol:Service",
        "label": "tgeMaster",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5384,
        "contract": "contracts/Service.sol:Service",
        "label": "fee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5386,
        "contract": "contracts/Service.sol:Service",
        "label": "proposalQuorum",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5388,
        "contract": "contracts/Service.sol:Service",
        "label": "proposalThreshold",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5391,
        "contract": "contracts/Service.sol:Service",
        "label": "_whitelist",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(AddressSet)4147_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDirectory)6940": {
        "encoding": "inplace",
        "label": "contract IDirectory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4147_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4146,
            "contract": "contracts/Service.sol:Service",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3846_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3846_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3841,
            "contract": "contracts/Service.sol:Service",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3845,
            "contract": "contracts/Service.sol:Service",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}