{
  "address": "0x5c328D87E0680B5039C318699062D5607250642f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hardcap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITGE.TGEInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockupPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "maxPurchaseOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPurchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "purchaseOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "softcap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum ITGE.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IGovernanceToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPurchases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x31d1d48251bb2bd723fc0cce7d1b96b33488ae340475d55b327f3f3c92c7a1ce",
  "receipt": {
    "to": null,
    "from": "0x90A4a90e6FAf88c4d709F666D26793F9e2B47183",
    "contractAddress": "0x5c328D87E0680B5039C318699062D5607250642f",
    "transactionIndex": 22,
    "gasUsed": "1043783",
    "logsBloom": "0x
    "blockHash": "0x4d68686ca4c222868b473e8fbcf7ce68e748f8dc2135e920ddbf9834b6acd326",
    "transactionHash": "0x31d1d48251bb2bd723fc0cce7d1b96b33488ae340475d55b327f3f3c92c7a1ce",
    "logs": [],
    "blockNumber": 10861867,
    "cumulativeGasUsed": "4842376",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3da88f1ba9e4486f297fae8df5eca67f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct ITGE.TGEInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"maxPurchaseOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchaseOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum ITGE.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IGovernanceToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPurchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TGE.sol\":\"TGE\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xd0a917e32d1251a9b2f1dea15e932815d5382e64e6b0a18104664a6cc774cd70\",\"license\":\"MIT\"},\"contracts/TGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"./interfaces/IGovernanceToken.sol\\\";\\nimport \\\"./interfaces/ITGE.sol\\\";\\n\\ncontract TGE is ITGE, OwnableUpgradeable {\\n    IGovernanceToken public token;\\n\\n    string public metadataURI;\\n\\n    uint256 public price;\\n\\n    uint256 public hardcap;\\n\\n    uint256 public softcap;\\n\\n    uint256 public minPurchase;\\n\\n    uint256 public maxPurchase;\\n\\n    uint256 public lockupPercent;\\n\\n    uint256 public duration;\\n\\n    uint256 public createdAt;\\n\\n    uint256 public totalPurchases;\\n\\n    mapping(address => uint256) public purchaseOf;\\n\\n    // CONSTRUCTOR\\n\\n    function initialize(\\n        address owner_,\\n        address token_,\\n        TGEInfo memory info\\n    ) external override initializer {\\n        uint256 remainingSupply = IGovernanceToken(token_).cap() -\\n            IGovernanceToken(token_).totalSupply();\\n        require(\\n            info.hardcap <= remainingSupply,\\n            \\\"Hardcap higher than remaining supply\\\"\\n        );\\n\\n        _transferOwnership(owner_);\\n\\n        token = IGovernanceToken(token_);\\n        metadataURI = info.metadataURI;\\n        price = info.price;\\n        hardcap = info.hardcap;\\n        softcap = info.softcap;\\n        minPurchase = info.minPurchase;\\n        maxPurchase = info.maxPurchase;\\n        lockupPercent = info.lockupPercent;\\n        duration = info.duration;\\n        createdAt = block.number;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    function purchase(uint256 amount)\\n        external\\n        payable\\n        override\\n        onlyState(State.Active)\\n    {\\n        require(amount >= minPurchase, \\\"Amount less than min purchase\\\");\\n        require(msg.value == amount * price, \\\"Invalid ETH value passed\\\");\\n        require(amount <= maxPurchaseOf(msg.sender), \\\"Overflows max purchase\\\");\\n        require(totalPurchases + amount <= hardcap, \\\"Overflows hardcap\\\");\\n\\n        totalPurchases += amount;\\n        purchaseOf[msg.sender] += amount;\\n        token.mint(\\n            msg.sender,\\n            amount,\\n            (amount * lockupPercent + 99) / 100,\\n            createdAt + duration\\n        );\\n    }\\n\\n    function claimBack() external override onlyState(State.Failed) {\\n        // User can't claim more than he bought in this event (in case somebody else has transferred him tokens)\\n        uint256 refundTokens = MathUpgradeable.min(\\n            token.unlockedBalanceOf(msg.sender),\\n            purchaseOf[msg.sender]\\n        );\\n        purchaseOf[msg.sender] -= refundTokens;\\n        token.burn(msg.sender, refundTokens);\\n        uint256 refundValue = refundTokens * price;\\n        payable(msg.sender).transfer(refundValue);\\n    }\\n\\n    // RESTRICTED FUNCTIONS\\n\\n    function transferFunds(address to)\\n        external\\n        override\\n        onlyOwner\\n        onlyState(State.Successful)\\n    {\\n        payable(to).transfer(payable(address(this)).balance);\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    function maxPurchaseOf(address account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return maxPurchase - purchaseOf[account];\\n    }\\n\\n    function state() public view override returns (State) {\\n        if (block.number < createdAt + duration) {\\n            return State.Active;\\n        } else if (totalPurchases >= softcap) {\\n            return State.Successful;\\n        } else {\\n            return State.Failed;\\n        }\\n    }\\n\\n    // MODIFIER\\n\\n    modifier onlyState(State state_) {\\n        require(state() == state_, \\\"TGE in wrong state\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x03e4d2bf61722e7ed7bb432d6897c147405a694b68d7743dff7685e4c543da65\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IGovernanceToken is IERC20Upgradeable {\\n    struct TokenInfo {\\n        string name;\\n        string symbol;\\n        uint256 cap;\\n    }\\n\\n    function initialize(address pool_, TokenInfo memory info) external;\\n\\n    function mint(\\n        address to,\\n        uint256 amount,\\n        uint256 lockedAmount,\\n        uint256 lockDeadline\\n    ) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function lock(\\n        address account,\\n        uint256 amount,\\n        uint256 deadline\\n    ) external;\\n\\n    function cap() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5e98593047262bef13bfb10b2713da554e7dc3ca815a968a3930e9533f259adc\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface ITGE {\\n    struct TGEInfo {\\n        string metadataURI;\\n        uint256 price;\\n        uint256 hardcap;\\n        uint256 softcap;\\n        uint256 minPurchase;\\n        uint256 maxPurchase;\\n        uint256 lockupPercent;\\n        uint256 duration;\\n    }\\n\\n    function initialize(\\n        address owner_,\\n        address token_,\\n        TGEInfo memory info\\n    ) external;\\n\\n    function purchase(uint256 amount) external payable;\\n\\n    function claimBack() external;\\n\\n    function transferFunds(address to) external;\\n\\n    function maxPurchaseOf(address account) external view returns (uint256);\\n\\n    enum State {\\n        Active,\\n        Failed,\\n        Successful\\n    }\\n\\n    function state() external view returns (State);\\n}\\n\",\"keccak256\":\"0xb7c0838fc8c6ce53a3c816d398de6a0b1a99dc7954b4ea063947c91e8fa5e289\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506111ec806100206000396000f3fe60806040526004361061012a5760003560e01c8063a035b1fe116100ab578063e15c38bd1161006f578063e15c38bd146102ef578063e39ff19f14610305578063efef39a114610325578063f2fde38b14610338578063f89be59314610358578063fc0c546a1461036e57600080fd5b8063a035b1fe1461025e578063b071cbe614610274578063bf7fec081461028a578063c19d93fb146102b7578063cf09e0d0146102d957600080fd5b80635962a941116100f25780635962a941146101d6578063715018a6146101ec5780638da5cb5b14610201578063977b055b146102335780639b8c3e211461024957600080fd5b806303ee438c1461012f57806308c833201461015a5780630fb5a6b41461017c57806333b5b62e146101a057806342ee5d84146101b6575b600080fd5b34801561013b57600080fd5b5061014461038e565b6040516101519190610dac565b60405180910390f35b34801561016657600080fd5b5061017a610175366004610ee5565b61041c565b005b34801561018857600080fd5b50610192606d5481565b604051908152602001610151565b3480156101ac57600080fd5b50610192606a5481565b3480156101c257600080fd5b506101926101d1366004610fbc565b61063b565b3480156101e257600080fd5b50610192606f5481565b3480156101f857600080fd5b5061017a610667565b34801561020d57600080fd5b506033546001600160a01b03165b6040516001600160a01b039091168152602001610151565b34801561023f57600080fd5b50610192606b5481565b34801561025557600080fd5b5061017a61069d565b34801561026a57600080fd5b5061019260675481565b34801561028057600080fd5b5061019260685481565b34801561029657600080fd5b506101926102a5366004610fbc565b60706020526000908152604090205481565b3480156102c357600080fd5b506102cc61082b565b6040516101519190610fed565b3480156102e557600080fd5b50610192606e5481565b3480156102fb57600080fd5b50610192606c5481565b34801561031157600080fd5b5061017a610320366004610fbc565b610861565b61017a610333366004611015565b6108ff565b34801561034457600080fd5b5061017a610353366004610fbc565b610b81565b34801561036457600080fd5b5061019260695481565b34801561037a57600080fd5b5060655461021b906001600160a01b031681565b6066805461039b9061102e565b80601f01602080910402602001604051908101604052809291908181526020018280546103c79061102e565b80156104145780601f106103e957610100808354040283529160200191610414565b820191906000526020600020905b8154815290600101906020018083116103f757829003601f168201915b505050505081565b60006104286001610c1c565b90508015610440576000805461ff0019166101001790555b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190611068565b846001600160a01b031663355274ea6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105069190611068565b6105109190611097565b905080836040015111156105775760405162461bcd60e51b8152602060048201526024808201527f4861726463617020686967686572207468616e2072656d61696e696e6720737560448201526370706c7960e01b60648201526084015b60405180910390fd5b61058085610ca9565b606580546001600160a01b0319166001600160a01b038616179055825180516105b191606691602090910190610d13565b50506020820151606755604082015160685560608201516069556080820151606a5560a0820151606b5560c0820151606c5560e0820151606d5543606e558015610635576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6001600160a01b038116600090815260706020526040812054606b546106619190611097565b92915050565b6033546001600160a01b031633146106915760405162461bcd60e51b815260040161056e906110ae565b61069b6000610ca9565b565b6001806106a861082b565b60028111156106b9576106b9610fd7565b146106d65760405162461bcd60e51b815260040161056e906110e3565b606554604051631092ab9160e31b815233600482015260009161075e916001600160a01b03909116906384955c8890602401602060405180830381865afa158015610725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107499190611068565b33600090815260706020526040902054610cfb565b33600090815260706020526040812080549293508392909190610782908490611097565b9091555050606554604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156107d357600080fd5b505af11580156107e7573d6000803e3d6000fd5b505050506000606754826107fb919061110f565b604051909150339082156108fc029083906000818181858888f19350505050158015610635573d6000803e3d6000fd5b6000606d54606e5461083d919061112e565b43101561084a5750600090565b606954606f541061085b5750600290565b50600190565b6033546001600160a01b0316331461088b5760405162461bcd60e51b815260040161056e906110ae565b60028061089661082b565b60028111156108a7576108a7610fd7565b146108c45760405162461bcd60e51b815260040161056e906110e3565b6040516001600160a01b03831690303180156108fc02916000818181858888f193505050501580156108fa573d6000803e3d6000fd5b505050565b60008061090a61082b565b600281111561091b5761091b610fd7565b146109385760405162461bcd60e51b815260040161056e906110e3565b606a5482101561098a5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206c657373207468616e206d696e207075726368617365000000604482015260640161056e565b606754610997908361110f565b34146109e55760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964204554482076616c7565207061737365640000000000000000604482015260640161056e565b6109ee3361063b565b821115610a365760405162461bcd60e51b81526020600482015260166024820152754f766572666c6f7773206d617820707572636861736560501b604482015260640161056e565b60685482606f54610a47919061112e565b1115610a895760405162461bcd60e51b815260206004820152601160248201527004f766572666c6f7773206861726463617607c1b604482015260640161056e565b81606f6000828254610a9b919061112e565b90915550503360009081526070602052604081208054849290610abf90849061112e565b9091555050606554606c546001600160a01b039091169063a647e8ec9033908590606490610aed908361110f565b610af890606361112e565b610b029190611146565b606d54606e54610b12919061112e565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925260448301526064820152608401600060405180830381600087803b158015610b6557600080fd5b505af1158015610b79573d6000803e3d6000fd5b505050505050565b6033546001600160a01b03163314610bab5760405162461bcd60e51b815260040161056e906110ae565b6001600160a01b038116610c105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161056e565b610c1981610ca9565b50565b60008054610100900460ff1615610c63578160ff166001148015610c3f5750303b155b610c5b5760405162461bcd60e51b815260040161056e90611168565b506000919050565b60005460ff808416911610610c8a5760405162461bcd60e51b815260040161056e90611168565b506000805460ff191660ff92909216919091179055600190565b919050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000818310610d0a5781610d0c565b825b9392505050565b828054610d1f9061102e565b90600052602060002090601f016020900481019282610d415760008555610d87565b82601f10610d5a57805160ff1916838001178555610d87565b82800160010185558215610d87579182015b82811115610d87578251825591602001919060010190610d6c565b50610d93929150610d97565b5090565b5b80821115610d935760008155600101610d98565b600060208083528351808285015260005b81811015610dd957858101830151858201604001528201610dbd565b81811115610deb576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610ca457600080fd5b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610e5257610e52610e18565b60405290565b600082601f830112610e6957600080fd5b813567ffffffffffffffff80821115610e8457610e84610e18565b604051601f8301601f19908116603f01168101908282118183101715610eac57610eac610e18565b81604052838152866020858801011115610ec557600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610efa57600080fd5b610f0384610e01565b9250610f1160208501610e01565b9150604084013567ffffffffffffffff80821115610f2e57600080fd5b908501906101008288031215610f4357600080fd5b610f4b610e2e565b823582811115610f5a57600080fd5b610f6689828601610e58565b8252506020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201528093505050509250925092565b600060208284031215610fce57600080fd5b610d0c82610e01565b634e487b7160e01b600052602160045260246000fd5b602081016003831061100f57634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561102757600080fd5b5035919050565b600181811c9082168061104257607f821691505b60208210810361106257634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561107a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156110a9576110a9611081565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526012908201527154474520696e2077726f6e6720737461746560701b604082015260600190565b600081600019048311821515161561112957611129611081565b500290565b6000821982111561114157611141611081565b500190565b60008261116357634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea26469706673582212200fbbea395f3992bc3f554ee6e2bf399f7a9f715f1c4bd6091507daff3539389f64736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c8063a035b1fe116100ab578063e15c38bd1161006f578063e15c38bd146102ef578063e39ff19f14610305578063efef39a114610325578063f2fde38b14610338578063f89be59314610358578063fc0c546a1461036e57600080fd5b8063a035b1fe1461025e578063b071cbe614610274578063bf7fec081461028a578063c19d93fb146102b7578063cf09e0d0146102d957600080fd5b80635962a941116100f25780635962a941146101d6578063715018a6146101ec5780638da5cb5b14610201578063977b055b146102335780639b8c3e211461024957600080fd5b806303ee438c1461012f57806308c833201461015a5780630fb5a6b41461017c57806333b5b62e146101a057806342ee5d84146101b6575b600080fd5b34801561013b57600080fd5b5061014461038e565b6040516101519190610dac565b60405180910390f35b34801561016657600080fd5b5061017a610175366004610ee5565b61041c565b005b34801561018857600080fd5b50610192606d5481565b604051908152602001610151565b3480156101ac57600080fd5b50610192606a5481565b3480156101c257600080fd5b506101926101d1366004610fbc565b61063b565b3480156101e257600080fd5b50610192606f5481565b3480156101f857600080fd5b5061017a610667565b34801561020d57600080fd5b506033546001600160a01b03165b6040516001600160a01b039091168152602001610151565b34801561023f57600080fd5b50610192606b5481565b34801561025557600080fd5b5061017a61069d565b34801561026a57600080fd5b5061019260675481565b34801561028057600080fd5b5061019260685481565b34801561029657600080fd5b506101926102a5366004610fbc565b60706020526000908152604090205481565b3480156102c357600080fd5b506102cc61082b565b6040516101519190610fed565b3480156102e557600080fd5b50610192606e5481565b3480156102fb57600080fd5b50610192606c5481565b34801561031157600080fd5b5061017a610320366004610fbc565b610861565b61017a610333366004611015565b6108ff565b34801561034457600080fd5b5061017a610353366004610fbc565b610b81565b34801561036457600080fd5b5061019260695481565b34801561037a57600080fd5b5060655461021b906001600160a01b031681565b6066805461039b9061102e565b80601f01602080910402602001604051908101604052809291908181526020018280546103c79061102e565b80156104145780601f106103e957610100808354040283529160200191610414565b820191906000526020600020905b8154815290600101906020018083116103f757829003601f168201915b505050505081565b60006104286001610c1c565b90508015610440576000805461ff0019166101001790555b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190611068565b846001600160a01b031663355274ea6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105069190611068565b6105109190611097565b905080836040015111156105775760405162461bcd60e51b8152602060048201526024808201527f4861726463617020686967686572207468616e2072656d61696e696e6720737560448201526370706c7960e01b60648201526084015b60405180910390fd5b61058085610ca9565b606580546001600160a01b0319166001600160a01b038616179055825180516105b191606691602090910190610d13565b50506020820151606755604082015160685560608201516069556080820151606a5560a0820151606b5560c0820151606c5560e0820151606d5543606e558015610635576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6001600160a01b038116600090815260706020526040812054606b546106619190611097565b92915050565b6033546001600160a01b031633146106915760405162461bcd60e51b815260040161056e906110ae565b61069b6000610ca9565b565b6001806106a861082b565b60028111156106b9576106b9610fd7565b146106d65760405162461bcd60e51b815260040161056e906110e3565b606554604051631092ab9160e31b815233600482015260009161075e916001600160a01b03909116906384955c8890602401602060405180830381865afa158015610725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107499190611068565b33600090815260706020526040902054610cfb565b33600090815260706020526040812080549293508392909190610782908490611097565b9091555050606554604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156107d357600080fd5b505af11580156107e7573d6000803e3d6000fd5b505050506000606754826107fb919061110f565b604051909150339082156108fc029083906000818181858888f19350505050158015610635573d6000803e3d6000fd5b6000606d54606e5461083d919061112e565b43101561084a5750600090565b606954606f541061085b5750600290565b50600190565b6033546001600160a01b0316331461088b5760405162461bcd60e51b815260040161056e906110ae565b60028061089661082b565b60028111156108a7576108a7610fd7565b146108c45760405162461bcd60e51b815260040161056e906110e3565b6040516001600160a01b03831690303180156108fc02916000818181858888f193505050501580156108fa573d6000803e3d6000fd5b505050565b60008061090a61082b565b600281111561091b5761091b610fd7565b146109385760405162461bcd60e51b815260040161056e906110e3565b606a5482101561098a5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206c657373207468616e206d696e207075726368617365000000604482015260640161056e565b606754610997908361110f565b34146109e55760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964204554482076616c7565207061737365640000000000000000604482015260640161056e565b6109ee3361063b565b821115610a365760405162461bcd60e51b81526020600482015260166024820152754f766572666c6f7773206d617820707572636861736560501b604482015260640161056e565b60685482606f54610a47919061112e565b1115610a895760405162461bcd60e51b815260206004820152601160248201527004f766572666c6f7773206861726463617607c1b604482015260640161056e565b81606f6000828254610a9b919061112e565b90915550503360009081526070602052604081208054849290610abf90849061112e565b9091555050606554606c546001600160a01b039091169063a647e8ec9033908590606490610aed908361110f565b610af890606361112e565b610b029190611146565b606d54606e54610b12919061112e565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925260448301526064820152608401600060405180830381600087803b158015610b6557600080fd5b505af1158015610b79573d6000803e3d6000fd5b505050505050565b6033546001600160a01b03163314610bab5760405162461bcd60e51b815260040161056e906110ae565b6001600160a01b038116610c105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161056e565b610c1981610ca9565b50565b60008054610100900460ff1615610c63578160ff166001148015610c3f5750303b155b610c5b5760405162461bcd60e51b815260040161056e90611168565b506000919050565b60005460ff808416911610610c8a5760405162461bcd60e51b815260040161056e90611168565b506000805460ff191660ff92909216919091179055600190565b919050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000818310610d0a5781610d0c565b825b9392505050565b828054610d1f9061102e565b90600052602060002090601f016020900481019282610d415760008555610d87565b82601f10610d5a57805160ff1916838001178555610d87565b82800160010185558215610d87579182015b82811115610d87578251825591602001919060010190610d6c565b50610d93929150610d97565b5090565b5b80821115610d935760008155600101610d98565b600060208083528351808285015260005b81811015610dd957858101830151858201604001528201610dbd565b81811115610deb576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610ca457600080fd5b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610e5257610e52610e18565b60405290565b600082601f830112610e6957600080fd5b813567ffffffffffffffff80821115610e8457610e84610e18565b604051601f8301601f19908116603f01168101908282118183101715610eac57610eac610e18565b81604052838152866020858801011115610ec557600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610efa57600080fd5b610f0384610e01565b9250610f1160208501610e01565b9150604084013567ffffffffffffffff80821115610f2e57600080fd5b908501906101008288031215610f4357600080fd5b610f4b610e2e565b823582811115610f5a57600080fd5b610f6689828601610e58565b8252506020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201528093505050509250925092565b600060208284031215610fce57600080fd5b610d0c82610e01565b634e487b7160e01b600052602160045260246000fd5b602081016003831061100f57634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561102757600080fd5b5035919050565b600181811c9082168061104257607f821691505b60208210810361106257634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561107a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156110a9576110a9611081565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526012908201527154474520696e2077726f6e6720737461746560701b604082015260600190565b600081600019048311821515161561112957611129611081565b500290565b6000821982111561114157611141611081565b500190565b60008261116357634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea26469706673582212200fbbea395f3992bc3f554ee6e2bf399f7a9f715f1c4bd6091507daff3539389f64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 208,
        "contract": "contracts/TGE.sol:TGE",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 211,
        "contract": "contracts/TGE.sol:TGE",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2312,
        "contract": "contracts/TGE.sol:TGE",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/TGE.sol:TGE",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/TGE.sol:TGE",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5764,
        "contract": "contracts/TGE.sol:TGE",
        "label": "token",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IGovernanceToken)6484"
      },
      {
        "astId": 5766,
        "contract": "contracts/TGE.sol:TGE",
        "label": "metadataURI",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 5768,
        "contract": "contracts/TGE.sol:TGE",
        "label": "price",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 5770,
        "contract": "contracts/TGE.sol:TGE",
        "label": "hardcap",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 5772,
        "contract": "contracts/TGE.sol:TGE",
        "label": "softcap",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 5774,
        "contract": "contracts/TGE.sol:TGE",
        "label": "minPurchase",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 5776,
        "contract": "contracts/TGE.sol:TGE",
        "label": "maxPurchase",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 5778,
        "contract": "contracts/TGE.sol:TGE",
        "label": "lockupPercent",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 5780,
        "contract": "contracts/TGE.sol:TGE",
        "label": "duration",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 5782,
        "contract": "contracts/TGE.sol:TGE",
        "label": "createdAt",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 5784,
        "contract": "contracts/TGE.sol:TGE",
        "label": "totalPurchases",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 5788,
        "contract": "contracts/TGE.sol:TGE",
        "label": "purchaseOf",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IGovernanceToken)6484": {
        "encoding": "inplace",
        "label": "contract IGovernanceToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}